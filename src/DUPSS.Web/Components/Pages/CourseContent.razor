@page "/CourseContent/{CourseId}"
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@using System.Security.Claims
@inject CourseApiService CourseApiService
@inject CourseEnrollApiService CourseEnrollApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.IO 

<div class="course-page-layout">
    @if (course == null && !hasError)
    {
        <div class="loading-indicator-full">
            <p>Loading course content...</p>
            <div class="spinner"></div>
        </div>
    }
    else if (hasError)
    {
        <div class="error-message-full">
            <p>Oops! Something went wrong while loading course content. Please try again later.</p>
            <button class="btn btn-primary" @onclick="GoBackToCourses">Back to Courses</button>
        </div>
    }
    else if (course == null) // Should not happen if hasError is false, but as a fallback
    {
        <div class="no-course-message-full">
            <p>No course content found for this ID. It might not exist or there was a navigation issue.</p>
            <button class="btn btn-primary" @onclick="GoBackToCourses">Back to Courses</button>
        </div>
    }
    else
    {
        <div class="sidebar-column">
            <div class="course-branding">
                @* UPDATED: Changed logo to course picture with fallback *@
                <img src="@(course.ImageUrl ?? "https://placehold.co/80x80/F0F0F0/000000?text=Course")" alt="Course Image" class="course-sidebar-image"/>
                <h2 class="sidebar-course-title">@course.CourseName</h2>
                <p class="sidebar-course-topic">@(course.Topic?.TopicName ?? "General Topic")</p>
            </div>

            <div class="course-material-section">
                <h3>Course Material</h3>
                <div class="module-list">
                    @foreach (var module in modules)
                    {
                        <div class="module-item @(module.IsComplete ? "module-complete" : "")"
                             @onclick="() => ToggleModule(module)">
                            <i class="bi bi-check-circle-fill"></i>
                            <span>@module.Title</span>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="main-content-column">
            <h1 class="main-course-title">@course.CourseName</h1>

            @foreach (var module in modules)
            {
                <div class="module-section @(module.IsExpanded ? "expanded" : "")">
                    <div class="module-header" @onclick="() => ToggleModule(module)">
                        <span class="module-title-text">
                            @module.Title
                            <i class="bi @(module.IsExpanded ? "bi-chevron-up" : "bi-chevron-down") chevron-icon"></i>
                        </span>
                        @if (module.IsComplete)
                        {
                            <span class="module-status-badge complete">
                                <i class="bi bi-check-circle-fill"></i> Complete
                            </span>
                        }
                    </div>


                        <div class="module-body">
                            <div class="learning-objectives-toggle-container">
                                <div class="learning-objectives-toggle" @onclick="() => ToggleLearningObjectives(module)">
                                    <span class="toggle-text">Show Learning Objectives</span>
                                    <i class="bi @(module.AreObjectivesExpanded ? "bi-chevron-up" : "bi-chevron-down") chevron-icon-objectives"></i>
                                </div>
                                @if (module.AreObjectivesExpanded)
                                {
                                    <ul class="learning-objectives-list">
                                        @foreach (var obj in module.LearningObjectives)
                                        {
                                            <li>@obj</li>
                                        }
                                    </ul>
                                }
                            </div>

                            <p class="module-description">
                                @module.Description
                            </p>

                            <div class="lessons-list">
                                @foreach (var lesson in module.Lessons)
                                {
                                    <div class="lesson-item @(lesson.IsComplete ? "lesson-complete" : "")"
                                         @onclick="() => ToggleLessonContent(lesson)"> @* Added onclick to lesson item *@
                                        <i class="bi bi-check-circle-fill lesson-check-icon"></i>
                                        <div class="lesson-details">
                                            <span class="lesson-title">@lesson.Title</span>
                                            @if (!string.IsNullOrEmpty(lesson.DurationText))
                                            {
                                                <span class="lesson-duration">@lesson.Type @lesson.DurationText</span>
                                            }
                                        </div>
                                    </div>

                                    @* NEW: Display lesson content if it's a reading and expanded *@
                                    @if (lesson.Type == "Reading" && !string.IsNullOrEmpty(lesson.Content) && lesson.IsContentExpanded)
                                    {
                                        <div class="lesson-content-display">
                                            <p>@lesson.Content</p>
                                        </div>
                                    }
                                    @* NEW: Display video player if it's a video and expanded *@
                                    else if (lesson.Type == "Video" && !string.IsNullOrEmpty(lesson.VideoUrl) && lesson.IsContentExpanded)
                                    {
                                        <div class="lesson-video-display">
                                            <iframe class="embed-responsive-item" src="@lesson.VideoUrl" allowfullscreen></iframe>
                                        </div>
                                    }
                                }
                            </div>
                        </div>

                </div>
            }
            <div class="bottom-navigation">
                @if (currentEnrollment != null && currentEnrollment.Status != "Completed")
                {
                    <button class="btn btn-success complete-course-button" @onclick="CompleteCourse" disabled="@isCompletingCourse">
                        @if (isCompletingCourse)
                        {
                            <span>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                Completing...
                            </span>
                        }
                        else
                        {
                            <span>
                                <i class="bi bi-check-lg"></i> Complete Course
                            </span>
                        }
                    </button>
                }
                <button class="btn btn-primary" @onclick="GoBackToCourses">Back to All Courses</button>
                @if (!string.IsNullOrEmpty(completionMessage))
                {
                    <div class="@completionMessageClass mt-3">@completionMessage</div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string CourseId { get; set; } = string.Empty;

    private CourseDTO? course;
    private bool hasError = false;

    private List<CourseModule> modules = new List<CourseModule>();

    // State for current user and their enrollment in this course
    private string? currentLoggedInUserId;
    private CourseEnrollDTO? currentEnrollment;
    private bool isCompletingCourse = false;
    private string completionMessage = string.Empty;
    private string completionMessageClass = string.Empty;

    [Inject]
    private IWebHostEnvironment WebHostEnvironment { get; set; } = default!; // Inject IWebHostEnvironment


    public class CourseModule
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public bool IsExpanded { get; set; } = false;
        public bool IsComplete { get; set; } = false;
        public List<CourseLesson> Lessons { get; set; } = new List<CourseLesson>();
        public List<string> LearningObjectives { get; set; } = new List<string>();
        public bool AreObjectivesExpanded { get; set; } = false;
    }

    public class CourseLesson
    {
        public string Title { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string DurationText { get; set; } = string.Empty;
        public bool IsComplete { get; set; } = false;
        // Property to hold the content of the reading material
        public string? Content { get; set; }
        // Property to control the visibility of the content for readings and videos
        public bool IsContentExpanded { get; set; } = false;
        // NEW: Property to hold the video embed URL
        public string? VideoUrl { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadCourseContent();
    }

    private async Task LoadCourseContent()
    {
        hasError = false;
        course = null;
        modules.Clear();
        currentEnrollment = null; // Clear previous enrollment state
        completionMessage = string.Empty;

        try
        {
            // Get current logged-in user ID
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            currentLoggedInUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            course = await CourseApiService.GetByIdAsync(CourseId);

            if (course == null)
            {
                hasError = true;
                Console.WriteLine($"Course with ID {CourseId} not found.");
            }
            else
            {
                // Resolve Course Image URL from wwwroot/images
                if (!string.IsNullOrEmpty(course.CourseId))
                {
                    var wwwrootPath = WebHostEnvironment.WebRootPath;
                    var imagesPath = Path.Combine(wwwrootPath, "images");
                    var supportedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };

                    foreach (var ext in supportedExtensions)
                    {
                        var potentialFileName = $"{course.CourseId}{ext}";
                        var fullPath = Path.Combine(imagesPath, potentialFileName);

                        if (System.IO.File.Exists(fullPath))
                        {
                            course.ImageUrl = $"images/{potentialFileName}"; // Set the relative URL
                            break;
                        }
                    }
                }

                // Check if the current user is enrolled in this course
                if (!string.IsNullOrEmpty(currentLoggedInUserId))
                {
                    var enrollments = await CourseEnrollApiService.GetEnrollmentsByMemberAndCourse(currentLoggedInUserId, CourseId);
                    currentEnrollment = enrollments?.FirstOrDefault(); // Get the specific enrollment if it exists
                }

                PopulateMockModules(course.CourseId);
                // Expand the first module by default
                if (modules.Any())
                {
                    modules.First().IsExpanded = true;
                }

                // NEW: If the course is completed, mark all modules and lessons as complete
                if (currentEnrollment != null && currentEnrollment.Status == "Completed")
                {
                    foreach (var module in modules)
                    {
                        module.IsComplete = true;
                        foreach (var lesson in module.Lessons)
                        {
                            lesson.IsComplete = true;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading course content for ID {CourseId}: {ex.Message}");
            hasError = true;
        }
    }

    private void PopulateMockModules(string courseId)
    {
        if (courseId == "C0001")
        {
            modules.Add(new CourseModule
            {
                Title = "Module 1: Embracing a Sober & Social Life", // Changed title
                Description = "In this module, you will be introduced to the course's program and how to stay sober. You are expected to spend 2 to 3 hours on this module's workload.",
                IsComplete = false,
                LearningObjectives = new List<string> {
                    "Understand the core principles of sober living.",
                    "Identify personal motivations for a substance-free lifestyle.",
                    "Set foundational goals for social engagement without substances."
                },
                Lessons = new List<CourseLesson>
                {
                    new CourseLesson { Title = "Your Journey to Sober Fun", Type = "Reading", DurationText = "10 min", IsComplete = false, Content = "Welcome to the exciting world of drug rehabilitation! This course is designed to guide you through a journey of recovery and self-discovery. We believe in your potential to overcome challenges and build a fulfilling life free from addiction. Throughout the modules, you will find resources, insights, and exercises to support your path to sobriety. Remember, you are not alone in this journey, and support is always available." }, // Changed title
                    new CourseLesson { Title = "Navigating Your Sober Path", Type = "Reading", DurationText = "10 min", IsComplete = false, Content = "The course syllabus provides a detailed overview of the curriculum, learning objectives, and assessment methods. It outlines the topics covered in each module, recommended readings, and important dates. Familiarizing yourself with the syllabus will help you plan your studies effectively and stay on track with your progress. If you have any questions, feel free to reach out to your instructor or support team." }, // Changed title
                    new CourseLesson { Title = "Share Your Sober & Social Goals", Type = "Reading", DurationText = "10 min", IsComplete = false, Content = "To provide you with the best possible learning experience, we encourage you to share more about yourself. Your insights and experiences can help us tailor the content to better meet your needs. Please take a moment to complete the brief survey, which will allow us to understand your background, learning preferences, and any specific areas where you might need additional support. Your responses are confidential and will only be used to enhance your learning journey." } // Changed title
                }
            });
            modules.Add(new CourseModule
            {
                Title = "Module 2: Building Healthy Social Connections", // Changed title to fit theme
                Description = "This module explores the dynamics of social interactions, offering insights into fostering meaningful relationships and navigating social environments without the need for substances.", // Changed description
                IsComplete = false,
                LearningObjectives = new List<string> {
                    "Recognize the impact of past substance use on social dynamics.",
                    "Identify healthy vs. unhealthy social relationships.",
                    "Develop strategies for setting boundaries in social settings.",
                    "Explore the benefits of a supportive sober community."
                },
                Lessons = new List<CourseLesson>
                {
                    new CourseLesson { Title = "Understanding Social Dynamics & Triggers", Type = "Reading", DurationText = "10 min", IsComplete = false, Content = "In this lesson, we delve into the fundamental aspects of social dynamics and how they can be impacted by a history of substance use. You will learn to identify common social triggers that might lead to cravings or discomfort, and begin to understand how to approach these situations with a sober mindset. This foundational knowledge is crucial for building resilient social connections." }, // Changed title and content
                    new CourseLesson { Title = "Cultivating Positive Relationships", Type = "Reading", DurationText = "10 min", IsComplete = false, Content = "This lesson focuses on practical strategies for building and maintaining positive, supportive relationships that align with your sober lifestyle. We'll explore techniques for clear communication, active listening, and setting healthy boundaries to ensure your social circle contributes positively to your recovery journey. Learn how to identify and nurture connections that uplift you." }, // Changed title and content
                    new CourseLesson { Title = "Navigating Social Events Soberly", Type = "Reading", DurationText = "10 min", IsComplete = false, Content = "This lesson provides actionable advice for attending social gatherings and events without feeling pressured to use substances. You'll learn coping mechanisms for uncomfortable situations, how to politely decline offers, and strategies for finding enjoyment in social settings purely on your own terms. Prepare to confidently embrace sober social fun!" } // Changed title and content
                }
            });
            modules.Add(new CourseModule
            {
                Title = "Module 3: Practicing New Social Skills", // Changed title
                Description = "This module focuses on practical application, guiding you through exercises and real-world scenarios to build confidence and competence in sober social interactions.",
                IsComplete = false,
                LearningObjectives = new List<string> {
                    "Practice effective communication in sober social settings.",
                    "Learn techniques for declining substances gracefully.",
                    "Develop coping mechanisms for social anxiety without relying on substances."
                },
                Lessons = new List<CourseLesson>
                {
                    // Example YouTube embed URL
                    new CourseLesson { Title = "Lesson 3.1: Communicating Confidently", Type = "Video", DurationText = "12 min", IsComplete = false, VideoUrl = "https://www.youtube.com/embed/IiVC7omXhUQ?rel=0" },
                    new CourseLesson { Title = "Lesson 3.2: Role-Playing Social Situations", Type = "Reading", DurationText = "8 min", IsComplete = false, Content = "In this lesson, you'll engage in various role-playing exercises designed to simulate real-life social scenarios. This hands-on approach will help you practice responding to peer pressure, initiating conversations, and handling awkward moments, all while maintaining your sobriety. The goal is to build muscle memory for positive social interactions, making it easier to navigate social events with confidence and ease." },
                }
            });
            modules.Add(new CourseModule
            {
                Title = "Module 4: Evaluating Your Social Progress", // Changed title
                Description = "This module focuses on evaluating your progress in navigating social situations without substances. You'll learn to track your successes, identify challenges, and adjust your strategies for continued growth.",
                IsComplete = false,
                LearningObjectives = new List<string> {
                    "Assess personal growth in sober social interactions.",
                    "Identify triggers and high-risk social situations.",
                    "Develop strategies for continuous self-assessment and improvement."
                },
                Lessons = new List<CourseLesson>
                {
                    new CourseLesson { Title = "Lesson 4.1: Setting Social Goals", Type = "Reading", DurationText = "7 min", IsComplete = false, Content = "This lesson delves into the importance of setting clear and achievable social goals in your sober journey. You'll learn how to define what 'fun' and 'social' mean to you without substances, create actionable steps, and develop a roadmap for expanding your sober social circle." },
                    new CourseLesson { Title = "Lesson 4.2: Reflecting on Social Encounters", Type = "Video", DurationText = "18 min", IsComplete = false, VideoUrl = "https://www.youtube.com/embed/0SHJdYREATE?si=F3ap7W_Ct1OjUi10" },
                }
            });
            modules.Add(new CourseModule
            {
                Title = "Module 5: Sustaining Your Sober & Social Life",
                Description = "This module equips you with essential strategies and resources for long-term sobriety, helping you build and maintain a thriving social life free from substance dependence.",
                IsComplete = false,
                LearningObjectives = new List<string> {
                    "Build and maintain a strong sober support network.",
                    "Discover new, enjoyable sober activities and hobbies.",
                    "Plan for long-term sobriety and social well-being."
                },
                Lessons = new List<CourseLesson>
                {
                    new CourseLesson { Title = "Lesson 5.1: Building a Support Network", Type = "Reading", DurationText = "10 min", IsComplete = false, Content = "This lesson will guide you through the process of building and nurturing a strong sober support network. You'll learn how to identify individuals who genuinely support your recovery, communicate your boundaries effectively, and leverage these connections to enhance your social well-being." },
                    new CourseLesson { Title = "Lesson 5.2: Finding Sober Activities & Hobbies", Type = "Video", DurationText = "15 min", IsComplete = false, VideoUrl = "https://www.youtube.com/embed/NajbiHbKaJw?si=2RUEgyP4Nqa09Xv" },
                }
            });
        }
        else // Generic content for other courses
        {
            modules.Add(new CourseModule
            {
                Title = "Module 1: Laying the Foundations for Sober Fun",
                Description = "This module provides the foundational knowledge required for the course.",
                IsComplete = false,
                LearningObjectives = new List<string> {
                    "Define key concepts of sobriety and social well-being.",
                    "Understand the importance of a substance-free lifestyle for social health."
                },
                Lessons = new List<CourseLesson>
                {
                    new CourseLesson { Title = "Introduction to Sober Living", Type = "Video", DurationText = "8 min", IsComplete = false, VideoUrl = "https://www.youtube.com/embed/u7T2r4C173M?si=kLSLR5MbMrJ4dJUZ" },
                    new CourseLesson { Title = "Understanding the Benefits of Sobriety", Type = "Reading", DurationText = "20 min", IsComplete = false, Content = "This core reading delves into the fundamental principles of the subject matter. It's designed to give you a solid understanding of the essential concepts that will be built upon in subsequent modules. Take your time to absorb the information and feel free to revisit sections as needed. A strong foundation here will greatly benefit your learning journey." }
                }
            });
            modules.Add(new CourseModule
            {
                Title = "Module 2: Applying Sober Strategies",
                Description = "Apply the concepts learned in Module 1 to practical scenarios.",
                IsComplete = false,
                LearningObjectives = new List<string> {
                    "Apply practical strategies for navigating social events soberly.",
                    "Evaluate personal progress in maintaining a sober and social life."
                },
                Lessons = new List<CourseLesson>
                {
                   
                    new CourseLesson { Title = "Navigating Social Scenarios", Type = "Video", DurationText = "12 min", IsComplete = false, VideoUrl = "https://www.youtube.com/embed/NO5-tFfuZAA?si=DxhtLKtwx6CxQQxt" }
                }
            });
        }
    }

    private void ToggleModule(CourseModule module)
    {
        module.IsExpanded = !module.IsExpanded;
    }

    private void ToggleLearningObjectives(CourseModule module)
    {
        module.AreObjectivesExpanded = !module.AreObjectivesExpanded;
    }

    // Method to toggle the visibility of lesson content for "Reading" types and video players for "Video" types
    private void ToggleLessonContent(CourseLesson lesson)
    {
        // Only toggle if it's a Reading with content or a Video with a URL
        if ((lesson.Type == "Reading" && !string.IsNullOrEmpty(lesson.Content)) ||
            (lesson.Type == "Video" && !string.IsNullOrEmpty(lesson.VideoUrl)))
        {
            lesson.IsContentExpanded = !lesson.IsContentExpanded;
            StateHasChanged(); // Important to re-render the UI for content visibility changes
        }
    }

    private async Task CompleteCourse()
    {
        if (currentEnrollment == null || string.IsNullOrEmpty(currentLoggedInUserId))
        {
            await ShowCompletionMessage("Error", "You are not enrolled in this course or not logged in.", "alert-danger");
            return;
        }

        if (currentEnrollment.Status == "Completed")
        {
            await ShowCompletionMessage("Info", "This course is already marked as completed.", "alert-info");
            return;
        }

        isCompletingCourse = true;
        completionMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Update the enrollment DTO
            currentEnrollment.Status = "Completed";
            currentEnrollment.CompleteDate = DateOnly.FromDateTime(DateTime.Today);
            Console.WriteLine("Complete Date: " + currentEnrollment.CompleteDate);
            // Call the API to update the enrollment
            await CourseEnrollApiService.UpdateAsync(currentEnrollment);

            // NEW: Mark all modules and lessons as complete in the UI
            foreach (var module in modules)
            {
                module.IsComplete = true;
                // Optionally collapse objectives and modules after completion
                module.AreObjectivesExpanded = false;
                module.IsExpanded = false; // Collapse modules if desired after completion
                foreach (var lesson in module.Lessons)
                {
                    lesson.IsComplete = true;
                    lesson.IsContentExpanded = false; // Collapse reading/video content on course completion
                }
            }

            await ShowCompletionMessage("Success", $"Course '{course?.CourseName}' successfully marked as completed!", "alert-success");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error completing course: {ex.Message}");
            await ShowCompletionMessage("Error", $"Failed to mark course as complete: {ex.Message}", "alert-danger");
        }
        finally
        {
            isCompletingCourse = false;
            StateHasChanged(); // Re-render the UI to reflect completion status
        }
    }

    private async Task ShowCompletionMessage(string title, string message, string cssClass)
    {
        completionMessage = message;
        completionMessageClass = cssClass;
        await JS.InvokeVoidAsync("console.log", $"{title}: {message}");
        StateHasChanged();
        await Task.Delay(5000); // Display message for 5 seconds
        completionMessage = string.Empty;
        StateHasChanged();
    }

    private void GoBackToCourses()
    {
        NavigationManager.NavigateTo("/Course", forceLoad: true);
    }
}
