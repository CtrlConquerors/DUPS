@page "/ConsultantDashboard"
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@inject AppointmentApiService AppointmentApiService
@inject AuthenticationStateProvider AuthProvider

<h3 class="mb-4">🎯 Consultant Dashboard</h3>

@if (isLoading)
{
    <p>Loading data...</p>
}
else
{
    <div class="dashboard-cards-flex mb-5">
        <div class="dashboard-card glass today">
            <div class="dashboard-card-icon"><i class="fas fa-calendar-day"></i></div>
            <div>
                <div class="dashboard-card-title">Today</div>
                <div class="dashboard-card-value">@todayCount</div>
            </div>
        </div>
        <div class="dashboard-card glass upcoming">
            <div class="dashboard-card-icon"><i class="fas fa-calendar-plus"></i></div>
            <div>
                <div class="dashboard-card-title">Upcoming</div>
                <div class="dashboard-card-value">@upcomingCount</div>
            </div>
        </div>
        <div class="dashboard-card glass finished">
            <div class="dashboard-card-icon"><i class="fas fa-check-circle"></i></div>
            <div>
                <div class="dashboard-card-title">Finished</div>
                <div class="dashboard-card-value">@finishedCount</div>
            </div>
        </div>
        <div class="dashboard-card glass missed">
            <div class="dashboard-card-icon"><i class="fas fa-exclamation-circle"></i></div>
            <div>
                <div class="dashboard-card-title">Missed</div>
                <div class="dashboard-card-value">@missedCount</div>
            </div>
        </div>
        <div class="dashboard-card glass cancelled">
            <div class="dashboard-card-icon"><i class="fas fa-times-circle"></i></div>
            <div>
                <div class="dashboard-card-title">Cancelled</div>
                <div class="dashboard-card-value">@canceledCount</div>
            </div>
        </div>
        <div class="dashboard-card glass declined">
            <div class="dashboard-card-icon"><i class="fas fa-ban"></i></div>
            <div>
                <div class="dashboard-card-title">Declined</div>
                <div class="dashboard-card-value">@declinedCount</div>
            </div>
        </div>
        <div class="dashboard-card glass expired">
            <div class="dashboard-card-icon"><i class="fas fa-ban"></i></div>
            <div>
                <div class="dashboard-card-title">Expired</div>
                <div class="dashboard-card-value">@expiredCount</div>
            </div>
        </div>


    </div>

    <h4>📅 Upcoming Appointments</h4>
    @if (!upcomingAppointments.Any())
    {
        <p>No upcoming appointments.</p>
    }
    else
    {
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Member</th>
                    <th>Topic</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var appt in upcomingAppointments)
                {
                    <tr>
                        <td>
                            @{
                                var start = appt.AppointmentDate.ToLocalTime();
                                var end = start.AddMinutes(40);
                            }
                            @start.ToString("dd/MM/yyyy HH:mm") - @end.ToString("HH:mm")
                        </td>
                        <td>@appt.Member?.Username</td>
                        <td>@appt.Topic</td>
                        <td>@appt.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <NavLink class="btn btn-outline-primary mt-3" href="/AppointmentForConsultant">View All Appointments</NavLink>
}

@code {
    private bool isLoading = true;
    private List<AppointmentDTO> allAppointments = new();
    private List<AppointmentDTO> upcomingAppointments = new();

    private int todayCount;
    private int upcomingCount;
    private int finishedCount;
    private int canceledCount;
    private int declinedCount;
    private int missedCount;
    private int expiredCount;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(userId))
        {
            allAppointments = await AppointmentApiService.GetAppointmentsForConsultantAsync(userId);

            var todayLocal = DateTime.Now.Date;
            var tomorrowLocal = todayLocal.AddDays(1);

            todayCount = allAppointments.Count(a =>
            {
                var localTime = a.AppointmentDate.ToLocalTime();
                Console.WriteLine($"[CHECK] Appt Local: {localTime}");
                return localTime >= todayLocal
                    && localTime < tomorrowLocal
                    && (a.Status == "Accepted" || a.Status == "Pending");
            });

            var nowUtc = DateTime.UtcNow;
            upcomingAppointments = allAppointments
                .Where(a => a.AppointmentDate > nowUtc && (a.Status == "Accepted" || a.Status == "Pending"))
                .OrderBy(a => a.AppointmentDate)
                .Take(5)
                .ToList();

            upcomingCount = upcomingAppointments.Count;
            finishedCount = allAppointments.Count(a => a.Status == "Finished");
            canceledCount = allAppointments.Count(a => a.Status == "Cancel");
            declinedCount = allAppointments.Count(a => a.Status == "Declined");
            missedCount = allAppointments.Count(a => a.Status == "Missed");
            missedCount = allAppointments.Count(a => a.Status == "Expired");
        }

        isLoading = false;
    }

}
