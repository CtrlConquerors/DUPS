@page "/Management/Campaign"
@using DUPSS.API.Models.DTOs;
@using DUPSS.API.Models.Objects; @* Added for Campaign model if needed for CreateAsync in DAO, though DTOs are preferred for UI *@
@using DUPSS.Web.Components.Layout
@using DUPSS.Web.Components.Service
@inject CampaignApiService CampaignApiService
@inject UserApiService UserApiService
@inject RoleApiService RoleApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IWebHostEnvironment WebHostEnvironment
@layout ManagementLayout

<div class="campaign-management-container">
    <div class="header-section">
        <h1 class="page-title">Campaign Management</h1>
        <div class="actions">
            <button class="add-campaign-button" @onclick="AddCampaign">
                <i class="bi bi-plus-circle"></i> ADD CAMPAIGN
            </button>
        </div>
    </div>

    <div class="filter-sort-section">
        <div class="search-input-container">
            <input type="text" class="form-control" placeholder="Search by ID, Title, Description, Staff"
                   @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterAndSortCampaigns"/>
        </div>

        <div class="filter-dropdown-container">
            <select class="form-select" @onchange="OnStaffFilterChanged">
                <option value="">All Staff</option>
                @if (staffUsers != null)
                {
                    @foreach (var staff in staffUsers)
                    {
                        <option value="@staff.UserId">@staff.Username</option>
                    }
                }
            </select>
        </div>

        <div class="filter-dropdown-container">
            <select class="form-select" @onchange="OnStatusFilterChanged">
                <option value="">All Statuses</option>
                <option value="Active">Active</option>
                <option value="Planned">Planned</option>
                <option value="Completed">Completed</option>
            </select>
        </div>

        <div class="sort-controls">
            <select class="form-select" @bind="sortBy" @bind:after="FilterAndSortCampaigns">
                <option value="CampaignId">Sort by Campaign ID</option>
                <option value="Title">Sort by Title</option>
                <option value="StartDate">Sort by Start Date</option>
                <option value="EndDate">Sort by End Date</option>
                <option value="Duration">Sort by Duration</option>
                <option value="Status">Sort by Status</option>
                <option value="StaffName">Sort by Staff Name</option>
            </select>
            <button class="btn btn-outline-primary sort-direction-button" @onclick="ToggleSortDirection">
                @if (sortDirection == SortDirection.Ascending)
                {
                    <i class="bi bi-sort-alpha-down"></i>
                }
                else
                {
                    <i class="bi bi-sort-alpha-down-alt"></i>
                }
            </button>

            <a href="https://docs.google.com/forms/d/1B5D9HmpeqaLFPhCVAKgrESUhrUndYZvL2Jpq0fzr7Uc/edit" class="btn">Edit Survey before campaign</a>
            <a href="https://docs.google.com/forms/d/1yuuH_Z6OvJK-fOdL7vJH_wf3bkwG7lTT_-qvgWTN0No/edit" class="btn">Edit Survey after campaign</a>
            <a href="https://docs.google.com/spreadsheets/d/1OuSVpHf3uKSlDQ_5URN_AEE45YRXw6vKPVbLXcEZFiI/edit?resourcekey=&gid=996327744#gid=996327744" class="btn">Answer Report</a>
        </div>
    </div>

    @if (campaigns == null || staffUsers == null || roles == null)
    {
        <div class="loading-indicator">Loading campaigns and related data...</div>
    }
    else if (hasError)
    {
        <div class="error-message">Error loading data. Please try again later.</div>
    }
    else if (!filteredCampaigns.Any())
    {
        <div class="no-data-message">No campaigns found matching your criteria.</div>
    }
    else
    {
        <div class="table-container">
            <table class="campaign-table">
                <thead>
                <tr>
                    <th>No</th>
                    <th>Campaign ID</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Duration</th>
                    <th>Status</th>
                    <th>Location</th>
                    <th>Introduction</th>
                    <th>Staff Name</th>
                    <th>Image</th> @* NEW: Image Column Header *@
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>
                @{
                    var index = (currentPage - 1) * itemsPerPage + 1;
                }
                @foreach (var campaign in PaginatedCampaigns)
                {
                    <tr>
                        <td>@index</td>
                        <td>@campaign.CampaignId</td>
                        <td>@campaign.Title</td>
                        <td>@campaign.Description</td>
                        <td>@campaign.StartDate.ToString("yyyy-MM-dd")</td>
                        <td>@campaign.EndDate?.ToString("yyyy-MM-dd")</td>
                        <td>@(campaign.Duration.HasValue ? $"{campaign.Duration.Value.Days} days" : "-")</td>
                        <td>
                            <span class="status-badge @GetStatusClass(campaign.Status)">
                                @campaign.Status
                            </span>
                        </td>
                        <td>@campaign.Location</td>
                        <td>@(campaign.Introduction?.Length > 100 ? campaign.Introduction.Substring(0, 100) + "..." : campaign.Introduction)</td>
                        <td>@campaign.Staff?.Username</td>
                        <td> @* NEW: Image Column Cell *@
                            @if (!string.IsNullOrEmpty(campaign.ImageUrl))
                            {
                                <img src="@campaign.ImageUrl" alt="Campaign Image" class="table-campaign-image" />
                            }
                            else
                            {
                                <span class="no-image-available">N/A</span>
                            }
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-sm btn-primary me-2"
                                        @onclick="() => EditCampaign(campaign.CampaignId)">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <button class="btn btn-sm btn-danger"
                                        @onclick="() => DeleteCampaign(campaign.CampaignId)">
                                    <i class="bi bi-trash3-fill"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                    index++;
                }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-center mt-3">
            @for (var i = 1; i <= TotalPages; i++)
            {
                var pageIndex = i;
                <button class="btn btn-outline-primary mx-1 @(pageIndex == currentPage ? "active" : "")"
                        @onclick="() => GoToPage(pageIndex)">
                    @pageIndex
                </button>
            }
        </div>
    }

    @if (showEditForm)
    {
        <div class="card p-3 my-4 edit-form-card">
            <h5>@(isNewCampaign ? "Add New Campaign" : "Edit Campaign: " + campaignToEdit.Title)</h5>

            @if (!string.IsNullOrEmpty(validationMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @validationMessage
                </div>
            }

            <div class="mb-3">
                <label class="form-label">Title</label>
                <input class="form-control" @bind="campaignToEdit.Title"/>
            </div>

            <div class="mb-3">
                <label class="form-label">Description</label>
                <textarea class="form-control" @bind="campaignToEdit.Description" rows="3"></textarea>
            </div>

            <div class="mb-3">
                <label class="form-label">Start Date</label>
                <input type="date" class="form-control" @bind="campaignToEdit.StartDate"/>
            </div>

            <div class="mb-3">
                <label class="form-label">End Date</label>
                <input type="date" class="form-control" @bind="campaignToEdit.EndDate"/>
            </div>

            <div class="mb-3">
                <label class="form-label">Status</label>
                <select class="form-select" @bind="campaignToEdit.Status">
                    <option value="">Select Status</option>
                    <option value="Active">Active</option>
                    <option value="Planned">Planned</option>
                    <option value="Completed">Completed</option>
                </select>
            </div>

            <div class="mb-3">
                <label class="form-label">Location</label>
                <input class="form-control" @bind="campaignToEdit.Location" />
            </div>

            <div class="mb-3">
                <label class="form-label">Introduction</label>
                <textarea class="form-control" @bind="campaignToEdit.Introduction" rows="3"></textarea>
            </div>

            <div class="mb-3">
                <label class="form-label">Staff</label>
                <select class="form-select" @bind="campaignToEdit.StaffId">
                    <option value="">Select Staff</option>
                    @if (staffUsers != null)
                    {
                        @foreach (var staff in staffUsers)
                        {
                            <option value="@staff.UserId">@staff.Username</option>
                        }
                    }
                </select>
            </div>

            @* NEW: Image Upload Section *@
            <div class="mb-3">
                <label class="form-label">Campaign Image</label>
                <InputFile OnChange="HandleFileSelection" accept="image/*" class="form-control" />
                @if (!string.IsNullOrEmpty(imagePreviewUrl))
                {
                    <div class="image-preview mt-2">
                        <img src="@imagePreviewUrl" alt="Image Preview" class="img-thumbnail" />
                    </div>
                }
                else if (!string.IsNullOrEmpty(campaignToEdit.ImageUrl))
                {
                    <div class="image-preview mt-2">
                        <img src="@campaignToEdit.ImageUrl" alt="Current Image" class="img-thumbnail" />
                    </div>
                }
                else
                {
                    <div class="no-image-placeholder mt-2">No Image Selected</div>
                }
            </div>

            <div>
                <button class="btn btn-success me-2" @onclick="SaveCampaign">Save</button>
                <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </div>
        </div>
    }
</div>


@code {
    private List<CampaignDTO>? campaigns;
    private List<CampaignDTO> filteredCampaigns = new List<CampaignDTO>();
    private List<UserDTO>? staffUsers;
    private List<RoleDTO>? roles;
    private bool hasError = false;
    private int currentPage = 1;
    private int itemsPerPage = 8;
    private string validationMessage = string.Empty;

    // Search, Sort, Filter state
    private string searchTerm = string.Empty;
    private string selectedStaffId = string.Empty;
    private string selectedStatus = string.Empty;
    private string sortBy = "CampaignId";
    private SortDirection sortDirection = SortDirection.Ascending;

    private enum SortDirection { Ascending, Descending }

    // For Add/Edit Form
    private CampaignDTO campaignToEdit = new CampaignDTO
    {
        CampaignId = "",
        Title = "",
        Description = null,
        StartDate = DateOnly.FromDateTime(DateTime.Today),
        EndDate = null,
        Status = "",
        Location = "",
        Introduction = "",
        StaffId = "",
        ImageUrl = "" // Initialize ImageUrl
    };
    private bool showEditForm = false;
    private bool isNewCampaign = false;

    // NEW: Image Upload Properties
    private IBrowserFile? selectedImageFile;
    private string? imagePreviewUrl;

    private IEnumerable<CampaignDTO> PaginatedCampaigns =>
        filteredCampaigns?
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage) ?? Enumerable.Empty<CampaignDTO>();

    private int TotalPages => (int)Math.Ceiling((filteredCampaigns?.Count ?? 0) / (double)itemsPerPage);

    private void GoToPage(int page)
    {
        if (page < 1) page = 1;
        if (page > TotalPages) page = TotalPages;

        if (currentPage != page)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("CampaignManagement: OnInitializedAsync: Starting data load.");

            // Check if this is the initial load without the cache-busting parameter
            var currentUri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            if (!currentUri.Query.Contains("t="))
            {
                Console.WriteLine("CampaignManagement: OnInitializedAsync: Initial load without cache-busting parameter. Forcing hard reload.");
                PerformHardReload();
                return; // Exit to prevent further initialization on this "old" load
            }

            await LoadAllDataAsync();
            FilterAndSortCampaigns();
            hasError = false;
            Console.WriteLine("CampaignManagement: OnInitializedAsync: Data load complete and filtered.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"CampaignManagement: OnInitializedAsync: Error fetching data: {ex.Message}");
            campaigns = new List<CampaignDTO>();
            filteredCampaigns = new List<CampaignDTO>();
            roles = new List<RoleDTO>();
            staffUsers = new List<UserDTO>();
            hasError = true;
        }
        finally
        {
            campaigns ??= new List<CampaignDTO>();
            roles ??= new List<RoleDTO>();
            staffUsers ??= new List<UserDTO>();
            filteredCampaigns = new List<CampaignDTO>(); // Ensure initialized
            FilterAndSortCampaigns(); // Always call to set initial filtered list
        }
    }

    // Consolidated data loading method
    private async Task LoadAllDataAsync()
    {
        Console.WriteLine("CampaignManagement: LoadAllDataAsync: Fetching campaigns...");
        campaigns = await CampaignApiService.GetAllAsync();
        Console.WriteLine($"CampaignManagement: LoadAllDataAsync: Fetched {campaigns?.Count ?? 0} campaigns.");

        // After fetching campaigns, try to find their corresponding images in wwwroot/images
        if (campaigns != null && campaigns.Any())
        {
            var wwwrootPath = WebHostEnvironment.WebRootPath;
            var imagesPath = Path.Combine(wwwrootPath, "images");
            var supportedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };
            Console.WriteLine($"CampaignManagement: LoadAllDataAsync: wwwrootPath: {wwwrootPath}");
            Console.WriteLine($"CampaignManagement: LoadAllDataAsync: imagesPath: {imagesPath}");

            foreach (var campaign in campaigns)
            {
                if (!string.IsNullOrEmpty(campaign.CampaignId))
                {
                    bool imageFound = false;
                    foreach (var ext in supportedExtensions)
                    {
                        var potentialFileName = $"{campaign.CampaignId}{ext}";
                        var fullPath = Path.Combine(imagesPath, potentialFileName);

                        if (System.IO.File.Exists(fullPath))
                        {
                            campaign.ImageUrl = $"images/{potentialFileName}";
                            Console.WriteLine($"CampaignManagement: LoadAllDataAsync: Found image for CampaignId {campaign.CampaignId}: {campaign.ImageUrl}");
                            imageFound = true;
                            break;
                        }
                    }
                    if (!imageFound)
                    {
                        Console.WriteLine($"CampaignManagement: LoadAllDataAsync: No image found for CampaignId {campaign.CampaignId} in {imagesPath}");
                    }
                }

                // Also calculate duration during load for all campaigns
                if (campaign.EndDate.HasValue)
                {
                    campaign.Duration = campaign.EndDate.Value.ToDateTime(TimeOnly.MinValue) - campaign.StartDate.ToDateTime(TimeOnly.MinValue);
                }
            }
        }

        Console.WriteLine("CampaignManagement: LoadAllDataAsync: Fetching roles and users...");
        roles = await RoleApiService.GetAllAsync();
        var allUsers = await UserApiService.GetAllAsync();

        var staffRoleIds = roles?.Where(r => r.RoleId.StartsWith("ST", StringComparison.OrdinalIgnoreCase)).Select(r => r.RoleId).ToList();
        staffUsers = allUsers?.Where(u => staffRoleIds != null && staffRoleIds.Contains(u.RoleId)).ToList();
        Console.WriteLine("CampaignManagement: LoadAllDataAsync: Roles and users loaded.");
    }


    private void FilterAndSortCampaigns()
    {
        Console.WriteLine("CampaignManagement: FilterAndSortCampaigns: Applying filters and sort...");
        if (campaigns == null)
        {
            filteredCampaigns = new List<CampaignDTO>();
            Console.WriteLine("CampaignManagement: FilterAndSortCampaigns: Campaigns list is null, setting filteredCampaigns to empty.");
            return;
        }

        IEnumerable<CampaignDTO> query = campaigns;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var lowerSearchTerm = searchTerm.ToLower();
            query = query.Where(c =>
                (c.CampaignId?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.Title?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.Description?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.Staff?.Username?.ToLower().Contains(lowerSearchTerm) ?? false)
            );
            Console.WriteLine($"CampaignManagement: FilterAndSortCampaigns: Applied search term: '{searchTerm}'");
        }

        if (!string.IsNullOrWhiteSpace(selectedStaffId))
        {
            query = query.Where(c => c.StaffId == selectedStaffId);
            Console.WriteLine($"CampaignManagement: FilterAndSortCampaigns: Applied staff filter: '{selectedStaffId}'");
        }

        if (!string.IsNullOrWhiteSpace(selectedStatus))
        {
            query = query.Where(c => c.Status == selectedStatus);
            Console.WriteLine($"CampaignManagement: FilterAndSortCampaigns: Applied status filter: '{selectedStatus}'");
        }

        switch (sortBy)
        {
            case "CampaignId":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.CampaignId) :
                    query.OrderByDescending(c => c.CampaignId);
                break;
            case "Title":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.Title, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(c => c.Title, StringComparer.OrdinalIgnoreCase);
                break;
            case "StartDate":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.StartDate) :
                    query.OrderByDescending(c => c.StartDate);
                break;
            case "EndDate":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.EndDate) :
                    query.OrderByDescending(c => c.EndDate);
                break;
            case "Duration":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.Duration) :
                    query.OrderByDescending(c => c.Duration);
                break;
            case "Status":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.Status, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(c => c.Status, StringComparer.OrdinalIgnoreCase);
                break;
            case "StaffName":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.Staff?.Username, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(c => c.Staff?.Username, StringComparer.OrdinalIgnoreCase);
                break;
            default:
                query = query.OrderBy(c => c.CampaignId);
                break;
        }

        filteredCampaigns = query.ToList();
        currentPage = 1;
        Console.WriteLine($"CampaignManagement: FilterAndSortCampaigns: Filtered and sorted, {filteredCampaigns.Count} campaigns remaining. Reset to page 1.");
    }

    private void OnStaffFilterChanged(ChangeEventArgs e)
    {
        selectedStaffId = e.Value?.ToString() ?? string.Empty;
        Console.WriteLine($"CampaignManagement: OnStaffFilterChanged: New staff filter: {selectedStaffId}");
        FilterAndSortCampaigns();
    }

    private void OnStatusFilterChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value?.ToString() ?? string.Empty;
        Console.WriteLine($"CampaignManagement: OnStatusFilterChanged: New status filter: {selectedStatus}");
        FilterAndSortCampaigns();
    }

    private void ToggleSortDirection()
    {
        sortDirection = sortDirection == SortDirection.Ascending ? SortDirection.Descending : SortDirection.Ascending;
        Console.WriteLine($"CampaignManagement: ToggleSortDirection: New sort direction: {sortDirection}");
        FilterAndSortCampaigns();
    }

    // Helper method to generate the next sequential CampaignId
    private string GenerateNextCampaignId()
    {
        var maxIdNum = 0;
        if (campaigns != null && campaigns.Any())
        {
            maxIdNum = campaigns
                .Select(c => {
                    if (c.CampaignId != null && c.CampaignId.StartsWith("CAM", StringComparison.OrdinalIgnoreCase) &&
                        c.CampaignId.Length == 7 && // "CAM" (3 chars) + 4 digits = 7 chars
                        int.TryParse(c.CampaignId.Substring(3), out var num))
                    {
                        return num;
                    }
                    return 0;
                })
                .DefaultIfEmpty(0)
                .Max();
        }
        return $"CAM{(maxIdNum + 1):D4}";
    }

    private void AddCampaign()
    {
        Console.WriteLine("CampaignManagement: AddCampaign: Initializing for new campaign creation.");
        validationMessage = string.Empty;
        selectedImageFile = null; // Clear selected image
        imagePreviewUrl = null; // Clear image preview

        campaignToEdit = new CampaignDTO
        {
            CampaignId = GenerateNextCampaignId(),
            Title = "",
            Description = null,
            StartDate = DateOnly.FromDateTime(DateTime.Today),
            EndDate = null,
            Status = "",
            Location = "",
            Introduction = "",
            StaffId = "",
            ImageUrl = "" // Ensure ImageUrl is reset
        };
        isNewCampaign = true;
        showEditForm = true;
        Console.WriteLine($"CampaignManagement: AddCampaign: New campaign ID set to {campaignToEdit.CampaignId}. Showing edit form.");
    }

    private void EditCampaign(string campaignId)
    {
        Console.WriteLine($"CampaignManagement: EditCampaign: Attempting to edit campaign with ID: {campaignId}");
        validationMessage = string.Empty;
        selectedImageFile = null; // Clear selected image
        imagePreviewUrl = null; // Clear image preview

        var campaign = campaigns?.FirstOrDefault(c => c.CampaignId == campaignId);
        if (campaign != null)
        {
            campaignToEdit = new CampaignDTO
            {
                CampaignId = campaign.CampaignId,
                Title = campaign.Title,
                Description = campaign.Description,
                StartDate = campaign.StartDate,
                EndDate = campaign.EndDate,
                Status = campaign.Status,
                StaffId = campaign.StaffId,
                Location = campaign.Location,
                Introduction = campaign.Introduction,
                Staff = campaign.Staff,
                ImageUrl = campaign.ImageUrl // Load existing image URL
            };
            isNewCampaign = false;
            showEditForm = true;
            Console.WriteLine($"CampaignManagement: EditCampaign: Campaign '{campaign.Title}' loaded for editing. Current ImageUrl: {campaignToEdit.ImageUrl}");
        }
        else
        {
            Console.WriteLine($"CampaignManagement: EditCampaign: Campaign with ID {campaignId} not found.");
        }
    }

    // NEW: Handle file selection for image upload
    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        Console.WriteLine("CampaignManagement: HandleFileSelection: File selection initiated.");
        validationMessage = string.Empty;
        selectedImageFile = e.File;

        if (selectedImageFile != null)
        {
            Console.WriteLine($"CampaignManagement: HandleFileSelection: Selected file: {selectedImageFile.Name}, Type: {selectedImageFile.ContentType}, Size: {selectedImageFile.Size} bytes.");
            // Limit file size (e.g., 5MB)
            if (selectedImageFile.Size > 5 * 1024 * 1024)
            {
                validationMessage = "File size too large. Maximum 5MB allowed.";
                selectedImageFile = null;
                imagePreviewUrl = null;
                Console.WriteLine("CampaignManagement: HandleFileSelection: File size exceeded 5MB. Clearing selection and preview.");
                StateHasChanged();
                return;
            }

            try
            {
                // Generate a temporary URL for preview
                var imageBytes = new byte[selectedImageFile.Size];
                await selectedImageFile.OpenReadStream().ReadAsync(imageBytes);
                imagePreviewUrl = $"data:{selectedImageFile.ContentType};base64,{Convert.ToBase64String(imageBytes)}";
                Console.WriteLine("CampaignManagement: HandleFileSelection: Image preview URL generated successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"CampaignManagement: HandleFileSelection: Error generating image preview: {ex.Message}");
                validationMessage = $"Error generating image preview: {ex.Message}";
                imagePreviewUrl = null;
            }
            StateHasChanged();
        }
        else
        {
            imagePreviewUrl = null;
            Console.WriteLine("CampaignManagement: HandleFileSelection: No file selected or selection cleared.");
            StateHasChanged();
        }
    }

    private async Task SaveCampaign()
    {
        Console.WriteLine("CampaignManagement: SaveCampaign: Starting save process.");
        // Validation checks
        if (string.IsNullOrWhiteSpace(campaignToEdit.Title))
        {
            validationMessage = "Title cannot be empty.";
            Console.WriteLine("CampaignManagement: SaveCampaign: Validation failed - Title empty.");
            return;
        }

        if (campaignToEdit.StartDate == default)
        {
            validationMessage = "Please select a Start Date.";
            Console.WriteLine("CampaignManagement: SaveCampaign: Validation failed - Start Date empty.");
            return;
        }

        if (!campaignToEdit.EndDate.HasValue)
        {
            validationMessage = "Please select an End Date.";
            Console.WriteLine("CampaignManagement: SaveCampaign: Validation failed - End Date empty.");
            return;
        }

        if (campaignToEdit.StartDate >= campaignToEdit.EndDate.Value)
        {
            validationMessage = "Start Date cannot be on or after End Date.";
            Console.WriteLine("CampaignManagement: SaveCampaign: Validation failed - Start Date on or after End Date.");
            return;
        }

        if (string.IsNullOrWhiteSpace(campaignToEdit.Status))
        {
            validationMessage = "Please select a Status.";
            Console.WriteLine("CampaignManagement: SaveCampaign: Validation failed - Status empty.");
            return;
        }
        if (string.IsNullOrWhiteSpace(campaignToEdit.Location))
        {
            validationMessage = "Please select a Location.";
            Console.WriteLine("CampaignManagement: SaveCampaign: Validation failed - Location empty.");
            return;
        }
        if (string.IsNullOrWhiteSpace(campaignToEdit.Introduction))
        {
            validationMessage = "Please write Introduction.";
            Console.WriteLine("CampaignManagement: SaveCampaign: Validation failed - Introduction empty.");
            return;
        }
        if (string.IsNullOrWhiteSpace(campaignToEdit.StaffId))
        {
            validationMessage = "Please select a Staff.";
            Console.WriteLine("CampaignManagement: SaveCampaign: Validation failed - Staff not selected.");
            return;
        }

        validationMessage = string.Empty;
        Console.WriteLine("CampaignManagement: SaveCampaign: All validations passed.");

        try
        {
            // Handle image upload before saving campaign data
            if (selectedImageFile != null)
            {
                Console.WriteLine("CampaignManagement: SaveCampaign: Image file selected. Starting image upload process.");
                var wwwrootPath = WebHostEnvironment.WebRootPath;
                var imagesPath = Path.Combine(wwwrootPath, "images");
                Console.WriteLine($"CampaignManagement: SaveCampaign: wwwrootPath: {wwwrootPath}");
                Console.WriteLine($"CampaignManagement: SaveCampaign: imagesPath: {imagesPath}");

                if (!Directory.Exists(imagesPath))
                {
                    Directory.CreateDirectory(imagesPath);
                    Console.WriteLine($"CampaignManagement: SaveCampaign: Created images directory at: {imagesPath}");
                }
                else
                {
                    Console.WriteLine($"CampaignManagement: SaveCampaign: Images directory already exists at: {imagesPath}");
                }

                var fileExtension = Path.GetExtension(selectedImageFile.Name);
                var newFileName = $"{campaignToEdit.CampaignId}{fileExtension}";
                var filePath = Path.Combine(imagesPath, newFileName);
                Console.WriteLine($"CampaignManagement: SaveCampaign: New image filename: {newFileName}");
                Console.WriteLine($"CampaignManagement: SaveCampaign: Full target file path: {filePath}");

                // Delete existing image with any extension if it exists for this CampaignId
                Console.WriteLine($"CampaignManagement: SaveCampaign: Checking for existing image for CampaignId {campaignToEdit.CampaignId} to delete...");
                foreach (var ext in new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" })
                {
                    var existingFilePath = Path.Combine(imagesPath, $"{campaignToEdit.CampaignId}{ext}");
                    if (System.IO.File.Exists(existingFilePath))
                    {
                        System.IO.File.Delete(existingFilePath);
                        Console.WriteLine($"CampaignManagement: SaveCampaign: Deleted existing image file: {existingFilePath}");
                    }
                }
                Console.WriteLine("CampaignManagement: SaveCampaign: Finished checking and deleting old images.");

                // Save the new file
                Console.WriteLine($"CampaignManagement: SaveCampaign: Attempting to save new image to: {filePath}");
                try
                {
                    await using FileStream fs = new(filePath, FileMode.Create);
                    await selectedImageFile.OpenReadStream().CopyToAsync(fs);
                    Console.WriteLine($"CampaignManagement: SaveCampaign: Image successfully saved to: {filePath}");
                }
                catch (Exception fileEx)
                {
                    Console.WriteLine($"CampaignManagement: SaveCampaign: ERROR during file stream copy: {fileEx.Message}");
                    validationMessage = $"Error saving image file: {fileEx.Message}";
                    return; // Stop the save process if image saving fails
                }

                // Update the ImageUrl in the DTO with the relative path for display
                campaignToEdit.ImageUrl = $"images/{newFileName}";
                Console.WriteLine($"CampaignManagement: SaveCampaign: campaignToEdit.ImageUrl set to: {campaignToEdit.ImageUrl}");
            }
            else if (isNewCampaign)
            {
                // If it's a new campaign and no image is selected, ensure ImageUrl is empty/null
                campaignToEdit.ImageUrl = "";
                Console.WriteLine("CampaignManagement: SaveCampaign: No image selected for new campaign. ImageUrl set to empty.");
            }
            else
            {
                // If it's an existing campaign and no new image is selected, keep the existing ImageUrl
                Console.WriteLine("CampaignManagement: SaveCampaign: No new image selected for existing campaign. Keeping existing ImageUrl.");
            }

            if (isNewCampaign)
            {
                Console.WriteLine($"CampaignManagement: SaveCampaign: Creating new campaign '{campaignToEdit.Title}' via API...");
                await CampaignApiService.CreateAsync(campaignToEdit);
                Console.WriteLine($"CampaignManagement: Campaign '{campaignToEdit.Title}' created with ID: {campaignToEdit.CampaignId}");
            }
            else
            {
                Console.WriteLine($"CampaignManagement: SaveCampaign: Updating existing campaign '{campaignToEdit.Title}' via API...");
                await CampaignApiService.UpdateAsync(campaignToEdit);
                Console.WriteLine($"CampaignManagement: Campaign '{campaignToEdit.Title}' updated.");
            }

            // Refresh data and reset form
            Console.WriteLine("CampaignManagement: SaveCampaign: Reloading all data after save...");
            await LoadAllDataAsync();
            FilterAndSortCampaigns();
            showEditForm = false;
            GoToPage(1);
            selectedImageFile = null; // Clear selected file
            imagePreviewUrl = null; // Clear preview
            Console.WriteLine("CampaignManagement: SaveCampaign: Save process complete. Form reset.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"CampaignManagement: SaveCampaign: CRITICAL ERROR during save process: {ex.Message}");
            validationMessage = $"Error saving campaign: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        Console.WriteLine("CampaignManagement: CancelEdit: Cancelling edit/add operation.");
        validationMessage = string.Empty;
        selectedImageFile = null; // Clear selected image
        imagePreviewUrl = null; // Clear image preview
        campaignToEdit = new CampaignDTO
        {
            CampaignId = "",
            Title = "",
            Description = null,
            StartDate = DateOnly.FromDateTime(DateTime.Today),
            EndDate = null,
            Location = "",
            Introduction = "",
            Status = "",
            StaffId = "",
            ImageUrl = "" // Ensure ImageUrl is reset
        };
        isNewCampaign = false;
        showEditForm = false;
        Console.WriteLine("CampaignManagement: CancelEdit: Form reset and hidden.");
    }

    private async Task DeleteCampaign(string campaignId)
    {
        Console.WriteLine($"CampaignManagement: DeleteCampaign: Attempting to delete campaign with ID: {campaignId}");
        var campaignToDelete = campaigns?.FirstOrDefault(c => c.CampaignId == campaignId);
        if (campaignToDelete == null)
        {
            Console.WriteLine($"CampaignManagement: DeleteCampaign: Campaign with ID {campaignId} not found for deletion.");
            return;
        }

        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete campaign '{campaignToDelete.Title}' (ID: {campaignId})?");
        if (confirmed)
        {
            try
            {
                Console.WriteLine($"CampaignManagement: DeleteCampaign: User confirmed deletion of campaign '{campaignToDelete.Title}'. Calling API...");
                var success = await CampaignApiService.DeleteAsync(campaignId);
                if (success)
                {
                    Console.WriteLine($"CampaignManagement: Campaign '{campaignToDelete.Title}' (ID: {campaignId}) deleted successfully.");
                    // Delete the associated image file from wwwroot/images
                    var wwwrootPath = WebHostEnvironment.WebRootPath;
                    var imagesPath = Path.Combine(wwwrootPath, "images");
                    var supportedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };
                    Console.WriteLine($"CampaignManagement: DeleteCampaign: Checking for associated image file for CampaignId {campaignId} in {imagesPath}...");

                    foreach (var ext in supportedExtensions)
                    {
                        var potentialFilePath = Path.Combine(imagesPath, $"{campaignId}{ext}");
                        if (System.IO.File.Exists(potentialFilePath))
                        {
                            System.IO.File.Delete(potentialFilePath);
                            Console.WriteLine($"CampaignManagement: DeleteCampaign: Deleted image file: {potentialFilePath}");
                            break;
                        }
                    }
                    Console.WriteLine("CampaignManagement: DeleteCampaign: Finished checking and deleting associated image.");

                    // Refresh data after successful deletion
                    Console.WriteLine("CampaignManagement: DeleteCampaign: Reloading all data after deletion...");
                    await LoadAllDataAsync();
                    FilterAndSortCampaigns();
                    GoToPage(1);
                    Console.WriteLine("CampaignManagement: DeleteCampaign: Deletion process complete.");
                }
                else
                {
                    Console.WriteLine($"CampaignManagement: Failed to delete campaign '{campaignToDelete.Title}'.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"CampaignManagement: DeleteCampaign: Error deleting campaign: {ex.Message}");
            }
        }
    }

    // Helper to get CSS class for campaign status
    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Active" => "status-active",
            "Completed" => "status-completed",
            "Planned" => "status-planned",
            _ => ""
        };
    }

    // NEW: Method to force a hard reload of the current page
    private void PerformHardReload()
    {
        // Get the current URI without any existing query parameters
        var currentUri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        // Append a unique timestamp to bust the cache
        var newUri = $"{currentUri.GetLeftPart(UriPartial.Path)}?t={DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()}";
        Console.WriteLine($"CampaignManagement: PerformHardReload: Forcing hard reload to: {newUri}");
        NavigationManager.NavigateTo(newUri, forceLoad: true);
    }
}
