@page "/Management/Campaign"
@using DUPSS.API.Models.DTOs; @* Sử dụng DTOs thay vì Objects *@
@using DUPSS.Web.Components.Service
@inject CampaignApiService CampaignApiService
@inject UserApiService UserApiService
@inject RoleApiService RoleApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="campaign-management-container">
    <div class="header-section">
        <h1 class="page-title">Campaign Management</h1>
        <div class="actions">
            <button class="add-campaign-button" @onclick="AddCampaign">
                <i class="bi bi-plus-circle"></i> ADD CAMPAIGN
            </button>
        </div>
    </div>

    <div class="filter-sort-section">
        <div class="search-input-container">
            <input type="text" class="form-control" placeholder="Search by ID, Title, Description, Staff"
                   @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterAndSortCampaigns"/>
        </div>

        <div class="filter-dropdown-container">
            <select class="form-select" @onchange="OnStaffFilterChanged">
                <option value="">All Staff</option>
                @if (staffUsers != null)
                {
                    @foreach (var staff in staffUsers)
                    {
                        <option value="@staff.UserId">@staff.Username</option>
                    }
                }
            </select>
        </div>

        <div class="filter-dropdown-container">
            <select class="form-select" @onchange="OnStatusFilterChanged">
                <option value="">All Statuses</option>
                <option value="Active">Active</option>
                <option value="Planned">Planned</option>
                <option value="Completed">Completed</option>
            </select>
        </div>

        <div class="sort-controls">
            <select class="form-select" @bind="sortBy" @bind:after="FilterAndSortCampaigns">
                <option value="CampaignId">Sort by Campaign ID</option>
                <option value="Title">Sort by Title</option>
                <option value="StartDate">Sort by Start Date</option>
                <option value="EndDate">Sort by End Date</option>
                <option value="Duration">Sort by Duration</option> @* ADDED: Sort by Duration option *@
                <option value="Status">Sort by Status</option>
                <option value="StaffName">Sort by Staff Name</option>
            </select>
            <button class="btn btn-outline-primary sort-direction-button" @onclick="ToggleSortDirection">
                @if (sortDirection == SortDirection.Ascending)
                {
                    <i class="bi bi-sort-alpha-down"></i>
                }
                else
                {
                    <i class="bi bi-sort-alpha-down-alt"></i>
                }
            </button>

            <a href="https://docs.google.com/forms/d/1B5D9HmpeqaLFPhCVAKgrESUhrUndYZvL2Jpq0fzr7Uc/edit" class="btn">Edit Survey before campaign</a>
            <a href="https://docs.google.com/forms/d/1yuuH_Z6OvJK-fOdL7vJH_wf3bkwG7lTT_-qvgWTN0No/edit" class="btn">Edit Survey after campaign</a>
            <a href="https://docs.google.com/spreadsheets/d/1OuSVpHf3uKSlDQ_5URN_AEE45YRXw6vKPVbLXcEZFiI/edit?resourcekey=&gid=996327744#gid=996327744" class="btn">Answer Report</a>
        </div>
    </div>

    @if (campaigns == null || staffUsers == null || roles == null)
    {
        <div class="loading-indicator">Loading campaigns and related data...</div>
    }
    else if (hasError)
    {
        <div class="error-message">Error loading data. Please try again later.</div>
    }
    else if (!filteredCampaigns.Any())
    {
        <div class="no-data-message">No campaigns found matching your criteria.</div>
    }
    else
    {
        <div class="table-container">
            <table class="campaign-table">
                <thead>
                <tr>
                    <th>No</th>
                    <th>Campaign ID</th>
                    <th>Title</th>
                    <th>Description</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Duration</th> @* NEW: Duration Column Header *@
                    <th>Status</th>
                    <th>Location</th>
                    <th>Introduction</th>
                    <th>Staff Name</th>
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>
                @{
                    var index = (currentPage - 1) * itemsPerPage + 1;
                }
                @foreach (var campaign in PaginatedCampaigns)
                {
                    <tr>
                        <td>@index</td>
                        <td>@campaign.CampaignId</td>
                        <td>@campaign.Title</td>
                        <td>@campaign.Description</td>
                        <td>@campaign.StartDate.ToString("yyyy-MM-dd")</td>
                        <td>@campaign.EndDate?.ToString("yyyy-MM-dd")</td>
                        @* Use campaign.Duration.TotalDays if you want fractional days, otherwise .Days *@
                        <td>@(campaign.Duration.HasValue ? $"{campaign.Duration.Value.Days} days" : "-")</td>
                        <td>
                            <span class="status-badge @GetStatusClass(campaign.Status)">
                                @campaign.Status
                            </span>
                        </td>
                        <td>@campaign.Location</td>
                        <td>@(campaign.Introduction?.Length > 100 ? campaign.Introduction.Substring(0, 100) + "..." : campaign.Introduction)</td>

                        <td>@campaign.Staff?.Username</td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-sm btn-primary me-2"
                                        @onclick="() => EditCampaign(campaign.CampaignId)">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <button class="btn btn-sm btn-danger"
                                        @onclick="() => DeleteCampaign(campaign.CampaignId)">
                                    <i class="bi bi-trash3-fill"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                    index++;
                }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-center mt-3">
            @for (var i = 1; i <= TotalPages; i++)
            {
                var pageIndex = i;
                <button class="btn btn-outline-primary mx-1 @(pageIndex == currentPage ? "active" : "")"
                        @onclick="() => GoToPage(pageIndex)">
                    @pageIndex
                </button>
            }
        </div>
    }

    @if (showEditForm)
    {
        <div class="card p-3 my-4 edit-form-card">
            <h5>@(isNewCampaign ? "Add New Campaign" : "Edit Campaign: " + campaignToEdit.Title)</h5>

            @if (!string.IsNullOrEmpty(validationMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @validationMessage
                </div>
            }

            <div class="mb-3">
                <label class="form-label">Title</label>
                <input class="form-control" @bind="campaignToEdit.Title"/>
            </div>

            <div class="mb-3">
                <label class="form-label">Description</label>
                <textarea class="form-control" @bind="campaignToEdit.Description" rows="3"></textarea>
            </div>

            <div class="mb-3">
                <label class="form-label">Start Date</label>
                <input type="date" class="form-control" @bind="campaignToEdit.StartDate"/>
            </div>

            <div class="mb-3">
                <label class="form-label">End Date</label>
                <input type="date" class="form-control" @bind="campaignToEdit.EndDate"/>
            </div>

            <div class="mb-3">
                <label class="form-label">Status</label>
                <select class="form-select" @bind="campaignToEdit.Status">
                    <option value="">Select Status</option>
                    <option value="Active">Active</option>
                    <option value="Planned">Planned</option>
                    <option value="Completed">Completed</option>
                </select>
            </div>

            <div class="mb-3">
                <label class="form-label">Location</label>
                <input class="form-control" @bind="campaignToEdit.Location" />
            </div>

            <div class="mb-3">
                <label class="form-label">Introduction</label>
                <textarea class="form-control" @bind="campaignToEdit.Introduction" rows="3"></textarea>
            </div>

            <div class="mb-3">
                <label class="form-label">Staff</label>
                <select class="form-select" @bind="campaignToEdit.StaffId">
                    <option value="">Select Staff</option>
                    @if (staffUsers != null)
                    {
                        @foreach (var staff in staffUsers)
                        {
                            <option value="@staff.UserId">@staff.Username</option>
                        }
                    }
                </select>
            </div>

            <div>
                <button class="btn btn-success me-2" @onclick="SaveCampaign">Save</button>
                <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </div>
        </div>
    }
</div>
@* The "You are not authorized to access this page." message outside AuthorizeView is a bug.
   It should be inside the NotAuthorized block or removed if Authorization is handled elsewhere.
   For now, keeping it as is based on the provided code, but it's a UI/UX inconsistency. *@


@code {
    private List<CampaignDTO>? campaigns; // Changed from Campaign to CampaignDTO
    // Initializing to empty list here to prevent NullReferenceException during early rendering.
    // The finally block in OnInitializedAsync will ensure it's always populated.
    private List<CampaignDTO> filteredCampaigns = new List<CampaignDTO>(); // Changed from Campaign to CampaignDTO
    private List<UserDTO>? staffUsers; // Changed from User to UserDTO
    private List<RoleDTO>? roles; // Changed from Role to RoleDTO
    private bool hasError = false;
    private int currentPage = 1;
    private int itemsPerPage = 8;
    private string validationMessage = string.Empty;

    // Search, Sort, Filter state
    private string searchTerm = string.Empty;
    private string selectedStaffId = string.Empty;
    private string selectedStatus = string.Empty; // For filtering by status
    private string sortBy = "CampaignId"; // Default sort column
    private SortDirection sortDirection = SortDirection.Ascending; // Default sort direction

    private enum SortDirection { Ascending, Descending }

    // For Add/Edit Form
    private CampaignDTO campaignToEdit = new CampaignDTO // Changed from Campaign to CampaignDTO
    {
        CampaignId = "",
        Title = "",
        Description = null, // Set to null as it's nullable
        StartDate = DateOnly.FromDateTime(DateTime.Today), // Initialize with DateOnly
        EndDate = null, // Initialize as null for nullable DateOnly
        Status = "",
        Location = "",
        Introduction = "",
        StaffId = ""

    };
    private bool showEditForm = false;
    private bool isNewCampaign = false;

    private IEnumerable<CampaignDTO> PaginatedCampaigns => 
        filteredCampaigns?
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage) ?? Enumerable.Empty<CampaignDTO>();

    private int TotalPages => (int)Math.Ceiling((filteredCampaigns?.Count ?? 0) / (double)itemsPerPage);

    private void GoToPage(int page)
    {
        if (page < 1) page = 1;
        if (page > TotalPages) page = TotalPages;

        if (currentPage != page)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            campaigns = await CampaignApiService.GetAllAsync(); // Should return List<CampaignDTO>
            roles = await RoleApiService.GetAllAsync(); // Should return List<RoleDTO>
            var allUsers = await UserApiService.GetAllAsync(); // Should return List<UserDTO>

            var staffRoleIds = roles?.Where(r => r.RoleId.StartsWith("ST", StringComparison.OrdinalIgnoreCase)).Select(r => r.RoleId).ToList();
            staffUsers = allUsers?.Where(u => staffRoleIds != null && staffRoleIds.Contains(u.RoleId)).ToList();

            // Calculate duration for each campaign after fetching
            if (campaigns != null)
            {
                foreach (var campaign in campaigns)
                {
                    if (campaign.EndDate.HasValue)
                    {
                        campaign.Duration = campaign.EndDate.Value.ToDateTime(TimeOnly.MinValue) - campaign.StartDate.ToDateTime(TimeOnly.MinValue);
                    }
                }
            }

            hasError = false; // Set to false only if all fetches succeed
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            hasError = true; // Set to true on any error
        }
        finally
        {
            // Ensure lists are initialized, regardless of success or failure.
            // This prevents NullReferenceExceptions during rendering and filtering.
            campaigns ??= new List<CampaignDTO>(); // Initialize with DTO type
            roles ??= new List<RoleDTO>(); // Initialize with DTO type
            staffUsers ??= new List<UserDTO>(); // Initialize with DTO type
            // If campaigns is null due to an error, filteredCampaigns should also be empty
            filteredCampaigns = new List<CampaignDTO>(); // Initialize with DTO type

            // Always call FilterAndSortCampaigns to set initial filtered list.
            // It's already robust against null 'campaigns' internally.
            FilterAndSortCampaigns();
        }
    }

    // Central method to apply all search, filter, and sort logic
    private void FilterAndSortCampaigns()
    {
        if (campaigns == null)
        {
            filteredCampaigns = new List<CampaignDTO>();
            return;
        }

        IEnumerable<CampaignDTO> query = campaigns; // Changed from Campaign to CampaignDTO

        // Apply Search Term (CampaignId, Title, Description, Staff Name)
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var lowerSearchTerm = searchTerm.ToLower();
            query = query.Where(c =>
                (c.CampaignId?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.Title?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.Description?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.Staff?.Username?.ToLower().Contains(lowerSearchTerm) ?? false)
            );
        }

        // Apply Staff Filter
        if (!string.IsNullOrWhiteSpace(selectedStaffId))
        {
            query = query.Where(c => c.StaffId == selectedStaffId);
        }

        // Apply Status Filter
        if (!string.IsNullOrWhiteSpace(selectedStatus))
        {
            query = query.Where(c => c.Status == selectedStatus);
        }

        // Apply Sorting
        switch (sortBy)
        {
            case "CampaignId":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.CampaignId) :
                    query.OrderByDescending(c => c.CampaignId);
                break;
            case "Title":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.Title, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(c => c.Title, StringComparer.OrdinalIgnoreCase);
                break;
            case "StartDate":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.StartDate) :
                    query.OrderByDescending(c => c.StartDate);
                break;
            case "EndDate":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.EndDate) :
                    query.OrderByDescending(c => c.EndDate);
                break;
            case "Duration": // NEW: Sort by Duration
                // Handle nullable TimeSpan. OrderBy will put nulls at the end for ascending, beginning for descending.
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.Duration) :
                    query.OrderByDescending(c => c.Duration);
                break;
            case "Status":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.Status, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(c => c.Status, StringComparer.OrdinalIgnoreCase);
                break;
            case "StaffName":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.Staff?.Username, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(c => c.Staff?.Username, StringComparer.OrdinalIgnoreCase);
                break;
            default:
                query = query.OrderBy(c => c.CampaignId);
                break;
        }

        filteredCampaigns = query.ToList();
        currentPage = 1; // Reset to first page after filtering/sorting
    }

    private void OnStaffFilterChanged(ChangeEventArgs e)
    {
        selectedStaffId = e.Value?.ToString() ?? string.Empty;
        FilterAndSortCampaigns();
    }

    private void OnStatusFilterChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value?.ToString() ?? string.Empty;
        FilterAndSortCampaigns();
    }

    private void ToggleSortDirection()
    {
        sortDirection = sortDirection == SortDirection.Ascending ? SortDirection.Descending : SortDirection.Ascending;
        FilterAndSortCampaigns(); // Re-apply filter and sort with new direction
    }

    // Helper method to generate the next sequential CampaignId
    private string GenerateNextCampaignId()
    {
        var maxIdNum = 0;
        if (campaigns != null && campaigns.Any())
        {
            maxIdNum = campaigns
                .Select(c => {
                    if (c.CampaignId != null && c.CampaignId.StartsWith("CAM") && int.TryParse(c.CampaignId.Substring(3), out var num))
                    {
                        return num;
                    }
                    return 0;
                })
                .DefaultIfEmpty(0)
                .Max();
        }
        return $"CAM{maxIdNum + 1:D4}"; // Changed D3 to D4 for CAM0001, CAM0010, CAM0100, CAM1000 format
    }

    private void AddCampaign()
    {
        validationMessage = string.Empty; // Clear previous validation messages
        campaignToEdit = new CampaignDTO // Changed from Campaign to CampaignDTO
        {
            CampaignId = GenerateNextCampaignId(),
            Title = "",
            Description = null, // Set to null as it's nullable
            StartDate = DateOnly.FromDateTime(DateTime.Today), // Initialize with DateOnly
            EndDate = null, // Initialize as null for nullable DateOnly
            Status = "",
            Location = "",
            Introduction = "",
            StaffId = ""
        };
        isNewCampaign = true;
        showEditForm = true;
    }

    private void EditCampaign(string campaignId)
    {
        validationMessage = string.Empty; // Clear previous validation messages
        var campaign = campaigns?.FirstOrDefault(c => c.CampaignId == campaignId); // Expecting CampaignDTO
        if (campaign != null)
        {
            campaignToEdit = new CampaignDTO // Changed from Campaign to CampaignDTO
            {
                CampaignId = campaign.CampaignId,
                Title = campaign.Title,
                Description = campaign.Description,
                StartDate = campaign.StartDate,
                EndDate = campaign.EndDate,
                Status = campaign.Status,
                StaffId = campaign.StaffId,
                Location = campaign.Location,
                Introduction = campaign.Introduction,
                Staff = campaign.Staff, // Keep navigation property if needed for display (will be UserDTO)
                Duration = campaign.Duration // Copy the duration if already calculated
            };
            isNewCampaign = false;
            showEditForm = true;
        }
    }

    private async Task SaveCampaign()
    {
        // Validation checks
        if (string.IsNullOrWhiteSpace(campaignToEdit.Title))
        {
            validationMessage = "Title cannot be empty.";
            return;
        }
        // Description is nullable, so no validation needed for emptiness.

        // Validate StartDate
        if (campaignToEdit.StartDate == default)
        {
            validationMessage = "Please select a Start Date.";
            return;
        }

        // Validate EndDate (since it's nullable, we explicitly check if a value has been chosen)
        if (!campaignToEdit.EndDate.HasValue)
        {
            validationMessage = "Please select an End Date.";
            return;
        }

        // Validate StartDate not on or after EndDate, only if both have values
        if (campaignToEdit.StartDate >= campaignToEdit.EndDate.Value)
        {
            validationMessage = "Start Date cannot be on or after End Date.";
            return;
        }

        if (string.IsNullOrWhiteSpace(campaignToEdit.Status))
        {
            validationMessage = "Please select a Status.";
            return;
        }
        if (string.IsNullOrWhiteSpace(campaignToEdit.Location))
        {
            validationMessage = "Please select a Location.";
            return;
        }
        if (string.IsNullOrWhiteSpace(campaignToEdit.Introduction))
        {
            validationMessage = "Please write Introduction.";
            return;
        }
        if (string.IsNullOrWhiteSpace(campaignToEdit.StaffId))
        {
            validationMessage = "Please select a Staff.";
            return;
        }

        validationMessage = string.Empty; // Clear message if all validations pass

        try
        {
            if (isNewCampaign)
            {
                await CampaignApiService.CreateAsync(campaignToEdit); // Should accept CampaignDTO
                Console.WriteLine($"Campaign '{campaignToEdit.Title}' created with ID: {campaignToEdit.CampaignId}");
            }
            else
            {
                await CampaignApiService.UpdateAsync(campaignToEdit); // Should accept CampaignDTO
                Console.WriteLine($"Campaign '{campaignToEdit.Title}' updated.");
            }

            campaigns = await CampaignApiService.GetAllAsync(); // Re-fetch all campaigns (List<CampaignDTO>)
            // Recalculate duration for updated/new campaigns
            if (campaigns != null)
            {
                foreach (var campaign in campaigns)
                {
                    if (campaign.EndDate.HasValue)
                    {
                        campaign.Duration = campaign.EndDate.Value.ToDateTime(TimeOnly.MinValue) - campaign.StartDate.ToDateTime(TimeOnly.MinValue);
                    }
                }
            }
            FilterAndSortCampaigns(); // Re-apply all logic after save
            showEditForm = false;
            GoToPage(1);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving campaign: {ex.Message}");
            validationMessage = $"Error saving campaign: {ex.Message}"; // Display error to user
        }
    }

    private void CancelEdit()
    {
        validationMessage = string.Empty; // Clear validation message on cancel
        campaignToEdit = new CampaignDTO // Changed from Campaign to CampaignDTO
        {
            CampaignId = "",
            Title = "",
            Description = null,
            StartDate = DateOnly.FromDateTime(DateTime.Today),
                EndDate = null,
            Location = "",
            Introduction= "",
            Status = "",
            StaffId = ""
        };
        showEditForm = false;
    }

    private async Task DeleteCampaign(string campaignId)
    {
        var campaignToDelete = campaigns?.FirstOrDefault(c => c.CampaignId == campaignId); // Expecting CampaignDTO
        if (campaignToDelete == null)
        {
            Console.WriteLine($"Campaign with ID {campaignId} not found for deletion.");
            return;
        }

        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete campaign '{campaignToDelete.Title}' (ID: {campaignId})?");
        if (confirmed)
        {
            try
            {
                var success = await CampaignApiService.DeleteAsync(campaignId); // Accepts string ID
                if (success)
                {
                    Console.WriteLine($"Campaign '{campaignToDelete.Title}' (ID: {campaignId}) deleted successfully.");
                    campaigns = await CampaignApiService.GetAllAsync(); // Re-fetch all campaigns (List<CampaignDTO>)
                    // Recalculate duration for remaining campaigns
                    if (campaigns != null)
                    {
                        foreach (var campaign in campaigns)
                        {
                            if (campaign.EndDate.HasValue)
                            {
                                campaign.Duration = campaign.EndDate.Value.ToDateTime(TimeOnly.MinValue) - campaign.StartDate.ToDateTime(TimeOnly.MinValue);
                            }
                        }
                    }
                    FilterAndSortCampaigns(); // Re-apply all logic after delete
                    GoToPage(1);
                }
                else
                {
                    Console.WriteLine($"Failed to delete campaign '{campaignToDelete.Title}'.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting campaign: {ex.Message}");
            }
        }
    }

    // Helper to get CSS class for campaign status
    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Active" => "status-active",
            "Completed" => "status-completed",
            "Planned" => "status-planned",
            _ => ""
        };
    }
}
