@page "/Management/User"
@using DUPSS.API.Models.Common
@using DUPSS.API.Models.DTOs
@using DUPSS.API.Models.Objects
@using DUPSS.Web.Components.Layout
@using DUPSS.Web.Components.Service
@inject RoleApiService RoleApiService
@inject UserApiService UserApiService
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject CampaignApiService CampaignApiService
@inject HttpClient Http
@layout ManagementLayout

@using Microsoft.AspNetCore.Components.Authorization
@using System.IO
@using Microsoft.AspNetCore.Components.Forms

<AuthorizeView Roles="AD">
    <Authorized>
        <div class="user-management-container">
            <div class="header-section">
                <div class="page-title">User Management</div>
                <div class="actions">
                    <button class="create" @onclick="ShowCreateUserForm"><i class="bi bi-plus-circle"></i>Create New
                        User
                    </button>
                </div>
            </div>

            <div class="filter-sort-section">
                <div class="search-input-container">
                    <input type="text" class="form-control" placeholder="Search by Username, Email, or Phone Number"
                           @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterUsers"/>
                </div>
                <div class="filter-dropdown-container">
                    <select class="form-select" @onchange="OnRoleFilterChanged">
                        <option value="">All Roles</option>
                        @foreach (var role in availableRoles)
                        {
                            <option value="@role.RoleId">@role.RoleName</option>
                        }
                    </select>
                </div>
                <div class="sort-controls">
                    <select class="form-select" @bind="sortBy" @bind:after="SortUsers">
                        <option value="Username">Sort by Username</option>
                        <option value="Email">Sort by Email</option>
                        <option value="RoleName">Sort by Role</option>
                    </select>
                    <button class="btn btn-outline-primary sort-direction-button" @onclick="ToggleSortDirection">
                        @if (sortDirection == SortDirection.Ascending)
                        {
                            <i class="bi bi-sort-alpha-down"></i>
                        }
                        else
                        {
                            <i class="bi bi-sort-alpha-down-alt"></i>
                        }
                    </button>
                </div>
            </div>

            @if (users == null)
            {
                <div class="loading-indicator">Loading users...</div>
            }
            else if (!filteredUsers.Any())
            {
                <div class="no-data-message">No users found matching your search criteria.</div>
            }
            else
            {
                <div class="table-container">
                    <table class="user-table">
                        <thead>
                        <tr>
                            <th>No</th>
                            <th>Username</th>
                            <th>Email</th>
                            <th>Phone Number</th>
                            <th>Date of Birth</th>
                            <th>Role</th>
                            <th>Action</th>
                        </tr>
                        </thead>
                        <tbody>
                        @{
                            var index = (currentPage - 1) * itemsPerPage + 1;
                        }
                        @foreach (var user in PaginatedUsers)
                        {
                            <tr>
                                <td>@index</td>
                                <td>@user.Username</td>
                                <td>@user.Email</td>
                                <td>@user.PhoneNumber</td>
                                <td>@user.DoB?.ToString("yyyy-MM-dd")</td>
                                <td>@user.Role!.RoleName</td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn btn-sm btn-primary me-2"
                                                @onclick="() => EditUser(user.UserId)">
                                            <i class="bi bi-three-dots-vertical"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.UserId)">
                                            <i class="bi bi-trash3-fill"></i>
                                        </button>
                                        <button class="btn btn-sm btn-info"
                                                @onclick="@(() => ViewCampaignHistory(user.UserId))">
                                            Campaign History
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            index++;
                        }
                        </tbody>
                    </table>
                </div>
                <div class="d-flex justify-content-center mt-3">
                    @for (var i = 1; i <= TotalPages; i++)
                    {
                        var pageIndex = i;
                        <button class="btn btn-outline-primary mx-1 @(pageIndex == currentPage ? "active" : "")"
                                @onclick="() => GoToPage(pageIndex)">
                            @pageIndex
                        </button>
                    }
                </div>

                @if (showCreateForm)
                {
                    <div class="edit-form-card">
                        <h5>Create New User</h5>
                        <div class="mb-3">
                            <label class="form-label">Username <span class="text-danger">*</span></label>
                            <input class="form-control" @bind="newUser.Username"/>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email <span class="text-danger">*</span></label>
                            <input class="form-control" type="email" @bind="newUser.Email"/>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password <span class="text-danger">*</span></label>
                            <input class="form-control" type="password" @bind="newUserPassword"/>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <input class="form-control" @bind="newUser.PhoneNumber"/>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Date of Birth</label>
                            <input type="date" class="form-control" @bind="newUser.DoB"/>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Role <span class="text-danger">*</span></label>
                            <select class="form-select" @bind="newUser.RoleId">
                                <option value="">Select Role</option>
                                @foreach (var role in availableRoles)
                                {
                                    <option value="@role.RoleId">@role.RoleName</option>
                                }
                            </select>
                        </div>

                        <div>
                            <button class="btn btn-success me-2" @onclick="CreateUser">Create</button>
                            <button class="btn btn-secondary" @onclick="CancelCreate">Cancel</button>
                        </div>
                        @if (!string.IsNullOrEmpty(message))
                        {
                            <div class="alert alert-info mt-3">@message</div>
                        }
                    </div>
                }

                @if (editingUserId != null && editingUser != null)
                {
                    <div class="edit-form-card">
                        <h5>Edit User: @editingUser.Username</h5>
                        <div class="mb-3">
                            <label class="form-label">Username <span class="text-danger">*</span></label>
                            <input class="form-control" @bind="editingUser.Username"/>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email <span class="text-danger">*</span></label>
                            <input class="form-control" type="email" @bind="editingUser.Email"/>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <input class="form-control" @bind="editingUser.PhoneNumber"/>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Date of Birth</label>
                            <input type="date" class="form-control" @bind="editingUser.DoB"/>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Role <span class="text-danger">*</span></label>
                            <select class="form-select" @bind="editingUser.RoleId">
                                <option value="">Select Role</option>
                                @foreach (var role in availableRoles)
                                {
                                    <option value="@role.RoleId">@role.RoleName</option>
                                }
                            </select>
                        </div>

                        <div>
                            <button class="btn btn-success me-2" @onclick="SaveEdit">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </div>
                        @if (!string.IsNullOrEmpty(message))
                        {
                            <div class="alert alert-info mt-3">@message</div>
                        }
                    </div>
                }
                @if (showCampaignHistory)
                {
                    <div class="mt-4">
                        <h5>Campaign History:</h5>

                        @if (userCampaigns != null && userCampaigns.Any())
                        {
                            <table class="table table-bordered">
                                <thead>
                                <tr>
                                    <th>Campaign Name</th>
                                    <th>Name</th>
                                    <th>Status</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var campaign in userCampaigns)
                                {
                                    <tr>
                                        <td>@campaign.Title</td>
                                        <td>@campaign.StartDate.ToString("dd/MM/yyyy") - @campaign.EndDate?.ToString("dd/MM/yyyy")</td>
                                        <td>@campaign.Status.ToString()</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                This user haven't registered in any campaigns'.
                            </div>
                        }

                        <button class="btn btn-secondary mt-2" @onclick="() => showCampaignHistory = false">Close
                        </button>
                    </div>
                }
            }

            @if (!string.IsNullOrEmpty(message) && editingUserId == null && !showCreateForm && !showCampaignHistory)
            {
                <div class="alert alert-info mt-3">@message</div>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="access-denied">
            <h2>Access Denied</h2>
            <p>
                You do not have permission to access this page. Please <a href="/login">log in</a> with an authorized
                account.
            </p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<UserDTO>? users;
    private List<UserDTO>? filteredUsers;
    private List<RoleDTO> availableRoles = new();
    private string searchTerm = "";
    private string? message;
    private string? editingUserId;
    private UserDTO? editingUser;
    private int currentPage = 1;
    private int itemsPerPage = 10;
    private string selectedRoleId = "";
    private bool showCreateForm;
    private UserDTO newUser = new() { UserId = "", Username = "", Email = "", RoleId = "" };
    private string newUserPassword = "";
    private string sortBy = "Username";
    private SortDirection sortDirection = SortDirection.Ascending;

    private enum SortDirection { Ascending, Descending }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("OnInitializedAsync: Loading all data...");
            await LoadAllDataAsync();
            Console.WriteLine("OnInitializedAsync: Data loaded. Applying filters and sort.");
            FilterUsers();
        }
        catch (Exception ex)
        {
            message = $"Failed to load data: {ex.Message}";
            Console.WriteLine($"OnInitializedAsync: Error loading data: {ex.Message}");
            users = new List<UserDTO>();
            filteredUsers = new List<UserDTO>();
            availableRoles = new List<RoleDTO>();
        }
    }

    private async Task LoadAllDataAsync()
    {
        Console.WriteLine("LoadAllDataAsync: Fetching users and roles...");
        users = await UserApiService.GetAllAsync();
        availableRoles = await RoleApiService.GetAllAsync();
        Console.WriteLine($"LoadAllDataAsync: Fetched {users?.Count ?? 0} users and {availableRoles?.Count ?? 0} roles.");

        if (users != null)
        {
            foreach (var user in users)
            {
                Console.WriteLine($"User ID: {user.UserId}, Username: {user.Username}");
            }
        }
    }

    private void SortUsers()
    {
        var query = filteredUsers?.AsEnumerable() ?? Enumerable.Empty<UserDTO>();

        switch (sortBy)
        {
            case "Username":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(u => u.Username, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(u => u.Username, StringComparer.OrdinalIgnoreCase);
                break;
            case "Email":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(u => u.Email, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(u => u.Email, StringComparer.OrdinalIgnoreCase);
                break;
            case "RoleName":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(u => u.Role?.RoleName, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(u => u.Role?.RoleName, StringComparer.OrdinalIgnoreCase);
                break;
        }
        filteredUsers = query.ToList();
        currentPage = 1;
    }

    private IEnumerable<UserDTO> PaginatedUsers =>
        filteredUsers?
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage) ?? Enumerable.Empty<UserDTO>();

    private int TotalPages => (int)Math.Ceiling((filteredUsers?.Count ?? 0) / (double)itemsPerPage);

    private void GoToPage(int page)
    {
        if (page < 1) page = 1;
        if (page > TotalPages) page = TotalPages;

        if (currentPage != page)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void FilterUsers()
    {
        if (users == null)
            return;

        filteredUsers = users.Where(user =>
            (string.IsNullOrWhiteSpace(searchTerm) ||
             (user.Username?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
             (user.Email?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
             (user.PhoneNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)) &&
            (string.IsNullOrWhiteSpace(selectedRoleId) || (user.RoleId == selectedRoleId))
        ).ToList();

        SortUsers();
        currentPage = 1;
        StateHasChanged();
    }

    private void OnRoleFilterChanged(ChangeEventArgs e)
    {
        selectedRoleId = e.Value?.ToString() ?? string.Empty;
        FilterUsers();
    }

    private void ToggleSortDirection()
    {
        sortDirection = sortDirection == SortDirection.Ascending ? SortDirection.Descending : SortDirection.Ascending;
        SortUsers();
    }

    private void ShowCreateUserForm()
    {
        showCreateForm = true;
        newUser = new UserDTO { UserId = "", Username = "", Email = "", RoleId = "" };
        newUserPassword = "";
        editingUserId = null;
        editingUser = null;
        message = null;
        showCampaignHistory = false;
    }

    private async Task CreateUser()
    {
        if (string.IsNullOrEmpty(newUser.Username) || string.IsNullOrEmpty(newUser.Email) ||
            string.IsNullOrEmpty(newUserPassword) || string.IsNullOrEmpty(newUser.RoleId))
        {
            message = "Username, email, password, and role are required.";
            return;
        }

        try
        {
            Console.WriteLine($"CreateUser: Creating user '{newUser.Username}' via API to get UserId...");
            var createdUser = await UserApiService.CreateAsync(new CreateUserRequest
            {
                User = new UserDTO
                {
                    UserId = "",
                    Username = newUser.Username,
                    Email = newUser.Email,
                    PhoneNumber = newUser.PhoneNumber,
                    DoB = newUser.DoB,
                    RoleId = newUser.RoleId,
                    ImageUrl = null
                },
                Password = newUserPassword
            });

            if (createdUser == null || string.IsNullOrEmpty(createdUser.UserId))
            {
                message = "Failed to create user or retrieve UserId from API.";
                Console.WriteLine("CreateUser: API did not return a created user or UserId.");
                return;
            }

            message = $"User {createdUser.Username} created successfully.";
            showCreateForm = false;
            newUser = new UserDTO { UserId = "", Username = "", Email = "", RoleId = "" };
            newUserPassword = "";

            // Refresh data after successful creation
            await LoadAllDataAsync();
            FilterUsers();
        }
        catch (Exception ex)
        {
            message = $"Failed to create user: {ex.Message}";
            Console.WriteLine($"CreateUser: Error creating user: {ex.Message}");
        }

        currentPage = 1;
        StateHasChanged();
    }

    private void CancelCreate()
    {
        showCreateForm = false;
        newUser = new UserDTO { UserId = "", Username = "", Email = "", RoleId = "" };
        newUserPassword = "";
        message = null;
    }

    private void EditUser(string userId)
    {
        var user = users?.FirstOrDefault(u => u.UserId == userId);
        if (user != null)
        {
            editingUserId = userId;
            editingUser = new UserDTO
            {
                UserId = user.UserId,
                Username = user.Username,
                Email = user.Email,
                PhoneNumber = user.PhoneNumber,
                DoB = user.DoB,
                Role = user.Role,
                RoleId = user.RoleId,
                ImageUrl = user.ImageUrl
            };
            message = null;
        }
        showCampaignHistory = false;
        showCreateForm = false;
    }

    private async Task SaveEdit()
    {
        if (editingUser == null || string.IsNullOrEmpty(editingUser.Username) ||
            string.IsNullOrEmpty(editingUser.Email) || string.IsNullOrEmpty(editingUser.RoleId))
        {
            message = "Username, email, and role are required.";
            return;
        }

        try
        {
            await UserApiService.UpdateAsync(editingUser);
            message = $"User {editingUser.Username} updated successfully.";
            editingUserId = null;
            editingUser = null;

            // Refresh data after successful update
            await LoadAllDataAsync();
            FilterUsers();
        }
        catch (Exception ex)
        {
            message = $"Failed to update user: {ex.Message}";
            Console.WriteLine($"SaveEdit: Error updating user: {ex.Message}");
        }

        currentPage = 1;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        editingUserId = null;
        editingUser = null;
        message = null;
    }

    private async Task DeleteUser(string userId)
    {
        var user = users?.FirstOrDefault(u => u.UserId == userId);
        if (user == null)
        {
            message = "User not found.";
            return;
        }

        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user '{user.Username}'?");
        if (confirmed)
        {
            try
            {
                var success = await UserApiService.DeleteAsync(userId);
                if (success)
                {
                    message = $"User '{user.Username}' deleted successfully.";

                    // Refresh data after successful deletion
                    await LoadAllDataAsync();
                    FilterUsers();
                }
                else
                {
                    message = $"Failed to delete user '{user.Username}'.";
                }
            }
            catch (Exception ex)
            {
                message = $"Failed to delete user: {ex.Message}";
                Console.WriteLine($"DeleteUser: Error deleting user: {ex.Message}");
            }
        }

        currentPage = 1;
        StateHasChanged();
    }

    private List<CampaignDTO> userCampaigns = new();
    private bool showCampaignHistory = false;

    private async Task ViewCampaignHistory(string userId)
    {
        try
        {
            userCampaigns = await CampaignApiService.GetCampaignsByUserIdAsync(userId);
        }
        catch (HttpRequestException ex)
        {

            if (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                userCampaigns = new();
            }
            else
            {
                message = $"Cannot load campaign history: {ex.Message}";
                return;
            }
        }
        catch (Exception ex)
        {
            message = $"Error occur: {ex.Message}";
            return;
        }

        showCampaignHistory = true;
    }
}
