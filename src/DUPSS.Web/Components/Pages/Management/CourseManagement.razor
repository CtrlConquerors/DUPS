@page "/Management/Course"
@using DUPSS.API.Models.DTOs
@using DUPSS.API.Models.Objects
@using DUPSS.Web.Components.Layout
@using DUPSS.Web.Components.Service
@inject NavigationManager NavigationManager
@inject CourseApiService CourseApiService
@inject CourseTopicApiService CourseTopicApiService
@inject RoleApiService RoleApiService
@inject UserApiService UserApiService
@inject IJSRuntime JS
@inject IWebHostEnvironment WebHostEnvironment
@layout ManagementLayout

@* We can nest AuthorizeView but make sure to add Context to the innerAuthorizeView *@
@*Example below*@

<div class="course-management-container">
    <div class="header-section">
        <h1 class="page-title">Course Management</h1>

        <div class="actions">
            <button class="add-course-button" @onclick="AddCourse">
                <i class="bi bi-plus-circle"></i> ADD COURSE
            </button>
            @* Removed: Hard Reload Button for Development Testing - now automatic *@
        </div>
    </div>
    <div class="filter-sort-section">
        <div class="search-input-container">
            <input type="text" class="form-control" placeholder="Search by Course Name, Topic, Staff, Consultant, ID, Description"
                   @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterAndSortCourses"/>
        </div>

        <div class="filter-dropdown-container">
            <select class="form-select" @onchange="OnTopicFilterChanged">
                <option value="">All Topics</option>
                @if (topics != null)
                {
                    @foreach (var topic in topics)
                    {
                        <option value="@topic.TopicId">@topic.TopicName</option>
                    }
                }
            </select>
        </div>

        <div class="filter-dropdown-container">
            <select class="form-select" @onchange="OnStaffFilterChanged">
                <option value="">All Staff</option>
                @if (staffUsers != null)
                {
                    @foreach (var staff in staffUsers)
                    {
                        <option value="@staff.UserId">@staff.Username</option>
                    }
                }
            </select>
        </div>

        <div class="filter-dropdown-container">
            <select class="form-select" @onchange="OnConsultantFilterChanged">
                <option value="">All Consultants</option>
                @if (consultantUsers != null)
                {
                    @foreach (var consultant in consultantUsers)
                    {
                        <option value="@consultant.UserId">@consultant.Username</option>
                    }
                }
            </select>
        </div>

        @* Sort controls *@
        <div class="sort-controls">
            <select class="form-select" @bind="sortBy" @bind:after="FilterAndSortCourses">
                <option value="CourseId">Sort: Course ID</option>
                <option value="CourseName">Sort: Course Name</option>
                <option value="TopicName">Sort: Topic Name</option>
                <option value="StaffName">Sort: Staff Name</option>
                <option value="ConsultantName">Sort: Consultant Name</option>
            </select>
            <button class="btn btn-outline-primary sort-direction-button" @onclick="ToggleSortDirection">
                @if (sortDirection == SortDirection.Ascending)
                {
                    <i class="bi bi-sort-alpha-down"></i>
                }
                else
                {
                    <i class="bi bi-sort-alpha-down-alt"></i>
                }
            </button>
        </div>
    </div>

    @if (courses == null || topics == null || staffUsers == null || roles == null || consultantUsers == null)
    {
        <div class="loading-indicator">Loading courses and related data...</div>
    }
    else if (hasError)
    {
        <div class="error-message">Error loading data. Please try again later.</div>
    }
    else if (!filteredCourses.Any())
    {
        <div class="no-data-message">No courses found matching your criteria.</div>
    }
    else
    {
        <div class="table-container">
            <table class="course-table">
                <thead>
                <tr>
                    <th>No</th>
                    <th>Course ID</th>
                    <th>Course Name</th>
                    <th>Course Type</th>
                    <th>Topic Name</th>
                    <th>Staff Name</th>
                    <th>Consultant Name</th>
                    <th>Description</th>
                    <th>Image</th> 
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>
                @{
                    var index = (currentPage - 1) * itemsPerPage + 1;
                }
                @foreach (var course in PaginatedCourses)
                {
                    <tr>
                        <td>@index</td>
                        <td>@course.CourseId</td>
                        <td>@course.CourseName</td>
                        <td>
                            @if (course.CourseType?.Equals("Online", StringComparison.OrdinalIgnoreCase) == true)
                            {
                                <span class="online-indicator" title="Online Course"></span>
                            }
                            else if (course.CourseType?.Equals("Offline", StringComparison.OrdinalIgnoreCase) == true)
                            {
                                <span class="offline-indicator" title="Offline Course"></span>
                            }
                            else if (course.CourseType?.Equals("Hybrid", StringComparison.OrdinalIgnoreCase) == true)
                            {
                                <span class="hybrid-indicator" title="Hybrid Course"></span>
                            }
                            @course.CourseType
                        </td>
                        <td>@course.Topic?.TopicName</td>
                        <td>@course.Staff?.Username</td>
                        <td>@course.Consultant?.Username</td>
                        <td>@(course.Description?.Length > 100 ? course.Description.Substring(0, 100) + "..." : course.Description)</td>
                        <td> @* NEW: Image Column Cell *@
                            @if (!string.IsNullOrEmpty(course.ImageUrl))
                            {
                                <img src="@course.ImageUrl" alt="Course Image" class="table-course-image" />
                            }
                            else
                            {
                                <span class="no-image-available">N/A</span>
                            }
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-sm btn-primary me-2"
                                        @onclick="() => EditCourse(course.CourseId)">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteCourse(course.CourseId)">
                                    <i class="bi bi-trash3-fill"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                    index++;
                }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-center mt-3">
            @for (var i = 1; i <= TotalPages; i++)
            {
                var pageIndex = i;
                <button class="btn btn-outline-primary mx-1 @(pageIndex == currentPage ? "active" : "")"
                        @onclick="() => GoToPage(pageIndex)">
                    @pageIndex
                </button>
            }
        </div>
    }

    @if (showEditForm)
    {
        <div class="card p-3 my-4 edit-form-card">
            <h5>@(isNewCourse ? "Add New Course" : "Edit Course: " + courseToEdit.CourseName)</h5>

            @* Validation Message Display *@
            @if (!string.IsNullOrEmpty(validationMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @validationMessage
                </div>
            }

            <div class="mb-3">
                <label class="form-label">Course Name</label>
                <input class="form-control" @bind="courseToEdit.CourseName"/>
            </div>

            <div class="mb-3">
                <label class="form-label">Course Type</label>
                <select class="form-select" @bind="courseToEdit.CourseType">
                    <option value="Online">Online</option>
                    <option value="Hybrid">Hybrid</option>
                    <option value="Offline">Offline</option>
                </select>
            </div>

            <div class="mb-3">
                <label class="form-label">Topic</label>
                @* Conditional rendering for Topic input/select *@
                @if (showNewTopicInput)
                {
                    <input type="text" class="form-control" @bind="newTopicName" placeholder="Enter new topic name"/>
                    <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="CancelNewTopicInput">Cancel New
                        Topic
                    </button>
                }
                else
                {
                    <select class="form-select" @bind="courseToEdit.TopicId">
                        <option value="">Select Topic</option>
                        @if (topics != null)
                        {
                            @foreach (var topic in topics)
                            {
                                <option value="@topic.TopicId">@topic.TopicName</option>
                            }
                        }
                    </select>
                    <div class="d-flex justify-content-between mt-2">
                        <button class="btn btn-sm btn-outline-info" @onclick="PromptAddNewTopic">Add New Topic</button>
                        @* Delete Topic button (visible if a topic is selected) *@
                        @if (!string.IsNullOrWhiteSpace(courseToEdit.TopicId))
                        {
                            <button class="btn btn-sm btn-outline-danger"
                                    @onclick="() => DeleteTopic(courseToEdit.TopicId)">Delete Selected Topic
                            </button>
                        }
                    </div>
                }
            </div>

            <div class="mb-3">
                <label class="form-label">Staff</label>
                <select class="form-select" @bind="courseToEdit.StaffId">
                    <option value="">Select Staff</option>
                    @if (staffUsers != null)
                    {
                        @foreach (var staff in staffUsers)
                        {
                            <option value="@staff.UserId">@staff.Username</option>
                        }
                    }
                </select>
            </div>

            @* Description input *@
            <div class="mb-3">
                <label class="form-label">Description</label>
                <textarea class="form-control" @bind="courseToEdit.Description" rows="5" placeholder="Enter detailed course description"></textarea>
            </div>

            @* Consultant dropdown *@
            <div class="mb-3">
                <label class="form-label">Consultant</label>
                <select class="form-select" @bind="courseToEdit.ConsultantId">
                    <option value="">Select Consultant</option>
                    @if (consultantUsers != null)
                    {
                        @foreach (var consultant in consultantUsers)
                        {
                            <option value="@consultant.UserId">@consultant.Username</option>
                        }
                    }
                </select>
            </div>

           


            <div>
                <button class="btn btn-success me-2" @onclick="SaveCourse">Save</button>
                <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </div>
        </div>
    }
</div>

@code {
    private List<CourseDTO>? courses;
    private List<CourseTopic>? topics;
    private List<UserDTO>? staffUsers;
    private List<UserDTO>? consultantUsers;
    private List<RoleDTO>? roles;
    private bool hasError = false;
    private int currentPage = 1;
    private int itemsPerPage = 8;
    private string validationMessage = string.Empty;

    // Search, Sort, Filter state
    private string searchTerm = string.Empty;
    private string selectedTopicId = string.Empty;
    private string selectedStaffId = string.Empty;
    private string selectedConsultantId = string.Empty;
    private string sortBy = "CourseId"; // Default sort column is CourseId
    private SortDirection sortDirection = SortDirection.Ascending; // Default sort direction

    private enum SortDirection { Ascending, Descending }

    // For Add/Edit Form
    private CourseDTO courseToEdit = new CourseDTO
    {
        CourseId = "",
        CourseName = "",
        CourseType = "Online", // Default to online
        TopicId = "",
        StaffId = "",
        Description = "", // Initialize description
        ConsultantId = "", // Initialize consultant ID
        ImageUrl = "" // Initialize ImageUrl
    };
    private bool showEditForm = false;
    private bool isNewCourse = false;
    private bool showNewTopicInput = false; // Controls visibility of new topic input
    private string newTopicName = string.Empty; // Binds to the new topic input field

 

    private List<CourseDTO> filteredCourses = new List<CourseDTO>();

    private IEnumerable<CourseDTO> PaginatedCourses =>
        filteredCourses?
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage) ?? Enumerable.Empty<CourseDTO>();

    private int TotalPages => (int)Math.Ceiling((filteredCourses?.Count ?? 0) / (double)itemsPerPage);

    private void GoToPage(int page)
    {
        if (page < 1) page = 1;
        if (page > TotalPages) page = TotalPages;

        if (currentPage != page)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("OnInitializedAsync: Starting data load.");

          

            await LoadAllDataAsync(); // Consolidated data loading
            FilterAndSortCourses(); // Apply initial filter and sort
            hasError = false;
            Console.WriteLine("OnInitializedAsync: Data load complete and filtered.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"OnInitializedAsync: Error fetching data: {ex.Message}");
            courses = new List<CourseDTO>();
            filteredCourses = new List<CourseDTO>();
            topics = new List<CourseTopic>();
            staffUsers = new List<UserDTO>();
            consultantUsers = new List<UserDTO>();
            roles = new List<RoleDTO>();
            hasError = true;
        }
    }

    // Consolidated data loading method
    private async Task LoadAllDataAsync()
    {
        Console.WriteLine("LoadAllDataAsync: Fetching courses...");
        courses = await CourseApiService.GetAllAsync();
        Console.WriteLine($"LoadAllDataAsync: Fetched {courses?.Count ?? 0} courses.");

        // After fetching courses, try to find their corresponding images in wwwroot/images
        // THIS SECTION IS KEPT TO POPULATE ImageUrl FOR DISPLAY
        if (courses != null && courses.Any())
        {
            var wwwrootPath = WebHostEnvironment.WebRootPath; // RE-ENABLED
            var imagesPath = Path.Combine(wwwrootPath, "images", "Courses"); // RE-ENABLED
            var supportedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" }; // Common image extensions
            Console.WriteLine($"LoadAllDataAsync: wwwrootPath: {wwwrootPath}"); // RE-ENABLED
            Console.WriteLine($"LoadAllDataAsync: imagesPath: {imagesPath}"); // RE-ENABLED

            foreach (var course in courses)
            {
                if (!string.IsNullOrEmpty(course.CourseId))
                {
                    bool imageFound = false;
                    // Try to find the image file with any supported extension
                    foreach (var ext in supportedExtensions)
                    {
                        var potentialFileName = $"{course.CourseId}{ext}";
                        var fullPath = Path.Combine(imagesPath, potentialFileName);

                        if (System.IO.File.Exists(fullPath))
                        {
                            course.ImageUrl = $"images/Courses/{potentialFileName}"; // Set the relative URL for display
                            Console.WriteLine($"LoadAllDataAsync: Found image for CourseId {course.CourseId}: {course.ImageUrl}");
                            imageFound = true;
                            break; // Found the image, no need to check other extensions
                        }
                    }
                    if (!imageFound)
                    {
                        Console.WriteLine($"LoadAllDataAsync: No image found for CourseId {course.CourseId} in {imagesPath}");
                        course.ImageUrl = ""; // Ensure it's empty if no image is found
                    }
                } else {
                    course.ImageUrl = ""; // Ensure it's empty if CourseId is null/empty
                }
            }
        }

        Console.WriteLine("LoadAllDataAsync: Fetching topics, roles, and users...");
        topics = await CourseTopicApiService.GetAllAsync();
        roles = await RoleApiService.GetAllAsync();
        var allUsers = await UserApiService.GetAllAsync();

        var staffRoleIds = roles?.Where(r => r.RoleId.StartsWith("ST", StringComparison.OrdinalIgnoreCase)).Select(r => r.RoleId).ToList();
        staffUsers = allUsers?.Where(u => staffRoleIds != null && staffRoleIds.Contains(u.RoleId)).ToList();

        var consultantRoleIds = roles?.Where(r => r.RoleId.StartsWith("CS", StringComparison.OrdinalIgnoreCase) || r.RoleId.StartsWith("CO", StringComparison.OrdinalIgnoreCase)).Select(r => r.RoleId).ToList();
        consultantUsers = allUsers?.Where(u => consultantRoleIds != null && consultantRoleIds.Contains(u.RoleId)).ToList();
        Console.WriteLine("LoadAllDataAsync: Topics, roles, and users loaded.");
    }


    // Central method to apply all search, filter, and sort logic
    private void FilterAndSortCourses()
    {
        Console.WriteLine("FilterAndSortCourses: Applying filters and sort...");
        if (courses == null)
        {
            filteredCourses = new List<CourseDTO>();
            Console.WriteLine("FilterAndSortCourses: Courses list is null, setting filteredCourses to empty.");
            return;
        }

        IEnumerable<CourseDTO> query = courses;

        // Apply Search Term (Course Name, Topic Name, Staff Name, Consultant Name, Course ID, Description)
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var lowerSearchTerm = searchTerm.ToLower();
            query = query.Where(c =>
                (c.CourseName?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.Topic?.TopicName?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.Staff?.Username?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.Consultant?.Username?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.CourseId?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.Description?.ToLower().Contains(lowerSearchTerm) ?? false)
            );
            Console.WriteLine($"FilterAndSortCourses: Applied search term: '{searchTerm}'");
        }

        // Apply Topic Filter
        if (!string.IsNullOrWhiteSpace(selectedTopicId))
        {
            query = query.Where(c => c.TopicId == selectedTopicId);
            Console.WriteLine($"FilterAndSortCourses: Applied topic filter: '{selectedTopicId}'");
        }

        // Apply Staff Filter
        if (!string.IsNullOrWhiteSpace(selectedStaffId))
        {
            query = query.Where(c => c.StaffId == selectedStaffId);
            Console.WriteLine($"FilterAndSortCourses: Applied staff filter: '{selectedStaffId}'");
        }

        // Apply Consultant Filter
        if (!string.IsNullOrWhiteSpace(selectedConsultantId))
        {
            query = query.Where(c => c.ConsultantId == selectedConsultantId);
            Console.WriteLine($"FilterAndSortCourses: Applied consultant filter: '{selectedConsultantId}'");
        }

        // Apply Sorting
        switch (sortBy)
        {
            case "CourseName":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.CourseName, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(c => c.CourseName, StringComparer.OrdinalIgnoreCase);
                break;
            case "TopicName":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.Topic?.TopicName, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(c => c.Topic?.TopicName, StringComparer.OrdinalIgnoreCase);
                break;
            case "StaffName":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.Staff?.Username, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(c => c.Staff?.Username, StringComparer.OrdinalIgnoreCase);
                break;
            case "ConsultantName":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.Consultant?.Username, StringComparer.OrdinalIgnoreCase) :
                    query.OrderByDescending(c => c.Consultant?.Username, StringComparer.OrdinalIgnoreCase);
                break;
            case "CourseId":
                query = sortDirection == SortDirection.Ascending ?
                    query.OrderBy(c => c.CourseId) :
                    query.OrderByDescending(c => c.CourseId);
                break;
            default:
                query = query.OrderBy(c => c.CourseId);
                break;
        }

        filteredCourses = query.ToList();
        currentPage = 1; // Reset to first page after filtering/sorting
        Console.WriteLine($"FilterAndSortCourses: Filtered and sorted, {filteredCourses.Count} courses remaining. Reset to page 1.");
    }

    private void OnTopicFilterChanged(ChangeEventArgs e)
    {
        selectedTopicId = e.Value?.ToString() ?? string.Empty;
        Console.WriteLine($"OnTopicFilterChanged: New topic filter: {selectedTopicId}");
        FilterAndSortCourses();
    }

    private void OnStaffFilterChanged(ChangeEventArgs e)
    {
        selectedStaffId = e.Value?.ToString() ?? string.Empty;
        Console.WriteLine($"OnStaffFilterChanged: New staff filter: {selectedStaffId}");
        FilterAndSortCourses();
    }

    private void OnConsultantFilterChanged(ChangeEventArgs e)
    {
        selectedConsultantId = e.Value?.ToString() ?? string.Empty;
        Console.WriteLine($"OnConsultantFilterChanged: New consultant filter: {selectedConsultantId}");
        FilterAndSortCourses();
    }

    private void ToggleSortDirection()
    {
        sortDirection = sortDirection == SortDirection.Ascending ? SortDirection.Descending : SortDirection.Ascending;
        Console.WriteLine($"ToggleSortDirection: New sort direction: {sortDirection}");
        FilterAndSortCourses(); // Re-apply filter and sort with new direction
    }

    // Helper method to generate the next sequential CourseId
    private string GenerateNextCourseId()
    {
        var maxIdNum = 0;
        if (courses != null && courses.Any())
        {
            maxIdNum = courses
                .Select(c => {
                    if (c.CourseId != null && c.CourseId.StartsWith("C") && int.TryParse(c.CourseId.Substring(1), out var num))
                    {
                        return num;
                    }
                    return 0;
                })
                .DefaultIfEmpty(0)
                .Max();
        }
        string nextId = $"C{maxIdNum + 1:D4}";
        Console.WriteLine($"GenerateNextCourseId: Generated new CourseId: {nextId}");
        return nextId;
    }

    // Helper method to generate the next sequential TopicId (TP0000 format)
    private string GenerateNextTopicId()
    {
        var maxIdNum = 0;
        if (topics != null && topics.Any())
        {
            maxIdNum = topics
                .Select(t => {
                    if (t.TopicId != null && t.TopicId.StartsWith("TP") && int.TryParse(t.TopicId.Substring(2), out var num))
                    {
                        return num;
                    }
                    return 0;
                })
                .DefaultIfEmpty(0)
                .Max();
        }
        string nextId = $"TP{maxIdNum + 1:D4}";
        Console.WriteLine($"GenerateNextTopicId: Generated new TopicId: {nextId}");
        return nextId;
    }

    private void AddCourse()
    {
        Console.WriteLine("AddCourse: Initializing for new course creation.");
        validationMessage = string.Empty;
        showNewTopicInput = false;
        newTopicName = string.Empty;
        

        courseToEdit = new CourseDTO
        {
            CourseId = GenerateNextCourseId(),
            CourseName = "",
            CourseType = "Online",
            TopicId = "",
            StaffId = "",
            Description = "",
            ConsultantId = "",
            ImageUrl = "" // Ensure ImageUrl is reset
        };
        isNewCourse = true;
        showEditForm = true;
        Console.WriteLine($"AddCourse: New course ID set to {courseToEdit.CourseId}. Showing edit form.");
    }

    private void EditCourse(string courseId)
    {
        Console.WriteLine($"EditCourse: Attempting to edit course with ID: {courseId}");
        validationMessage = string.Empty;
        showNewTopicInput = false;
        newTopicName = string.Empty;
        

        var course = courses?.FirstOrDefault(c => c.CourseId == courseId);
        if (course != null)
        {
            courseToEdit = new CourseDTO
            {
                CourseId = course.CourseId,
                CourseName = course.CourseName,
                CourseType = course.CourseType,
                TopicId = course.TopicId,
                StaffId = course.StaffId,
                Description = course.Description,
                ConsultantId = course.ConsultantId,
                Topic = course.Topic,
                Staff = course.Staff,
                Consultant = course.Consultant,
                ImageUrl = course.ImageUrl // Load existing image URL
            };
            isNewCourse = false;
            showEditForm = true;
            Console.WriteLine($"EditCourse: Course '{course.CourseName}' loaded for editing. Current ImageUrl: {courseToEdit.ImageUrl}");
        }
        else
        {
            Console.WriteLine($"EditCourse: Course with ID {courseId} not found.");
        }
    }

    private void PromptAddNewTopic()
    {
        Console.WriteLine("PromptAddNewTopic: Displaying new topic input field.");
        showNewTopicInput = true;
        courseToEdit.TopicId = "";
        newTopicName = string.Empty;
        validationMessage = string.Empty;
    }

    private void CancelNewTopicInput()
    {
        Console.WriteLine("CancelNewTopicInput: Hiding new topic input field.");
        showNewTopicInput = false;
        newTopicName = string.Empty;
        validationMessage = string.Empty;
    }

    private async Task DeleteTopic(string topicIdToDelete)
    {
        Console.WriteLine($"DeleteTopic: Attempting to delete topic with ID: {topicIdToDelete}");
        if (string.IsNullOrWhiteSpace(topicIdToDelete))
        {
            validationMessage = "No topic selected for deletion.";
            Console.WriteLine("DeleteTopic: No topic ID provided for deletion.");
            return;
        }

        var topic = topics?.FirstOrDefault(t => t.TopicId == topicIdToDelete);
        if (topic == null)
        {
            validationMessage = "Topic not found.";
            Console.WriteLine($"DeleteTopic: Topic with ID {topicIdToDelete} not found.");
            return;
        }

        var coursesUsingTopic = courses?.Any(c => c.TopicId == topicIdToDelete) ?? false;
        if (coursesUsingTopic)
        {
            validationMessage = $"Cannot delete topic '{topic.TopicName}' because it is currently assigned to one or more courses. Please reassign courses first.";
            Console.WriteLine($"DeleteTopic: Topic '{topic.TopicName}' is in use by courses. Deletion prevented.");
            return;
        }

        // Use a custom modal or JS confirm for user confirmation instead of alert/confirm
        Console.WriteLine($"DeleteTopic: Prompting user for confirmation to delete topic '{topic.TopicName}'.");
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete topic '{topic.TopicName}' (ID: {topicIdToDelete})?");
        if (confirmed)
        {
            try
            {
                Console.WriteLine($"DeleteTopic: User confirmed deletion of topic '{topic.TopicName}'. Calling API...");
                var success = await CourseTopicApiService.DeleteAsync(topicIdToDelete);
                if (success)
                {
                    Console.WriteLine($"Topic '{topic.TopicName}' (ID: {topicIdToDelete}) deleted successfully.");
                    validationMessage = string.Empty;

                    await LoadAllDataAsync(); // Reload all data
                    FilterAndSortCourses();

                    if (courseToEdit.TopicId == topicIdToDelete)
                    {
                        courseToEdit.TopicId = "";
                        Console.WriteLine("DeleteTopic: Cleared selected topic in edit form as it was deleted.");
                    }
                }
                else
                {
                    validationMessage = $"Failed to delete topic '{topic.TopicName}'.";
                    Console.WriteLine($"DeleteTopic: API call to delete topic '{topic.TopicName}' failed.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"DeleteTopic: Error deleting topic: {ex.Message}");
                validationMessage = $"Error deleting topic: {ex.Message}";
            }
        }
        else
        {
            Console.WriteLine("DeleteTopic: User cancelled topic deletion.");
        }
    }

   

    private async Task SaveCourse()
    {
        Console.WriteLine("SaveCourse: Starting save process.");
        // Basic validation
        if (string.IsNullOrWhiteSpace(courseToEdit.CourseName))
        {
            validationMessage = "Course Name cannot be empty.";
            Console.WriteLine("SaveCourse: Validation failed - Course Name empty.");
            return;
        }
        if (showNewTopicInput)
        {
            if (string.IsNullOrWhiteSpace(newTopicName))
            {
                validationMessage = "New Topic Name cannot be empty.";
                Console.WriteLine("SaveCourse: Validation failed - New Topic Name empty.");
                return;
            }
            var existingTopic = topics?.FirstOrDefault(t => t.TopicName.Equals(newTopicName, StringComparison.OrdinalIgnoreCase));
            if (existingTopic != null)
            {
                validationMessage = $"Topic '{newTopicName}' already exists. Please select it from the dropdown or enter a different name.";
                Console.WriteLine($"SaveCourse: Validation failed - Topic '{newTopicName}' already exists.");
                return;
            }

            try
            {
                Console.WriteLine($"SaveCourse: Creating new topic '{newTopicName}'...");
                var newTopicId = GenerateNextTopicId();
                var newTopic = new CourseTopic { TopicId = newTopicId, TopicName = newTopicName };
                await CourseTopicApiService.CreateAsync(newTopic);
                courseToEdit.TopicId = newTopic.TopicId;
                await LoadAllDataAsync(); // Reload topics after new one is created
                showNewTopicInput = false;
                newTopicName = string.Empty;
                Console.WriteLine($"SaveCourse: New topic '{newTopic.TopicName}' created with ID: {newTopic.TopicId}. CourseToEdit.TopicId set.");
            }
            catch (Exception ex)
            {
                validationMessage = $"Error creating new topic: {ex.Message}";
                Console.WriteLine($"SaveCourse: Error creating new topic: {ex.Message}");
                return;
            }
        }
        else
        {
            if (string.IsNullOrWhiteSpace(courseToEdit.TopicId))
            {
                validationMessage = "Please select a Topic.";
                Console.WriteLine("SaveCourse: Validation failed - Topic not selected.");
                return;
            }
        }

        if (string.IsNullOrWhiteSpace(courseToEdit.StaffId))
        {
            validationMessage = "Please select a Staff.";
            Console.WriteLine("SaveCourse: Validation failed - Staff not selected.");
            return;
        }

        if (string.IsNullOrWhiteSpace(courseToEdit.Description))
        {
            validationMessage = "Description cannot be empty.";
            Console.WriteLine("SaveCourse: Validation failed - Description empty.");
            return;
        }

        if (string.IsNullOrWhiteSpace(courseToEdit.ConsultantId))
        {
            validationMessage = "Please select a Consultant.";
            Console.WriteLine("SaveCourse: Validation failed - Consultant not selected.");
            return;
        }

        validationMessage = string.Empty; // Clear validation message if all checks pass
        Console.WriteLine("SaveCourse: All validations passed.");

        try
        {
         

            if (isNewCourse)
            {
                Console.WriteLine($"SaveCourse: Creating new course '{courseToEdit.CourseName}' via API...");
                await CourseApiService.CreateAsync(courseToEdit);
                Console.WriteLine($"Course '{courseToEdit.CourseName}' created with ID: {courseToEdit.CourseId}");
            }
            else
            {
                Console.WriteLine($"SaveCourse: Updating existing course '{courseToEdit.CourseName}' via API...");
                await CourseApiService.UpdateAsync(courseToEdit);
                Console.WriteLine($"Course '{courseToEdit.CourseName}' updated.");
            }

            // Refresh data and reset form
            Console.WriteLine("SaveCourse: Reloading all data after save...");
            await LoadAllDataAsync(); // Reload all data including courses
            FilterAndSortCourses();
            showEditForm = false;
            GoToPage(1); // Go back to the first page
           
            Console.WriteLine("SaveCourse: Save process complete. Form reset.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SaveCourse: CRITICAL ERROR during save process: {ex.Message}");
            validationMessage = $"Error saving course: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        Console.WriteLine("CancelEdit: Cancelling edit/add operation.");
        validationMessage = string.Empty;
        showNewTopicInput = false;
        newTopicName = string.Empty;
      
        courseToEdit = new CourseDTO
        {
            CourseId = "",
            CourseName = "",
            CourseType = "Online",
            TopicId = "",
            StaffId = "",
            Description = "",
            ConsultantId = "",
            ImageUrl = "" // Ensure ImageUrl is reset
        };
        isNewCourse = false; // Ensure isNewCourse is reset on cancel
        showEditForm = false;
        Console.WriteLine("CancelEdit: Form reset and hidden.");
    }

    private async Task DeleteCourse(string courseId)
    {
        Console.WriteLine($"DeleteCourse: Attempting to delete course with ID: {courseId}");
        var courseToDelete = courses?.FirstOrDefault(c => c.CourseId == courseId);
        if (courseToDelete == null)
        {
            Console.WriteLine($"DeleteCourse: Course with ID {courseId} not found for deletion.");
            return;
        }

        // Use a custom modal or JS confirm for user confirmation instead of alert/confirm
        Console.WriteLine($"DeleteCourse: Prompting user for confirmation to delete course '{courseToDelete.CourseName}'.");
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete course '{courseToDelete.CourseName}' (ID: {courseId})?");
        if (confirmed)
        {
            try
            {
                Console.WriteLine($"DeleteCourse: User confirmed deletion of course '{courseToDelete.CourseName}'. Calling API...");
                var success = await CourseApiService.DeleteAsync(courseId);
                if (success)
                {
                    Console.WriteLine($"Course '{courseToDelete.CourseName}' (ID: {courseId}) deleted successfully.");
                  
                    Console.WriteLine("DeleteCourse: Reloading all data after deletion...");
                    await LoadAllDataAsync(); // Reload all data including courses
                    FilterAndSortCourses();
                    Console.WriteLine("DeleteCourse: Deletion process complete.");
                }
                else
                {
                    Console.WriteLine($"DeleteCourse: Failed to delete course '{courseToDelete.CourseName}'.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"DeleteCourse: Error deleting course: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("DeleteCourse: User cancelled course deletion.");
        }
    }

  
}
