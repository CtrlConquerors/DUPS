@* Assessment Management Main Page *@
@page "/Management/Assessment"
@using DUPSS.Web.Components.Service
@using DUPSS.API.Models.DTOs
@inject NavigationManager NavigationManager
@inject AssessmentApiService AssessmentApiService
@inject IJSRuntime JSRuntime

<div class="assessment-management-container">
    <h1>Assessment Management</h1>
    
    <div class="management-actions">
        <button @onclick="ShowCreateAssessmentForm">Create New Assessment</button>
        <button @onclick="RefreshAssessments">Refresh List</button>
    </div>

    @if (isLoading)
    {
        <div class="loading">
            <p>Loading assessments...</p>
        </div>
    }
    else if (hasError)
    {
        <div class="error">
            <p>Error loading assessments: @errorMessage</p>
            <button @onclick="RefreshAssessments">Retry</button>
        </div>
    }
    else
    {
        @if (showCreateForm)
        {
            <div class="create-form">
                <h3>Create New Assessment</h3>
                <form @onsubmit="CreateAssessment" @onsubmit:preventDefault="true">
                    <div class="form-group">
                        <label for="assessmentId">Assessment ID:</label>
                        <input id="assessmentId" @bind="newAssessment.AssessmentId" required />
                    </div>
                    <div class="form-group">
                        <label for="assessmentType">Assessment Type:</label>
                        <input id="assessmentType" @bind="newAssessment.AssessmentType" required />
                    </div>
                    <div class="form-group">
                        <label for="version">Version:</label>
                        <input id="version" @bind="newAssessment.Version" required />
                    </div>
                    <div class="form-group">
                        <label for="language">Language:</label>
                        <input id="language" @bind="newAssessment.Language" required />
                    </div>
                    <div class="form-group">
                        <label for="description">Description:</label>
                        <textarea id="description" @bind="newAssessment.Description"></textarea>
                    </div>
                    <div class="form-actions">
                        <button type="submit">Create Assessment</button>
                        <button type="button" @onclick="CancelCreate">Cancel</button>
                    </div>
                </form>
            </div>
        }

        <div class="assessments-list">
            <h3>Existing Assessments</h3>
            @if (assessments != null && assessments.Any())
            {
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Version</th>
                            <th>Language</th>
                            <th>Description</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var assessment in assessments)
                        {
                            <tr>
                                <td>@assessment.AssessmentId</td>
                                <td>@assessment.AssessmentType</td>
                                <td>@assessment.Version</td>
                                <td>@assessment.Language</td>
                                <td>@(assessment.Description ?? "No description")</td>
                                <td>
                                    <button @onclick="() => EditAssessment(assessment)">Edit</button>
                                    <button @onclick="() => ManageQuestions(assessment.AssessmentId)">Manage Questions</button>
                                    <button @onclick="() => DeleteAssessment(assessment.AssessmentId)" 
                                            @onclick:preventDefault="true">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No assessments found.</p>
            }
        </div>

        @if (showEditForm && editingAssessment != null)
        {
            <div class="edit-form">
                <h3>Edit Assessment</h3>
                <form @onsubmit="UpdateAssessment" @onsubmit:preventDefault="true">
                    <div class="form-group">
                        <label for="editAssessmentType">Assessment Type:</label>
                        <input id="editAssessmentType" @bind="editingAssessment.AssessmentType" required />
                    </div>
                    <div class="form-group">
                        <label for="editVersion">Version:</label>
                        <input id="editVersion" @bind="editingAssessment.Version" required />
                    </div>
                    <div class="form-group">
                        <label for="editLanguage">Language:</label>
                        <input id="editLanguage" @bind="editingAssessment.Language" required />
                    </div>
                    <div class="form-group">
                        <label for="editDescription">Description:</label>
                        <textarea id="editDescription" @bind="editingAssessment.Description"></textarea>
                    </div>
                    <div class="form-actions">
                        <button type="submit">Update Assessment</button>
                        <button type="button" @onclick="CancelEdit">Cancel</button>
                    </div>
                </form>
            </div>
        }
    }
</div>

@code {
    private List<AssessmentDTO>? assessments;
    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = "";
    private bool showCreateForm = false;
    private bool showEditForm = false;
    private AssessmentDTO newAssessment = new() { AssessmentId = "", AssessmentType = "", Version = "1.0", Language = "eng" };
    private AssessmentDTO? editingAssessment = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssessments();
    }

    private async Task LoadAssessments()
    {
        try
        {
            isLoading = true;
            hasError = false;
            assessments = await AssessmentApiService.GetAllAsync();
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowCreateAssessmentForm()
    {
        showCreateForm = true;
        showEditForm = false;
        newAssessment = new() { AssessmentId = "", AssessmentType = "", Version = "1.0", Language = "eng" };
    }

    private async Task CreateAssessment()
    {
        try
        {
            var assessment = new AssessmentDTO()
            {
                AssessmentId = newAssessment.AssessmentId,
                AssessmentType = newAssessment.AssessmentType,
                Version = newAssessment.Version,
                Language = newAssessment.Language,
                Description = newAssessment.Description
            };

            await AssessmentApiService.CreateAsync(assessment);
            await LoadAssessments();
            showCreateForm = false;
            await JSRuntime.InvokeVoidAsync("alert", "Assessment created successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating assessment: {ex.Message}");
        }
    }

    private void EditAssessment(AssessmentDTO assessment)
    {
        editingAssessment = new AssessmentDTO
        {
            AssessmentId = assessment.AssessmentId,
            AssessmentType = assessment.AssessmentType,
            Version = assessment.Version,
            Language = assessment.Language,
            Description = assessment.Description
        };
        showEditForm = true;
        showCreateForm = false;
    }

    private async Task UpdateAssessment()
    {
        try
        {
            if (editingAssessment != null)
            {
                var assessment = new AssessmentDTO
                {
                    AssessmentId = editingAssessment.AssessmentId,
                    AssessmentType = editingAssessment.AssessmentType,
                    Version = editingAssessment.Version,
                    Language = editingAssessment.Language,
                    Description = editingAssessment.Description
                };

                await AssessmentApiService.UpdateAsync(assessment);
                await LoadAssessments();
                showEditForm = false;
                editingAssessment = null;
                await JSRuntime.InvokeVoidAsync("alert", "Assessment updated successfully!");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating assessment: {ex.Message}");
        }
    }

    private async Task DeleteAssessment(string assessmentId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete assessment {assessmentId}?"))
        {
            try
            {
                await AssessmentApiService.DeleteAsync(assessmentId);
                await LoadAssessments();
                await JSRuntime.InvokeVoidAsync("alert", "Assessment deleted successfully!");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting assessment: {ex.Message}");
            }
        }
    }

    private void ManageQuestions(string assessmentId)
    {
        NavigationManager.NavigateTo($"/Management/Assessment/{assessmentId}/Questions/", forceLoad: true);
    }

    private async Task RefreshAssessments()
    {
        await LoadAssessments();
    }

    private void CancelCreate()
    {
        showCreateForm = false;
    }

    private void CancelEdit()
    {
        showEditForm = false;
        editingAssessment = null;
    }
}