@page "/Course"
@using DUPSS.API.Models.DTOs @* Ensure DTOs are used *@
@using DUPSS.Web.Components.Service
@inject NavigationManager NavigationManager
@inject CourseApiService CourseApiService
@inject IJSRuntime JSRuntime

<div class="course-page-container">
    <h1 class="page-title">Our Most Popular Courses</h1>
    <p class="page-subtitle">The sky was cloudless and of a deep dark blue the spectacle before us was indeed.</p>

    @if (courses == null)
    {
        <div class="loading-indicator">
            <p>Loading courses...</p>
            <div class="spinner"></div>
        </div>
    }
    else if (hasError)
    {
        <div class="error-message">
            <p>Oops! Something went wrong while loading courses. Please try again later.</p>
        </div>
    }
    else if (!courses.Any())
    {
        <div class="no-courses-message">
            <p>No courses available at the moment. Please check back later!</p>
        </div>
    }
    else
    {
        <div class="course-grid">
            @foreach (var course in showAllCourses ? courses : courses.Take(DefaultCourseDisplayLimit))
            {
                <div class="course-card">
                    <div class="card-image">
                        <img src="@(course.ImageUrl ?? "https://placehold.co/300x200/F0F0F0/000000?text=Course+Image")"
                             alt="Course Image" />
                    </div>
                    <div class="card-content">
                        <span class="course-category">@(course.Topic?.TopicName?.Trim() ?? "General")</span>
                        <h3 class="course-name">
                            <!-- This section was modified to make the course name clickable -->
                            <NavLink href="@($"CourseDetailPage/{course.CourseId}")">
                                @course.CourseName
                            </NavLink>
                        </h3>
                        <p class="course-type">
                            Type:
                            @switch (course.CourseType?.Trim()?.ToLower())
                            {
                                case "online":
                                    <span class="online-indicator" title="Online Course"></span>
                                    break;
                                case "hybrid":
                                    <span class="hybrid-indicator" title="Hybrid Course"></span>
                                    break;
                                case "offline":
                                    <span class="offline-indicator" title="Offline Course"></span>
                                    break;
                                default:
                                    break;
                            }
                            @course.CourseType
                        </p>
                    </div>
                </div>
            }
        </div>

        @if (courses.Count > DefaultCourseDisplayLimit && !showAllCourses)
        {
            <div class="main-explore-button-container">
                <button class="main-explore-button" @onclick="ToggleShowAllCourses" disabled="@(!_isHydrated)">
                    @(_isHydrated ? "Explore More" : "Loading...")
                </button>
            </div>
        }

        @if (showAllCourses)
        {
            <div class="main-explore-button-container">
                <button class="main-explore-button" @onclick="ToggleShowAllCourses">Show Less</button>
            </div>
        }
    }
</div>

<footer class="main-footer mt-10">
    <div class="container footer-content-wrapper ">
        <div class="footer-section footer-logo-section col-1">
            <img src="images/logo.png" alt="Logo" class="footer-logo" />
            <p class="footer-copyright">Copyright © ALPHA</p>
        </div>
        <div class="footer-section footer-info-section text-center col-2">
            <h5 class="footer-heading">OUR INFORMATION</h5>
            <p>Address: Phuoc Hiep</p>
            <p>Contact number: 090 538 4233</p>
            <p>Email: abcd@fgmail.com</p>
        </div>
    </div>
</footer>

@code {
    // Changed the type to CourseDTO to match the CourseApiService return type
    private List<CourseDTO>? courses;
    private bool hasError = false;
    private bool showAllCourses = false;
    private const int DefaultCourseDisplayLimit = 3;
    private bool _isHydrated = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            courses = await CourseApiService.GetAllAsync();
            Console.WriteLine($"Loaded {courses?.Count} courses.");
            hasError = false;
            Console.WriteLine($"Courses loaded: {courses?.Count ?? 0}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading courses: {ex.Message}");
            hasError = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isHydrated = true;
            Console.WriteLine("[Hydration] isHydrated: true");
            StateHasChanged(); // Trigger re-render to enable Explore button
            await Task.CompletedTask;
        }
    }

    private async Task ToggleShowAllCourses()
    {
        showAllCourses = !showAllCourses;
        Console.WriteLine($"ToggleShowAllCourses called. showAllCourses is now: {showAllCourses}");

        if (!showAllCourses)
        {
            await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        }
    }
}
