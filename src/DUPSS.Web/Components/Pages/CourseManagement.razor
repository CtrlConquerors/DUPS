@page "/CourseManagement"
@using DUPSS.Web.Components.Service
@inject NavigationManager NavigationManager
@inject CourseApiService CourseApiService
@inject CourseTopicApiService CourseTopicApiService
@inject RoleApiService RoleApiService
@inject UserApiService UserApiService
@* @inject CourseTopicApiService CourseTopicApiService
@inject UserApiService UserApiService *@

@inject IJSRuntime JS // Used for the confirm dialog, but a custom modal is recommended.

@* We can nest AuthorizeView but make sure to add Context to the innerAuthorizeView *@
@*Example below*@

        <div class="course-management-container">
            <div class="header-section">
                <h1 class="page-title">Course Management</h1>
                
                        <div class="actions">
                    <button class="add-course-button" @onclick="AddCourse">
                        <i class="bi bi-plus-circle"></i> ADD COURSE
                    </button>
                        </div>
               
                
            </div>
            <div class="filter-sort-section">
                <div class="search-input-container">
                    <input type="text" class="form-control" placeholder="Search by Course, Topic, Staff, ID"
                           @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterAndSortCourses" />
                </div>

                <div class="filter-dropdown-container">
                    <select class="form-select" @onchange="OnTopicFilterChanged">
                        <option value="">All Topics</option>
                        @if (topics != null)
                        {
                            @foreach (var topic in topics)
                            {
                                <option value="@topic.TopicId">@topic.TopicName</option>
                            }
                        }
                    </select>
                </div>

                <div class="filter-dropdown-container">
                    <select class="form-select" @onchange="OnStaffFilterChanged">
                        <option value="">All Staff</option>
                        @if (staffUsers != null)
                        {
                            @foreach (var staff in staffUsers)
                            {
                                <option value="@staff.UserId">@staff.Username</option>
                            }
                        }
                    </select>
                </div>

                @* NEW: Sort controls *@
                <div class="sort-controls">
                    <select class="form-select" @bind="sortBy" @bind:after="FilterAndSortCourses">
                        <option value="CourseId">Sort: Course ID</option>
                        <option value="CourseName">Sort: Course Name</option>
                        <option value="TopicName">Sort: Topic Name</option>
                        <option value="StaffName">Sort: Staff Name</option>
                    </select>
                    <button class="btn btn-outline-primary sort-direction-button" @onclick="ToggleSortDirection">
                        @if (sortDirection == SortDirection.Ascending)
                        {
                            <i class="bi bi-sort-alpha-down"></i>
                        }
                        else
                        {
                            <i class="bi bi-sort-alpha-down-alt"></i>
                        }
                    </button>
                </div>
            </div>

            @if (courses == null || topics == null || staffUsers == null || roles == null)
            {
                <div class="loading-indicator">Loading courses and related data...</div>
            }
            else if (hasError)
            {
                <div class="error-message">Error loading data. Please try again later.</div>
            }
            else if (!filteredCourses.Any())
            {
                <div class="no-data-message">No courses found matching your criteria.</div>
            }
            else
            {
                <div class="table-container">
                    <table class="course-table">
                        <thead>
                            <tr>
                                <th>No</th>
                                <th>Course ID</th>
                                <th>Course Name</th>
                                <th>Course Type</th>
                                <th>Topic Name</th>
                                <th>Staff Name</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int index = (currentPage - 1) * itemsPerPage + 1;
                            }
                            @foreach (var course in PaginatedCourses)
                            {
                                <tr>
                                    <td>@index</td>
                                    <td>@course.CourseId</td>
                                    <td>@course.CourseName</td>
                                    <td>
                                        @if (course.CourseType?.Equals("Online", StringComparison.OrdinalIgnoreCase) == true)
                                        {
                                            <span class="online-indicator" title="Online Course"></span>
                                        }
                                        else if (course.CourseType?.Equals("Offline", StringComparison.OrdinalIgnoreCase) == true)
                                {
                                    <span class="offline-indicator" title="Offline Course"></span>
                                }
                                else if (course.CourseType?.Equals("Hybrid", StringComparison.OrdinalIgnoreCase) == true)
                                {
                                    <span class="hybrid-indicator" title="Hybrid Course"></span>
                                }
                                        @course.CourseType
                                    </td>
                                    <td>@course.Topic?.TopicName</td>
                                    <td>@course.Staff?.Username</td>
                                    <td>
                                    
                                        <div class="action-buttons">
                                            <button class="btn btn-sm btn-primary me-2" @onclick="() => EditCourse(course.CourseId)">
                                                <i class="bi bi-three-dots-vertical"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteCourse(course.CourseId)">
                                                <i class="bi bi-trash3-fill"></i>
                                            </button>
                                        </div>
                                       
                                    </td>
                                </tr>
                                index++;
                            }
                        </tbody>
                    </table>
                </div>

                <div class="d-flex justify-content-center mt-3">
                    @for (int i = 1; i <= TotalPages; i++)
                    {
                        var pageIndex = i;
                        <button class="btn btn-outline-primary mx-1 @(pageIndex == currentPage ? "active" : "")"
                                @onclick="() => GoToPage(pageIndex)">
                            @pageIndex
                        </button>
                    }
                </div>
            }
            
                   
            @if (showEditForm)
            {
                <div class="card p-3 my-4 edit-form-card">
                    <h5>@(isNewCourse ? "Add New Course" : "Edit Course: " + courseToEdit.CourseName)</h5>

                    @* Validation Message Display *@
                    @if (!string.IsNullOrEmpty(validationMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @validationMessage
                        </div>
                    }

                    <div class="mb-3">
                        <label class="form-label">Course Name</label>
                        <input class="form-control" @bind="courseToEdit.CourseName" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Course Type</label>
                        <select class="form-select" @bind="courseToEdit.CourseType">                           
                            <option value="Online">Online</option>
                            <option value="Hybrid">Hybrid</option>
                            <option value="Offline">Offline</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Topic</label>
                        @* Conditional rendering for Topic input/select *@
                        @if (showNewTopicInput)
                        {
                            <input type="text" class="form-control" @bind="newTopicName" placeholder="Enter new topic name" />
                            <button class="btn btn-sm btn-outline-secondary mt-2" @onclick="CancelNewTopicInput">Cancel New Topic</button>
                        }
                        else
                        {
                            <select class="form-select" @bind="courseToEdit.TopicId">
                                <option value="">Select Topic</option>
                                @if (topics != null)
                                {
                                    @foreach (var topic in topics)
                                    {
                                        <option value="@topic.TopicId">@topic.TopicName</option>
                                    }
                                }
                            </select>
                            <div class="d-flex justify-content-between mt-2">
                                <button class="btn btn-sm btn-outline-info" @onclick="PromptAddNewTopic">Add New Topic</button>
                                @* Delete Topic button (visible if a topic is selected) *@
                                @if (!string.IsNullOrWhiteSpace(courseToEdit.TopicId))
                                {
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTopic(courseToEdit.TopicId)">Delete Selected Topic</button>
                                }
                            </div>
                        }
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Staff</label>
                        <select class="form-select" @bind="courseToEdit.StaffId">
                            <option value="">Select Staff</option>
                            @if (staffUsers != null)
                            {
                                @foreach (var staff in staffUsers)
                                {
                                    <option value="@staff.UserId">@staff.Username</option>
                                }
                            }
                        </select>
                    </div>

                    <div>
                        <button class="btn btn-success me-2" @onclick="SaveCourse">Save</button>
                        <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </div>
                </div>
            }
                
        </div>
 
      

@code {
    private List<DUPSS.API.Models.Objects.Course>? courses;
    private List<DUPSS.API.Models.Objects.CourseTopic>? topics;
    private List<DUPSS.API.Models.Objects.User>? staffUsers; // To hold users with 'Staff' role
    private List<DUPSS.API.Models.Objects.Role>? roles;
    private bool hasError = false;
    private int currentPage = 1;
    private int itemsPerPage = 8;
    private string validationMessage = string.Empty; // For validation messages

    // Search, Sort, Filter state
    private string searchTerm = string.Empty;
    private string selectedTopicId = string.Empty;
    private string selectedStaffId = string.Empty;
    private string sortBy = "CourseId"; // Default sort column is CourseId
    private SortDirection sortDirection = SortDirection.Ascending; // Default sort direction

    private enum SortDirection { Ascending, Descending }

    // For Add/Edit Form
    private DUPSS.API.Models.Objects.Course courseToEdit = new()
    {
        CourseId = "",
        CourseName = "",
        CourseType = "",
        TopicId = "",
        StaffId = ""
    };
    private bool showEditForm = false;
    private bool isNewCourse = false;
    private bool showNewTopicInput = false; // Controls visibility of new topic input
    private string newTopicName = string.Empty; // Binds to the new topic input field

    // Removed: showEditTopicInput, editingTopicId, editedTopicName

    // FIXED: Initialize filteredCourses to an empty list to prevent null reference errors
    private List<DUPSS.API.Models.Objects.Course> filteredCourses = new List<DUPSS.API.Models.Objects.Course>();

    private IEnumerable<DUPSS.API.Models.Objects.Course> PaginatedCourses =>
        filteredCourses?
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage) ?? Enumerable.Empty<DUPSS.API.Models.Objects.Course>();

    private int TotalPages => (int)Math.Ceiling((filteredCourses?.Count ?? 0) / (double)itemsPerPage);

    private void GoToPage(int page)
    {
        if (page < 1) page = 1;
        if (page > TotalPages) page = TotalPages;

        if (currentPage != page)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            courses = await CourseApiService.GetAllAsync();
            topics = await CourseTopicApiService.GetAllAsync();
            roles = await RoleApiService.GetAllAsync();
            var allUsers = await UserApiService.GetAllAsync();

            var staffRoleIds = roles?.Where(r => r.RoleId.StartsWith("ST")).Select(r => r.RoleId).ToList();
            staffUsers = allUsers?.Where(u => staffRoleIds != null && staffRoleIds.Contains(u.RoleId)).ToList();

            FilterAndSortCourses(); // Apply initial filter and sort
            hasError = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
            courses = new List<DUPSS.API.Models.Objects.Course>();
            // Ensure filteredCourses is also initialized in case of error
            filteredCourses = new List<DUPSS.API.Models.Objects.Course>();
            topics = new List<DUPSS.API.Models.Objects.CourseTopic>();
            staffUsers = new List<DUPSS.API.Models.Objects.User>();
            roles = new List<DUPSS.API.Models.Objects.Role>();
            hasError = true;
        }
    }

    // Central method to apply all search, filter, and sort logic
    private void FilterAndSortCourses()
    {
        if (courses == null)
        {
            filteredCourses = new List<DUPSS.API.Models.Objects.Course>(); // Ensure it's not null even if courses is null
            return;
        }

        IEnumerable<DUPSS.API.Models.Objects.Course> query = courses;

        // Apply Search Term (Course Name, Topic Name, Staff Name, Course ID)
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            string lowerSearchTerm = searchTerm.ToLower();
            query = query.Where(c =>
                (c.CourseName?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.Topic?.TopicName?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.Staff?.Username?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (c.CourseId?.ToLower().Contains(lowerSearchTerm) ?? false)
            );
        }

        // Apply Topic Filter
        if (!string.IsNullOrWhiteSpace(selectedTopicId))
        {
            query = query.Where(c => c.TopicId == selectedTopicId);
        }

        // Apply Staff Filter
        if (!string.IsNullOrWhiteSpace(selectedStaffId))
        {
            query = query.Where(c => c.StaffId == selectedStaffId);
        }

        // Apply Sorting
        switch (sortBy)
        {
            case "CourseName":
                query = sortDirection == SortDirection.Ascending ?
                        query.OrderBy(c => c.CourseName, StringComparer.OrdinalIgnoreCase) :
                        query.OrderByDescending(c => c.CourseName, StringComparer.OrdinalIgnoreCase);
                break;
            case "TopicName":
                query = sortDirection == SortDirection.Ascending ?
                        query.OrderBy(c => c.Topic?.TopicName, StringComparer.OrdinalIgnoreCase) :
                        query.OrderByDescending(c => c.Topic?.TopicName, StringComparer.OrdinalIgnoreCase);
                break;
            case "StaffName":
                query = sortDirection == SortDirection.Ascending ?
                        query.OrderBy(c => c.Staff?.Username, StringComparer.OrdinalIgnoreCase) :
                        query.OrderByDescending(c => c.Staff?.Username, StringComparer.OrdinalIgnoreCase);
                break;
            case "CourseId": // Sorting by CourseId
                query = sortDirection == SortDirection.Ascending ?
                        query.OrderBy(c => c.CourseId) :
                        query.OrderByDescending(c => c.CourseId);
                break;
            default:
                query = query.OrderBy(c => c.CourseId);
                break;
        }

        filteredCourses = query.ToList();
        currentPage = 1; // Reset to first page after filtering/sorting
    }

    private void OnTopicFilterChanged(ChangeEventArgs e)
    {
        selectedTopicId = e.Value?.ToString() ?? string.Empty;
        FilterAndSortCourses();
    }

    private void OnStaffFilterChanged(ChangeEventArgs e)
    {
        selectedStaffId = e.Value?.ToString() ?? string.Empty;
        FilterAndSortCourses();
    }

    private void ToggleSortDirection()
    {
        sortDirection = (sortDirection == SortDirection.Ascending) ? SortDirection.Descending : SortDirection.Ascending;
        FilterAndSortCourses(); // Re-apply filter and sort with new direction
    }

    // Helper method to generate the next sequential CourseId
    private string GenerateNextCourseId()
    {
        int maxIdNum = 0;
        if (courses != null && courses.Any())
        {
            // Find the maximum numeric part from existing CourseIds
            maxIdNum = courses
                .Select(c =>
                {
                    if (c.CourseId != null && c.CourseId.StartsWith("C") && int.TryParse(c.CourseId.Substring(1), out int num))
                    {
                        return num;
                    }
                    return 0; // Return 0 for invalid IDs
                })
                .DefaultIfEmpty(0) // Handle case where there are no valid "C" IDs
                .Max();
        }

        // Increment and format
        return $"C{(maxIdNum + 1):D4}"; // D4 formats to 4 digits, e.g., 1 -> 0001
    }

    // NEW: Helper method to generate the next sequential TopicId (TP0000 format)
    private string GenerateNextTopicId()
    {
        int maxIdNum = 0;
        if (topics != null && topics.Any())
        {
            maxIdNum = topics
                .Select(t =>
                {
                    if (t.TopicId != null && t.TopicId.StartsWith("TP") && int.TryParse(t.TopicId.Substring(2), out int num))
                    {
                        return num;
                    }
                    return 0;
                })
                .DefaultIfEmpty(0)
                .Max();
        }
        return $"TP{(maxIdNum + 1):D4}"; // D4 formats to 4 digits, e.g., 1 -> 0001
    }

    private void AddCourse()
    {
        validationMessage = string.Empty; // Clear previous validation messages
        showNewTopicInput = false; // Ensure new topic input is hidden by default for add
        // Removed: showEditTopicInput = false;
        newTopicName = string.Empty; // Clear new topic name
        // Removed: editedTopicName = string.Empty;
        courseToEdit = new DUPSS.API.Models.Objects.Course
        {
            CourseId = GenerateNextCourseId(),
            CourseName = "",
            CourseType = "Online",
            TopicId = "",
            StaffId = ""
        };
        isNewCourse = true;
        showEditForm = true;
    }

    private void EditCourse(string courseId)
    {
        validationMessage = string.Empty; // Clear previous validation messages
        showNewTopicInput = false; // Ensure new topic input is always hidden for edit
        // Removed: showEditTopicInput = false;
        newTopicName = string.Empty; // Clear new topic name
        // Removed: editedTopicName = string.Empty;
        var course = courses?.FirstOrDefault(c => c.CourseId == courseId);
        if (course != null)
        {
            courseToEdit = new DUPSS.API.Models.Objects.Course
            {
                CourseId = course.CourseId,
                CourseName = course.CourseName,
                CourseType = course.CourseType,
                TopicId = course.TopicId,
                StaffId = course.StaffId,
                Topic = course.Topic,
                Staff = course.Staff
            };
            isNewCourse = false;
            showEditForm = true;
        }
    }

    // NEW: Method to prompt for adding a new topic (now available for both add/edit)
    private void PromptAddNewTopic()
    {
        showNewTopicInput = true;
        // Removed: showEditTopicInput = false;
        courseToEdit.TopicId = ""; // Clear selected topic when switching to new topic input
        newTopicName = string.Empty; // Clear new topic name
        validationMessage = string.Empty; // Clear any previous validation messages
    }

    // NEW: Method to cancel adding a new topic and revert to dropdown
    private void CancelNewTopicInput()
    {
        showNewTopicInput = false;
        newTopicName = string.Empty;
        validationMessage = string.Empty; // Clear any previous validation messages
    }

    // Removed: EditTopic method
    // Removed: SaveEditedTopic method
    // Removed: CancelEditTopicInput method

    // NEW: Method to delete a topic
    private async Task DeleteTopic(string topicIdToDelete)
    {
        if (string.IsNullOrWhiteSpace(topicIdToDelete))
        {
            validationMessage = "No topic selected for deletion.";
            return;
        }

        var topic = topics?.FirstOrDefault(t => t.TopicId == topicIdToDelete);
        if (topic == null)
        {
            validationMessage = "Topic not found.";
            return;
        }

        // Check if any courses are associated with this topic
        var coursesUsingTopic = courses?.Any(c => c.TopicId == topicIdToDelete) ?? false;
        if (coursesUsingTopic)
        {
            validationMessage = $"Cannot delete topic '{topic.TopicName}' because it is currently assigned to one or more courses. Please reassign courses first.";
            return;
        }

        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete topic '{topic.TopicName}' (ID: {topicIdToDelete})?");
        if (confirmed)
        {
            try
            {
                var success = await CourseTopicApiService.DeleteAsync(topicIdToDelete);
                if (success)
                {
                    Console.WriteLine($"Topic '{topic.TopicName}' (ID: {topicIdToDelete}) deleted successfully.");
                    validationMessage = string.Empty; // Clear message on success

                    // Re-fetch topics and courses to update UI
                    topics = await CourseTopicApiService.GetAllAsync();
                    courses = await CourseApiService.GetAllAsync(); // Courses might have had this topic, so refresh all.
                    FilterAndSortCourses(); // Re-apply filters and sort

                    // If the deleted topic was the one currently selected in the form, clear it
                    if (courseToEdit.TopicId == topicIdToDelete)
                    {
                        courseToEdit.TopicId = "";
                    }
                }
                else
                {
                    validationMessage = $"Failed to delete topic '{topic.TopicName}'.";
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting topic: {ex.Message}");
                validationMessage = $"Error deleting topic: {ex.Message}";
            }
        }
    }

    private async Task SaveCourse()
    {
        // Validation checks
        if (string.IsNullOrWhiteSpace(courseToEdit.CourseName))
        {
            validationMessage = "Course Name cannot be empty.";
            return;
        }
        // If new topic input is active
        if (showNewTopicInput)
        {
            if (string.IsNullOrWhiteSpace(newTopicName))
            {
                validationMessage = "New Topic Name cannot be empty.";
                return;
            }
            // Check if topic already exists to prevent duplicates
            var existingTopic = topics?.FirstOrDefault(t => t.TopicName.Equals(newTopicName, StringComparison.OrdinalIgnoreCase));
            if (existingTopic != null)
            {
                validationMessage = $"Topic '{newTopicName}' already exists. Please select it from the dropdown or enter a different name.";
                return;
            }

            try
            {
                // Generate new topic ID
                string newTopicId = GenerateNextTopicId();
                var newTopic = new DUPSS.API.Models.Objects.CourseTopic { TopicId = newTopicId, TopicName = newTopicName };
                await CourseTopicApiService.CreateAsync(newTopic);
                courseToEdit.TopicId = newTopic.TopicId; // Set the new topic as selected for the course
                // Re-fetch topics to update dropdown for next time, and clear the new topic input state
                topics = await CourseTopicApiService.GetAllAsync();
                showNewTopicInput = false; // Revert to dropdown after successful new topic creation
                newTopicName = string.Empty; // Clear the input field
            }
            catch (Exception ex)
            {
                validationMessage = $"Error creating new topic: {ex.Message}";
                Console.WriteLine($"Error creating new topic: {ex.Message}");
                return; // Stop save process if topic creation fails
            }
        }
        else // If not adding a new topic (selecting existing)
        {
            // Only validate topic selection if not currently editing a topic
            // Removed: !showEditTopicInput condition
            if (string.IsNullOrWhiteSpace(courseToEdit.TopicId))
            {
                validationMessage = "Please select a Topic.";
                return;
            }
        }

        if (string.IsNullOrWhiteSpace(courseToEdit.StaffId))
        {
            validationMessage = "Please select a Staff.";
            return;
        }

        validationMessage = string.Empty; // Clear message if all validations pass

        try
        {
            if (isNewCourse)
            {
                await CourseApiService.CreateAsync(courseToEdit);
                Console.WriteLine($"Course '{courseToEdit.CourseName}' created with ID: {courseToEdit.CourseId}");
            }
            else
            {
                await CourseApiService.UpdateAsync(courseToEdit);
                Console.WriteLine($"Course '{courseToEdit.CourseName}' updated.");
            }

            courses = await CourseApiService.GetAllAsync();
            FilterAndSortCourses(); // Re-apply all logic after save
            showEditForm = false;
            GoToPage(1);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving course: {ex.Message}");
            validationMessage = $"Error saving course: {ex.Message}"; // Display error to user
        }
    }

    private void CancelEdit()
    {
        validationMessage = string.Empty; // Clear validation message on cancel
        showNewTopicInput = false; // Hide new topic input on cancel
        // Removed: showEditTopicInput = false;
        newTopicName = string.Empty; // Clear new topic name on cancel
        // Removed: editedTopicName = string.Empty;
        courseToEdit = new DUPSS.API.Models.Objects.Course
        {
            CourseId = "",
            CourseName = "",
            CourseType = "",
            TopicId = "",
            StaffId = ""
        };
        showEditForm = false;
    }

    private async Task DeleteCourse(string courseId)
    {
        var courseToDelete = courses?.FirstOrDefault(c => c.CourseId == courseId);
        if (courseToDelete == null)
        {
            Console.WriteLine($"Course with ID {courseId} not found for deletion.");
            return;
        }

        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete course '{courseToDelete.CourseName}' (ID: {courseId})?");
        if (confirmed)
        {
            try
            {
                var success = await CourseApiService.DeleteAsync(courseId);
                if (success)
                {
                    Console.WriteLine($"Course '{courseToDelete.CourseName}' (ID: {courseId}) deleted successfully.");
                    courses = await CourseApiService.GetAllAsync();
                    FilterAndSortCourses(); // Re-apply all logic after delete
                    GoToPage(1);
                }
                else
                {
                    Console.WriteLine($"Failed to delete course '{courseToDelete.CourseName}'.");
                }
            }
            catch (Exception ex)
                {
                    Console.WriteLine($"Error deleting course: {ex.Message}");
                }
            }
        }
    }