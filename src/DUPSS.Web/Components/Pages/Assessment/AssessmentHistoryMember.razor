@page "/Assessment/History"
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@inject AssessmentApiService AssessmentApiService
@inject AuthenticationStateProvider AuthProvider

<h2>My Assessment History</h2>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (hasError)
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (results == null || !results.Any())
{
    <p>No assessment history found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Assessment</th>
                <th>Score</th>
                <th>Recommendation</th>
                <th>Details</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var result in results)
            {
                <tr>
                    <td>@result.CompletedOn?.ToString("yyyy-MM-dd")</td>
                    <td>@result.AssessmentId</td>
                    <td>@result.TotalScore</td>
                    <td>@result.Recommendation</td>
                    <td>
                        <button class="btn btn-link" @onclick="() => ShowDetails(result)">View</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (selectedResult != null)
{
    <div class="modal show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Assessment Details</h5>
                    <button type="button" class="btn-close" @onclick="() => selectedResult = null"></button>
                </div>
                <div class="modal-body">
                    <p><strong>Assessment:</strong> @selectedResult.AssessmentId</p>
                    <p><strong>Date:</strong> @selectedResult.CompletedOn?.ToString("yyyy-MM-dd")</p>
                    <p><strong>Score:</strong> @selectedResult.TotalScore</p>
                    <p><strong>Recommendation:</strong> @selectedResult.Recommendation</p>
                    <p><strong>Details:</strong></p>
                    <pre>@selectedResult.ScoreDetails</pre>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<AssessmentResultDTO>? results;
    private AssessmentResultDTO? selectedResult;
    private bool isLoading = true;
    private bool hasError = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var memberId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(memberId))
            {
                hasError = true;
                errorMessage = "User not authenticated.";
                return;
            }

            results = await AssessmentApiService.GetResultsByMemberAsync(memberId);
        }
        catch (Exception ex)
        {
            hasError = true;
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowDetails(AssessmentResultDTO result)
    {
        selectedResult = result;
    }
}