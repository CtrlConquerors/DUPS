@page "/Assessment/Take/{AssessmentId}"
@using System.Security.Claims
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@inject AssessmentApiService AssessmentApiService
@inject AssessmentQuestionApiService AssessmentQuestionApiService
@inject AssessmentAnswerApiService AssessmentAnswerApiService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS

<div class="take-assessment-container">
    @if (isLoading)
    {
        <div class="loading-indicator">
            <div class="loading-content">
                <div class="spinner"></div>
                <p>Loading assessment...</p>
            </div>
        </div>
    }
    else if (hasError)
    {
        <div class="error-message">
            <div class="error-icon">⚠️</div>
            <h3>Unable to Load Assessment</h3>
            <p>@errorMessage</p>
            <div class="error-actions">
                <button class="retry-button" @onclick="RetryLoadAssessment">
                    <span class="button-icon">🔄</span>
                    Retry
                </button>
                <button class="back-button" @onclick="GoBackToAssessments">
                    <span class="button-icon">←</span>
                    Back to Assessments
                </button>
            </div>
        </div>
    }
    else if (assessment == null || !questions.Any())
    {
        <div class="no-content-message">
            <div class="no-content-icon">📋</div>
            <h3>Assessment Not Available</h3>
            <p>This assessment is currently not available or has no questions.</p>
            <button class="back-button" @onclick="GoBackToAssessments">
                <span class="button-icon">←</span>
                Back to Assessments
            </button>
        </div>
    }
    else if (showResults && assessmentResult != null)
    {
        <div class="results-container">
            <div class="results-header">
                <div class="results-icon">✅</div>
                <h2>Assessment Complete</h2>
                <h3>@assessment.AssessmentType Results</h3>
            </div>

            <div class="results-content">
                <div class="score-section">
                    <div class="score-display">
                        <span class="score-label">Total Score</span>
                        <span class="score-value">@assessmentResult.TotalScore</span>
                    </div>
                </div>

                <div class="recommendation-section">
                    <h4>Recommendation</h4>
                    <div class="recommendation-text">
                        @assessmentResult.Recommendation
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(assessmentResult.ScoreDetails))
                {
                    <div class="details-section">
                        <h4>Score Details</h4>
                        <div class="score-details">
                            @foreach (var detail in assessmentResult.ScoreDetails.Split(';'))
                            {
                                <div class="detail-item">@detail.Trim()</div>
                            }
                        </div>
                    </div>
                }

                <div class="completion-info">
                    <p><strong>Completed on:</strong> @assessmentResult.CompletedOn?.ToString("MMMM dd, yyyy")</p>
                </div>
            </div>

            <div class="results-actions">
                <button class="primary-button" @onclick="TakeAnotherAssessment">
                    <span class="button-icon">📋</span>
                    Take Another Assessment
                </button>
                <button class="secondary-button" @onclick="GoBackToAssessments">
                    <span class="button-icon">←</span>
                    Back to Assessments
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="assessment-header">
            <div class="assessment-info">
                <h1>@assessment.AssessmentType</h1>
                <p class="assessment-description">@assessment.Description</p>
            </div>

            <div class="progress-container">
                <div class="progress-info">
                    <span class="progress-text">Question @(currentQuestionIndex + 1) of @questions.Count</span>
                    <span
                        class="progress-percentage">@Math.Round(((double)(currentQuestionIndex + 1) / questions.Count) * 100, 0)%</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill"
                         style="width: @(((double)(currentQuestionIndex + 1) / questions.Count) * 100)%"></div>
                </div>
            </div>
        </div>

        <div class="question-container">
            <div class="question-card">
                <div class="question-header">
                    <h3>Question @(currentQuestionIndex + 1)</h3>
                </div>

                <div class="question-text">
                    @currentQuestion.Question
                </div>

                <div class="answers-container">
                    @switch (currentQuestion.QuestionType)
                    {
                        case "MultipleChoice":
                            @foreach (var answer in currentAnswers)
                            {
                                <div class="answer-option">
                                    <div class="answer-checkbox">
                                        <input type="checkbox"
                                               name="answer-@currentQuestion.QuestionId"
                                               value="@answer.AnswerId"
                                               checked="@(selectedAnswerIds.Contains(answer.AnswerId))"
                                               @onchange="() => ToggleAnswer(answer.AnswerId)"/>
                                        <span
                                            class="checkbox-checkmark @(selectedAnswerIds.Contains(answer.AnswerId) ? "selected" : "")"></span>
                                    </div>
                                    <div class="answer-content">
                                        <div class="answer-text">@answer.Answer</div>
                                        @if (!string.IsNullOrEmpty(answer.AnswerDetails))
                                        {
                                            <div class="answer-details">@answer.AnswerDetails</div>
                                        }
                                    </div>
                                </div>
                            }
                            break;

                        case "YesNo":
                            @foreach (var answer in currentAnswers)
                            {
                                <div class="answer-option">
                                    <div class="answer-radio">
                                        <input type="radio"
                                               name="answer-@currentQuestion.QuestionId"
                                               value="@answer.AnswerId"
                                               checked="@(selectedAnswerIds.Contains(answer.AnswerId))"
                                               @onchange="() => SelectSingleAnswer(answer.AnswerId)"/>
                                        <span
                                            class="radio-checkmark @(selectedAnswerIds.Contains(answer.AnswerId) ? "selected" : "")"></span>
                                    </div>
                                    <div class="answer-content">
                                        <div class="answer-text">@answer.Answer</div>
                                        @if (!string.IsNullOrEmpty(answer.AnswerDetails))
                                        {
                                            <div class="answer-details">@answer.AnswerDetails</div>
                                        }
                                    </div>
                                </div>
                            }
                            break;

                        case "Scale":
                            <div class="answer-option">
                                <div class="answer-scale">
                                    <input type="number"
                                           name="answer-@currentQuestion.QuestionId"
                                           min="1"
                                           max="10"
                                           value="@(answers.ContainsKey(currentQuestion.QuestionId + "_text") ? answers[currentQuestion.QuestionId + "_text"] : string.Empty)"
                                           @oninput="e => SaveAnswerOnInput(currentQuestion.QuestionId, e)" />
                                    <span class="scale-label"> (1 = Lowest, 10 = Highest)</span>
                                </div>
                            </div>
                            break;

                        case "Text":
                            <div class="answer-option">
                                <div class="answer-textarea">
                                    <textarea name="answer-@currentQuestion.QuestionId"
                                              value="@(answers.ContainsKey(currentQuestion.QuestionId + "_text") ? answers[currentQuestion.QuestionId + "_text"] : string.Empty)"
                                              @oninput="e => SaveAnswerOnInput(currentQuestion.QuestionId, e)"
                                              placeholder="Enter your answer here"></textarea>
                                </div>
                            </div>
                            break;
                    }
                </div>

                <div class="question-actions">
                    <button class="secondary-button"
                            @onclick="PreviousQuestion"
                            disabled="@(currentQuestionIndex == 0)">
                        <span class="button-icon">←</span>
                        Previous
                    </button>

                    @if (currentQuestionIndex < questions.Count - 1 && !stopAtFourthQuestion)
                    {
                        <button class="primary-button"
                                @onclick="NextQuestion"
                                disabled="@(!IsAnswerSelected())">
                            Next
                            <span class="button-icon">→</span>
                        </button>
                    }
                    else
                    {
                        <button class="submit-button"
                                @onclick="SubmitAssessment"
                                disabled="@(!IsAnswerSelected() || isSubmitting)">
                            @if (isSubmitting)
                            {
                                <span class="button-spinner"></span>
                                <span>Submitting...</span>
                            }
                            else
                            {
                                <span class="button-icon">✓</span>
                                <span>Submit Assessment</span>
                            }
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="assessment-footer">
            <button class="exit-button" @onclick="ConfirmExit">
                <span class="button-icon">×</span>
                Exit Assessment
            </button>
        </div>
    }
</div>

@if (showExitConfirmation)
{
    <div class="modal-overlay" @onclick="CancelExit">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Exit Assessment?</h3>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to exit this assessment? Your progress will be lost.</p>
            </div>
            <div class="modal-actions">
                <button class="secondary-button" @onclick="CancelExit">Cancel</button>
                <button class="danger-button" @onclick="ExitAssessment">Exit</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string AssessmentId { get; set; } = string.Empty;

    private AssessmentDTO? assessment;
    private List<AssessmentQuestionDTO> questions = new();
    private Dictionary<string, List<AssessmentAnswerDTO>> questionAnswers = new();
    private Dictionary<string, List<string>> userAnswers = new(); // QuestionId -> List<AnswerId> for MultipleChoice/YesNo, or text/scale value
    private AssessmentResultDTO? assessmentResult;

    private bool isLoading = true;
    private bool hasError = false;
    private bool isSubmitting = false;
    private bool showResults = false;
    private bool showExitConfirmation = false;
    private string errorMessage = string.Empty;
    private int currentQuestionIndex = 0;
    private List<string> selectedAnswerIds = new();
    private string? CurrentMemberId;

    private AssessmentQuestionDTO currentQuestion => questions[currentQuestionIndex];
    private List<AssessmentAnswerDTO> currentAnswers => questionAnswers.GetValueOrDefault(currentQuestion.QuestionId, new List<AssessmentAnswerDTO>());

    private Dictionary<string, string> answers = new();
    private bool stopAtFourthQuestion = false;
    private int earlyTextScore = 0;

    // private void SaveAnswerOnInput(string questionId, ChangeEventArgs e)
    // {
    //     if (e?.Value != null)
    //     {
    //         answers[questionId] = e.Value.ToString();
    //     }

    //     Check if the first 3 questions are text and answered with 0
    //     var firstThreeTextQuestions = questions.Take(3).ToList();
    //     bool allZero = true;
    //     earlyTextScore = 0;
    //     for (int i = 0; i < firstThreeTextQuestions.Count; i++)
    //     {
    //         var q = firstThreeTextQuestions[i];
    //         if (q.QuestionType == "Text")
    //         {
    //             if (answers.TryGetValue(q.QuestionId, out var val) && int.TryParse(val, out int num))
    //             {
    //                 if (num != 0)
    //                 {
    //                     earlyTextScore += 1;
    //                     allZero = false;
    //                 }
    //             }
    //             else
    //             {
    //                 allZero = false;
    //             }
    //         }
    //         else
    //         {
    //             allZero = false;
    //         }
    //     }
    //     if (allZero && questions.Count > 3)
    //     {
    //         currentQuestionIndex = 3; Move to 4th question (index 3)
    //         stopAtFourthQuestion = true;
    //         StateHasChanged();
    //     }
    // }

    private async Task SaveAnswerOnInput(string questionId, ChangeEventArgs e)
    {
        if (e?.Value != null)
        {
            string input = e.Value.ToString();
            if (currentQuestion.QuestionType == "Text")
            {
                if (!string.IsNullOrEmpty(input.Trim()))
                {
                    answers[questionId] = input; // Store input temporarily (will be replaced with AnswerId during submission)
                    userAnswers[questionId] = new List<string> { input }; // Store input temporarily in userAnswers
                    answers[questionId + "_text"] = input; // Store text input for display and early termination
                }
                else
                {
                    answers[questionId] = string.Empty;
                    userAnswers[questionId] = new List<string>();
                    answers[questionId + "_text"] = string.Empty;
                    await JS.InvokeVoidAsync("alert", "Please provide a non-empty answer.");
                }
            }
            else if (currentQuestion.QuestionType == "Scale")
            {
                if (int.TryParse(input, out int value) && value >= 1 && value <= 10)
                {
                    var answerDto = new AssessmentAnswerDTO
                    {
                        AnswerId = string.Empty,
                        QuestionId = questionId,
                        Answer = input,
                        AnswerDetails = null,
                        ScoreValue = value,
                        ScoreDescription = null
                    };
                    var createdAnswer = await AssessmentAnswerApiService.CreateAnswerAsync(answerDto);
                    if (createdAnswer != null)
                    {
                        answers[questionId] = createdAnswer.AnswerId; // Store AnswerId for submission
                        userAnswers[questionId] = new List<string> { createdAnswer.AnswerId }; // Store AnswerId for submission
                        answers[questionId + "_text"] = input; // Store input for display
                    }
                    else
                    {
                        answers[questionId] = string.Empty;
                        userAnswers[questionId] = new List<string>();
                        answers[questionId + "_text"] = string.Empty;
                        await JS.InvokeVoidAsync("alert", "Failed to save scale answer.");
                    }
                }
                else
                {
                    answers[questionId] = string.Empty;
                    userAnswers[questionId] = new List<string>();
                    answers[questionId + "_text"] = string.Empty;
                    await JS.InvokeVoidAsync("alert", "Please enter a number between 1 and 10.");
                }
            }
            else
            {
                answers[questionId] = input;
            }
        }
        else
        {
            answers[questionId] = string.Empty;
            userAnswers[questionId] = new List<string>();
            answers[questionId + "_text"] = string.Empty;
        }

        await SaveAnswersToLocalStorage();
        StateHasChanged();
    }
    private void NextQuestion()
    {
        if (stopAtFourthQuestion)
            return;

        if (currentQuestionIndex < questions.Count - 1 && IsAnswerSelected())
        {
            SaveCurrentAnswer();

            // Early termination logic
            if (questions.Count >= 4 && currentQuestionIndex < 3)
            {
                bool allTextAndZero = questions.Take(Math.Min(3, questions.Count)).All(q =>
                    q.QuestionType == "Text" &&
                    answers.TryGetValue(q.QuestionId + "_text", out var val) &&
                    val == "0");

                // Calculate earlyTextScore: 1 point for each non-zero Text answer
                earlyTextScore = 0;
                foreach (var q in questions.Take(Math.Min(3, questions.Count)))
                {
                    if (q.QuestionType == "Text" &&
                        answers.TryGetValue(q.QuestionId + "_text", out var val) &&
                        val != "0")
                    {
                        earlyTextScore += 1;
                    }
                }

                stopAtFourthQuestion = allTextAndZero;
                if (allTextAndZero && currentQuestionIndex == 2) // Check after third question
                {
                    currentQuestionIndex = 3; // Move to fourth question
                    StateHasChanged();
                    return;
                }
            }

            currentQuestionIndex++;
            LoadCurrentQuestionAnswers();
            StateHasChanged();
        }
    }
    private async Task SaveAnswersToLocalStorage()
    {
        var storageData = new Dictionary<string, List<string>>();
        foreach (var kvp in userAnswers)
        {
            storageData[kvp.Key] = kvp.Value;
        }
        foreach (var kvp in answers)
        {
            storageData[kvp.Key] = new List<string> { kvp.Value };
        }
        await JS.InvokeVoidAsync("localStorage.setItem", $"assessment_{AssessmentId}_answers", System.Text.Json.JsonSerializer.Serialize(storageData));
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAssessmentAsync();
    }

    private async Task LoadAssessmentAsync()
    {
        isLoading = true;
        hasError = false;
        errorMessage = string.Empty;

        try
        {
            Console.WriteLine($"Loading assessment with ID: {AssessmentId}");

            // Load assessment details
            assessment = await AssessmentApiService.GetByIdAsync(AssessmentId);
            if (assessment == null)
            {
                hasError = true;
                errorMessage = "Assessment not found.";
                return;
            }

            // Load all questions for this assessment
            var allQuestions = await AssessmentQuestionApiService.GetAllAsync();
            questions = allQuestions.Where(q => q.AssessmentId == AssessmentId).ToList();

            if (!questions.Any())
            {
                hasError = true;
                errorMessage = "No questions found for this assessment.";
                return;
            }

            // Load all answers and group by question
            var allAnswers = await AssessmentAnswerApiService.GetAllAsync();
            questionAnswers = allAnswers
                .Where(a => questions.Any(q => q.QuestionId == a.QuestionId))
                .GroupBy(a => a.QuestionId)
                .ToDictionary(g => g.Key, g => g.ToList());

            // Validate that all questions have answers for MultipleChoice and YesNo
            var questionsWithoutAnswers = questions
                .Where(q => (q.QuestionType == "MultipleChoice" || q.QuestionType == "YesNo") &&
                    (!questionAnswers.ContainsKey(q.QuestionId) || !questionAnswers[q.QuestionId].Any()))
                .ToList();
            if (questionsWithoutAnswers.Any())
            {
                hasError = true;
                errorMessage = $"Some questions are missing answer options: {string.Join(", ", questionsWithoutAnswers.Select(q => q.QuestionId))}";
                return;
            }

            // Initialize user answers dictionary
            foreach (var question in questions)
            {
                if (!userAnswers.ContainsKey(question.QuestionId))
                {
                    userAnswers[question.QuestionId] = new List<string>();
                }
            }

            // Initialize selected answers for first question
            LoadCurrentQuestionAnswers();

            Console.WriteLine($"Successfully loaded assessment with {questions.Count} questions");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assessment: {ex.Message}");
            hasError = true;
            errorMessage = $"Failed to load assessment: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void LoadCurrentQuestionAnswers()
    {
        selectedAnswerIds = userAnswers.ContainsKey(currentQuestion.QuestionId)
            ? new List<string>(userAnswers[currentQuestion.QuestionId])
            : new List<string>();
        answers[currentQuestion.QuestionId] = selectedAnswerIds.FirstOrDefault();
    }

    private void ToggleAnswer(string answerId)
    {
        if (selectedAnswerIds.Contains(answerId))
        {
            selectedAnswerIds.Remove(answerId);
        }
        else
        {
            selectedAnswerIds.Add(answerId);
        }
        userAnswers[currentQuestion.QuestionId] = new List<string>(selectedAnswerIds);
        StateHasChanged();
    }

    private void SelectSingleAnswer(string answerId)
    {
        selectedAnswerIds = new List<string> { answerId };
        userAnswers[currentQuestion.QuestionId] = new List<string> { answerId };
        StateHasChanged();
    }

    private bool IsAnswerSelected()
    {
        return currentQuestion.QuestionType switch
        {
            "MultipleChoice" => selectedAnswerIds.Any(),
            "YesNo" => selectedAnswerIds.Any(),
            "Scale" => userAnswers[currentQuestion.QuestionId].Any() &&
                       answers.ContainsKey(currentQuestion.QuestionId + "_text") &&
                       int.TryParse(answers[currentQuestion.QuestionId + "_text"], out int value) &&
                       value >= 1 && value <= 10,
            "Text" => userAnswers[currentQuestion.QuestionId].Any() &&
                      answers.ContainsKey(currentQuestion.QuestionId + "_text") &&
                      !string.IsNullOrEmpty(answers[currentQuestion.QuestionId + "_text"]),
            _ => false
        };
    }

    private void SaveCurrentAnswer()
    {
        if (currentQuestion.QuestionType == "Scale")
        {
            userAnswers[currentQuestion.QuestionId] = new List<string> { answers[currentQuestion.QuestionId] ?? "" };
        }
        else if (currentQuestion.QuestionType == "Text")
        {
            userAnswers[currentQuestion.QuestionId] = new List<string> { answers[currentQuestion.QuestionId + "_text"] ?? "" }; // Store text input
        }
        else
        {
            userAnswers[currentQuestion.QuestionId] = new List<string>(selectedAnswerIds);
        }
    }

    private async Task RetryLoadAssessment()
    {
        await LoadAssessmentAsync();
    }

    private void PreviousQuestion()
    {
        if (stopAtFourthQuestion)
            return;
        if (currentQuestionIndex > 0)
        {
            SaveCurrentAnswer();
            currentQuestionIndex--;
            LoadCurrentQuestionAnswers();
            StateHasChanged();
        }
    }

    // private async Task SubmitAssessment()
    // {
    //     if (!IsAnswerSelected() || isSubmitting)
    //         return;

    //     SaveCurrentAnswer();
    //     isSubmitting = true;
    //     StateHasChanged();

    //     try
    //     {
    //         if (string.IsNullOrEmpty(CurrentMemberId))
    //         {
    //             var authState = await AuthProvider.GetAuthenticationStateAsync();
    //             var user = authState.User;

    //             if (user.Identity?.IsAuthenticated == true)
    //             {
    //                 CurrentMemberId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value
    //                     ?? user.FindFirst("sub")?.Value
    //                     ?? user.FindFirst("MemberId")?.Value;
    //             }

    //             if (string.IsNullOrEmpty(CurrentMemberId))
    //             {
    //                 await JS.InvokeVoidAsync("alert", "Failed to retrieve Member ID. Please login again.");
    //                 NavigationManager.NavigateTo("/login");
    //                 return;
    //             }
    //         }

    //         Prepare submission data
    //         var submission = new AssessmentSubmissionDTO
    //         {
    //             MemberId = CurrentMemberId,
    //             Answers = userAnswers.SelectMany(kvp => kvp.Value.Select(answerId => new AnswerSubmissionDTO { AnswerId = answerId })).ToList()
    //         };

    //         Console.WriteLine($"Submitting assessment with {submission.Answers.Count} answers");

    //         Submit assessment
    //         assessmentResult = await AssessmentApiService.SubmitAssessmentAsync(AssessmentId, submission);

    //         if (assessmentResult != null)
    //         {
    //             showResults = true;
    //             Console.WriteLine($"Assessment submitted successfully. Score: {assessmentResult.TotalScore}");
    //         }
    //         else
    //         {
    //             hasError = true;
    //             errorMessage = "Failed to submit assessment. Please try again.";
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine($"Error submitting assessment: {ex.Message}");
    //         hasError = true;
    //         errorMessage = $"Failed to submit assessment: {ex.Message}";
    //     }
    //     finally
    //     {
    //         isSubmitting = false;
    //         StateHasChanged();
    //     }
    // }
    private async Task SubmitAssessment()
    {
        if (!IsAnswerSelected() || isSubmitting)
            return;

        SaveCurrentAnswer();
        isSubmitting = true;
        StateHasChanged();

        try
        {
            if (string.IsNullOrEmpty(CurrentMemberId))
            {
                var authState = await AuthProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity?.IsAuthenticated == true)
                {
                    CurrentMemberId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value
                        ?? user.FindFirst("sub")?.Value
                        ?? user.FindFirst("MemberId")?.Value;
                }

                if (string.IsNullOrEmpty(CurrentMemberId))
                {
                    await JS.InvokeVoidAsync("alert", "Failed to retrieve Member ID. Please login again.");
                    NavigationManager.NavigateTo("/login");
                    return;
                }
            }

            // Prepare submission data
            var submission = new AssessmentSubmissionDTO
            {
                MemberId = CurrentMemberId,
                Answers = new List<AnswerSubmissionDTO>(),
                TextAnswers = new List<TextAnswerSubmissionDTO>(),
                EarlyTextScore = earlyTextScore
            };

            // Process answers
            foreach (var kvp in userAnswers)
            {
                var question = questions.FirstOrDefault(q => q.QuestionId == kvp.Key);
                if (question == null) continue;

                if (question.QuestionType == "Text" && kvp.Value.Any() && !string.IsNullOrEmpty(kvp.Value[0]))
                {
                    // Add Text answer directly to TextAnswers
                    submission.TextAnswers.Add(new TextAnswerSubmissionDTO
                    {
                        QuestionId = kvp.Key,
                        Answer = kvp.Value[0]
                    });
                }
                else
                {
                    // For non-Text questions (Scale, MultipleChoice, YesNo)
                    foreach (var answerId in kvp.Value)
                    {
                        if (!string.IsNullOrEmpty(answerId))
                        {
                            submission.Answers.Add(new AnswerSubmissionDTO { AnswerId = answerId });
                        }
                    }
                }
            }

            Console.WriteLine($"Submitting assessment with {submission.Answers.Count} answers, {submission.TextAnswers.Count} text answers, EarlyTextScore: {submission.EarlyTextScore}");

            // Submit assessment
            assessmentResult = await AssessmentApiService.SubmitAssessmentAsync(AssessmentId, submission);

            if (assessmentResult != null)
            {
                showResults = true;
                Console.WriteLine($"Assessment submitted successfully. Score: {assessmentResult.TotalScore}");
                // Clear localStorage after successful submission
                await JS.InvokeVoidAsync("localStorage.removeItem", $"assessment_{AssessmentId}_answers");
            }
            else
            {
                hasError = true;
                errorMessage = "Failed to submit assessment. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting assessment: {ex.Message}");
            hasError = true;
            errorMessage = $"Failed to submit assessment: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }


    private void ConfirmExit()
    {
        showExitConfirmation = true;
        StateHasChanged();
    }

    private void CancelExit()
    {
        showExitConfirmation = false;
        StateHasChanged();
    }

    private void ExitAssessment()
    {
        NavigationManager.NavigateTo("/Assessment", forceLoad: true);
    }

    private void GoBackToAssessments()
    {
        NavigationManager.NavigateTo("/Assessment", forceLoad: true);
    }

    private void TakeAnotherAssessment()
    {
        NavigationManager.NavigateTo("/Assessment", forceLoad: true);
    }
}