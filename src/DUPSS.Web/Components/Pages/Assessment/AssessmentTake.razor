@page "/Assessment/Take/{AssessmentId}"
@using System.Security.Claims
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@inject AssessmentApiService AssessmentApiService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS

<div class="take-assessment-container">
    @if (isLoading)
    {
        <div class="loading-indicator">
            <div class="loading-content">
                <div class="spinner"></div>
                <p>Loading assessment...</p>
            </div>
        </div>
    }
    else if (hasError)
    {
        <div class="error-message">
            <div class="error-icon">⚠️</div>
            <h3>Unable to Load Assessment</h3>
            <p>@errorMessage</p>
            <div class="error-actions">
                <button class="retry-button" @onclick="RetryLoadAssessment">
                    <span class="button-icon">🔄</span>
                    Retry
                </button>
                <button class="back-button" @onclick="GoBackToAssessments">
                    <span class="button-icon">←</span>
                    Back to Assessments
                </button>
            </div>
        </div>
    }
    else if (assessment == null || !questions.Any())
    {
        <div class="no-content-message">
            <div class="no-content-icon">📋</div>
            <h3>Assessment Not Available</h3>
            <p>This assessment is currently not available or has no questions.</p>
            <button class="back-button" @onclick="GoBackToAssessments">
                <span class="button-icon">←</span>
                Back to Assessments
            </button>
        </div>
    }
    else if (showResults && assessmentResult != null)
    {
        <div class="results-container">
            <div class="results-header">
                <div class="results-icon">✅</div>
                <h2>Assessment Complete</h2>
                <h3>@assessment.AssessmentType Results</h3>
            </div>

            <div class="results-content">
                <div class="score-section">
                    <div class="score-display">
                        <span class="score-label">Total Score</span>
                        <span class="score-value">@assessmentResult.TotalScore</span>
                    </div>
                </div>

                <div class="recommendation-section">
                    <h4>Recommendations</h4>
                    <div class="recommendation-text">
                        @assessmentResult.Recommendation
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(assessmentResult.ScoreDetails))
                {
                    <div class="details-section">
                        <h4>Score Details</h4>
                        <div class="score-details">
                            @foreach (var (detail, index) in assessmentResult.ScoreDetails.Split(';').Select((value, i) => (value, i)))
                            {
                                <div class="detail-item">@ProcessAndReturnDetail(detail, index)</div>
                            }
                        </div>
                    </div>
                }

                <div class="completion-info">
                    <p><strong>Completed on:</strong> @assessmentResult.CompletedOn?.ToString("MMMM dd, yyyy")</p>
                </div>
            </div>

            <div class="results-actions">
                <button class="primary-button" @onclick="TakeAnotherAssessment">
                    <span class="button-icon">📋</span>
                    Take Another Assessment
                </button>
                <button class="secondary-button" @onclick="GoBackToAssessments">
                    <span class="button-icon">←</span>
                    Back to Assessments
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="assessment-header">
            <div class="assessment-info">
                <h1>@assessment.AssessmentType</h1>
                <p class="assessment-description">@assessment.Description</p>
                @if (AssessmentId == "ASSIST")
                {
                    <p class="substance-info">Current Section: @GetCurrentSubstance()</p>
                }
            </div>

            <div class="progress-container">
                <div class="progress-info">
                    <span class="progress-text">Question @(currentQuestionIndex + 1) of @questions.Count</span>
                    <span class="progress-percentage">@Math.Round(((double)(currentQuestionIndex + 1) / questions.Count) * 100, 0)%</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: @(((double)(currentQuestionIndex + 1) / questions.Count) * 100)%"></div>
                </div>
            </div>
        </div>

        <div class="question-container">
            <div class="question-card">
                <div class="question-header">
                    <h3>Question @(currentQuestionIndex + 1)</h3>
                </div>

                <div class="question-text">
                    @currentQuestion.Question
                </div>

                <div class="answers-container">
                    @switch (currentQuestion.QuestionType)
                    {
                        case "MultipleChoice":
                            @foreach (var answer in currentAnswers)
                            {
                                <div class="answer-option">
                                    <div class="answer-radio">
                                        <input type="radio"
                                               name="answer-@currentQuestion.QuestionId"
                                               value="@answer.AnswerId"
                                               checked="@(selectedAnswerIds.Contains(answer.AnswerId))"
                                               @onchange="() => SelectSingleAnswer(answer.AnswerId)"/>
                                        <span
                                            class="radio-checkmark @(selectedAnswerIds.Contains(answer.AnswerId) ? "selected" : "")"></span>
                                    </div>
                                    <div class="answer-content">
                                        <div class="answer-text">@answer.Answer</div>
                                        @if (!string.IsNullOrEmpty(answer.AnswerDetails))
                                        {
                                            <div class="answer-details">@answer.AnswerDetails</div>
                                        }
                                    </div>
                                </div>
                            }
                            break;
                        case "YesNo":
                            @foreach (var answer in currentAnswers)
                            {
                                <div class="answer-option">
                                    <div class="answer-radio">
                                        <input type="radio"
                                               name="answer-@currentQuestion.QuestionId"
                                               value="@answer.AnswerId"
                                               checked="@(selectedAnswerIds.Contains(answer.AnswerId))"
                                               @onchange="() => SelectSingleAnswer(answer.AnswerId)"/>
                                        <span
                                            class="radio-checkmark @(selectedAnswerIds.Contains(answer.AnswerId) ? "selected" : "")"></span>
                                    </div>
                                    <div class="answer-content">
                                        <div class="answer-text">@answer.Answer</div>
                                        @if (!string.IsNullOrEmpty(answer.AnswerDetails))
                                        {
                                            <div class="answer-details">@answer.AnswerDetails</div>
                                        }
                                    </div>
                                </div>
                            }
                            break;
                    }
                </div>

                <div class="question-actions">
                    <button class="secondary-button"
                            @onclick="PreviousQuestion"
                            disabled="@(currentQuestionIndex == 0)">
                        <span class="button-icon">←</span>
                        Previous
                    </button>

                    @if (currentQuestionIndex < questions.Count - 1)
                    {
                        <button class="primary-button"
                                @onclick="NextQuestion"
                                disabled="@(!IsAnswerSelected())">
                            Next
                            <span class="button-icon">→</span>
                        </button>
                    }
                    else
                    {
                        <button class="submit-button"
                                @onclick="SubmitAssessment"
                                disabled="@(!IsAnswerSelected() || isSubmitting)">
                            @if (isSubmitting)
                            {
                                <span class="button-spinner"></span>
                                <span>Submitting...</span>
                            }
                            else
                            {
                                <span class="button-icon">✓</span>
                                <span>Submit Assessment</span>
                            }
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="assessment-footer">
            <button class="exit-button" @onclick="ConfirmExit">
                <span class="button-icon">×</span>
                Exit Assessment
            </button>
        </div>
    }
</div>

@if (showExitConfirmation)
{
    <div class="modal-overlay" @onclick="CancelExit">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>Exit Assessment?</h3>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to exit this assessment? Your progress will be lost.</p>
            </div>
            <div class="modal-actions">
                <button class="secondary-button" @onclick="CancelExit">Cancel</button>
                <button class="danger-button" @onclick="ExitAssessment">Exit</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string AssessmentId { get; set; } = string.Empty;

    private AssessmentDTO? assessment;
    private List<AssessmentQuestionDTO> questions = new();
    private Dictionary<string, List<AssessmentAnswerDTO>> questionAnswers = new();
    private Dictionary<string, string> userAnswers = new(); // QuestionId -> AnswerId
    private AssessmentResultDTO? assessmentResult;

    private bool isLoading = true;
    private bool hasError = false;
    private bool isSubmitting = false;
    private bool showResults = false;
    private bool showExitConfirmation = false;
    private string errorMessage = string.Empty;
    private int currentQuestionIndex = 0;
    private List<string> selectedAnswerIds = new();
    private string? CurrentMemberId;

    private AssessmentQuestionDTO currentQuestion => questions[currentQuestionIndex];
    private List<AssessmentAnswerDTO> currentAnswers => questionAnswers.GetValueOrDefault(currentQuestion.QuestionId, new List<AssessmentAnswerDTO>());

    private readonly List<string> substances = new()
    {
        "Tobacco", "Alcohol", "Cannabis", "Cocaine", "Amphetamines",
        "Inhalants", "Sedatives", "Hallucinogens", "Opioids", "Other"
    };

    private string GetCurrentSubstance()
    {
        int substanceIndex = currentQuestionIndex / 8;
        return substances[substanceIndex];
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAssessmentAsync();
    }

    private async Task LoadAssessmentAsync()
    {
        isLoading = true;
        hasError = false;
        errorMessage = string.Empty;

        try
        {
            Console.WriteLine($"Loading assessment with ID: {AssessmentId}");

            // Load assessment metadata
            assessment = await AssessmentApiService.GetByIdAsync(AssessmentId);
            if (assessment == null)
            {
                hasError = true;
                errorMessage = "Assessment not found.";
                return;
            }

            // Load questions and answers
            if (AssessmentId == "ASSIST")
            {
                LoadAssistQuestions();
            }
            else if (AssessmentId == "CRAFFT")
            {
                LoadCrafftQuestions();
            }
            else
            {
                hasError = true;
                errorMessage = "Unsupported assessment type.";
                return;
            }

            if (!questions.Any())
            {
                hasError = true;
                errorMessage = "No questions defined for this assessment.";
                return;
            }

            // Initialize user answers with default "No" for Q1 to allow skipping
            foreach (var question in questions)
            {
                if (question.QuestionId.EndsWith("_Q1"))
                {
                    userAnswers[question.QuestionId] = $"{question.QuestionId}_NO";
                }
                else
                {
                    userAnswers[question.QuestionId] = string.Empty;
                }
            }

            LoadCurrentQuestionAnswers();
            Console.WriteLine($"Successfully loaded {assessment.AssessmentType} with {questions.Count} questions");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assessment: {ex.Message}");
            hasError = true;
            errorMessage = $"Failed to load assessment: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void LoadAssistQuestions()
    {
        questions = new List<AssessmentQuestionDTO>();
        questionAnswers = new Dictionary<string, List<AssessmentAnswerDTO>>();

        var frequencyAnswers = new List<AssessmentAnswerDTO>
        {
            new() { QuestionId = "ASSIST", AnswerId = "ASSIST_fA_0", Answer = "Never", ScoreValue = 0 },
            new() { QuestionId = "ASSIST", AnswerId = "ASSIST_fA_2", Answer = "Once or twice", ScoreValue = 2 },
            new() { QuestionId = "ASSIST", AnswerId = "ASSIST_fA_3", Answer = "Monthly", ScoreValue = 3 },
            new() { QuestionId = "ASSIST", AnswerId = "ASSIST_fA_4", Answer = "Weekly", ScoreValue = 4 },
            new() { QuestionId = "ASSIST", AnswerId = "ASSIST_fA_6", Answer = "Daily or almost daily", ScoreValue = 6 }
        };

        var yesNoAnswers = new List<AssessmentAnswerDTO>
        {
            new() { QuestionId = "ASSIST", AnswerId = "ASSIST_yNA_yes", Answer = "Yes", ScoreValue = 0 }, // Score set per question
            new() { QuestionId = "ASSIST", AnswerId = "ASSIST_yNA_no", Answer = "No", ScoreValue = 0 }
        };

        var injectionAnswers = new List<AssessmentAnswerDTO>
        {
            new() { QuestionId = "ASSIST", AnswerId = "ASSIST_iA_0", Answer = "Never", ScoreValue = 0 },
            new() { QuestionId = "ASSIST", AnswerId = "ASSIST_iA_6", Answer = "Yes, in the past 3 months", ScoreValue = 6 },
            new() { QuestionId = "ASSIST", AnswerId = "ASSIST_iA_3", Answer = "Yes, but not in the past 3 months", ScoreValue = 3 }
        };

        foreach (var substance in substances)
        {
            var substanceId = substance.ToUpper().Replace(" ", "_");
            var substanceQuestions = new List<AssessmentQuestionDTO>
            {
                new() { QuestionId = $"ASSIST_{substanceId}_Q1", AssessmentId = AssessmentId, Question = $"In your life, have you ever used {substance.ToLower()}?", QuestionType = "YesNo" },
                new() { QuestionId = $"ASSIST_{substanceId}_Q2", AssessmentId = AssessmentId, Question = $"In the past 3 months, how often have you used {substance.ToLower()}?", QuestionType = "MultipleChoice" },
                new() { QuestionId = $"ASSIST_{substanceId}_Q3", AssessmentId = AssessmentId, Question = $"In the past 3 months, how often have you had a strong desire or urge to use {substance.ToLower()}?", QuestionType = "MultipleChoice" },
                new() { QuestionId = $"ASSIST_{substanceId}_Q4", AssessmentId = AssessmentId, Question = $"In the past 3 months, how often has {substance.ToLower()} use led to health, social, legal, or financial problems?", QuestionType = "MultipleChoice" },
                new() { QuestionId = $"ASSIST_{substanceId}_Q5", AssessmentId = AssessmentId, Question = $"In the past 3 months, how often have you failed to do what was normally expected of you because of {substance.ToLower()}?", QuestionType = "MultipleChoice" },
                new() { QuestionId = $"ASSIST_{substanceId}_Q6", AssessmentId = AssessmentId, Question = $"Has a friend or relative or anyone else ever expressed concern about your use of {substance.ToLower()}?", QuestionType = "YesNo" },
                new() { QuestionId = $"ASSIST_{substanceId}_Q7", AssessmentId = AssessmentId, Question = $"Have you ever tried and failed to control, cut down, or stop using {substance.ToLower()}?", QuestionType = "YesNo" },
                new() { QuestionId = $"ASSIST_{substanceId}_Q8", AssessmentId = AssessmentId, Question = $"Have you ever used {substance.ToLower()} by injection?", QuestionType = "MultipleChoice" }
            };

            questions.AddRange(substanceQuestions);

            questionAnswers[$"ASSIST_{substanceId}_Q1"] = yesNoAnswers.Select(a => new AssessmentAnswerDTO
            {
                AnswerId = $"ASSIST_{substanceId}_Q1_{a.Answer.ToUpper()}",
                QuestionId = $"ASSIST_{substanceId}_Q1",
                Answer = a.Answer,
                ScoreValue = a.ScoreValue
            }).ToList();

            for (int i = 2; i <= 5; i++)
            {
                questionAnswers[$"ASSIST_{substanceId}_Q{i}"] = frequencyAnswers.Select(a => new AssessmentAnswerDTO
                {
                    AnswerId = $"ASSIST_{substanceId}_Q{i}_{a.Answer.ToUpper().Replace(" ", "_")}",
                    QuestionId = $"ASSIST_{substanceId}_Q{i}",
                    Answer = a.Answer,
                    ScoreValue = a.ScoreValue
                }).ToList();
            }

            questionAnswers[$"ASSIST_{substanceId}_Q6"] = yesNoAnswers.Select(a => new AssessmentAnswerDTO
            {
                AnswerId = $"ASSIST_{substanceId}_Q6_{a.Answer.ToUpper()}",
                QuestionId = $"ASSIST_{substanceId}_Q6",
                Answer = a.Answer,
                ScoreValue = a.Answer == "Yes" ? 7 : 0
            }).ToList();

            questionAnswers[$"ASSIST_{substanceId}_Q7"] = yesNoAnswers.Select(a => new AssessmentAnswerDTO
            {
                AnswerId = $"ASSIST_{substanceId}_Q7_{a.Answer.ToUpper()}",
                QuestionId = $"ASSIST_{substanceId}_Q7",
                Answer = a.Answer,
                ScoreValue = a.Answer == "Yes" ? 4 : 0
            }).ToList();

            questionAnswers[$"ASSIST_{substanceId}_Q8"] = injectionAnswers.Select(a => new AssessmentAnswerDTO
            {
                AnswerId = $"ASSIST_{substanceId}_Q8_{a.Answer.ToUpper().Replace(" ", "_").Replace(",", "")}",
                QuestionId = $"ASSIST_{substanceId}_Q8",
                Answer = a.Answer,
                ScoreValue = a.ScoreValue
            }).ToList();
        }

        Console.WriteLine($"Loaded ASSIST questions: {questions.Count} total, {questionAnswers.Count} question-answer sets");
    }

    private void LoadCrafftQuestions()
    {
        questions = new List<AssessmentQuestionDTO>
        {
            new() { QuestionId = "CRAFFT_Q1", AssessmentId = AssessmentId, Question = "Have you ever ridden in a CAR driven by someone (including yourself) who was high or had been using alcohol or drugs?", QuestionType = "YesNo" },
            new() { QuestionId = "CRAFFT_Q2", AssessmentId = AssessmentId, Question = "Do you ever use alcohol or drugs to RELAX, feel better about yourself, or fit in?", QuestionType = "YesNo" },
            new() { QuestionId = "CRAFFT_Q3", AssessmentId = AssessmentId, Question = "Do you ever use alcohol or drugs while you are by yourself, ALONE?", QuestionType = "YesNo" },
            new() { QuestionId = "CRAFFT_Q4", AssessmentId = AssessmentId, Question = "Do you ever FORGET things you did while using alcohol or drugs?", QuestionType = "YesNo" },
            new() { QuestionId = "CRAFFT_Q5", AssessmentId = AssessmentId, Question = "Do your family or FRIENDS ever tell you that you should cut down on your drinking or drug use?", QuestionType = "YesNo" },
            new() { QuestionId = "CRAFFT_Q6", AssessmentId = AssessmentId, Question = "Have you ever gotten into TROUBLE while you were using alcohol or drugs?", QuestionType = "YesNo" }
        };

        questionAnswers = new Dictionary<string, List<AssessmentAnswerDTO>>
        {
            {
                "CRAFFT_Q1", new List<AssessmentAnswerDTO>
                {
                    new() { AnswerId = "CRAFFT_Q1_YES", QuestionId = "CRAFFT_Q1", Answer = "Yes", ScoreValue = 1 },
                    new() { AnswerId = "CRAFFT_Q1_NO", QuestionId = "CRAFFT_Q1", Answer = "No", ScoreValue = 0 }
                }
            },
            {
                "CRAFFT_Q2", new List<AssessmentAnswerDTO>
                {
                    new() { AnswerId = "CRAFFT_Q2_YES", QuestionId = "CRAFFT_Q2", Answer = "Yes", ScoreValue = 1 },
                    new() { AnswerId = "CRAFFT_Q2_NO", QuestionId = "CRAFFT_Q2", Answer = "No", ScoreValue = 0 }
                }
            },
            {
                "CRAFFT_Q3", new List<AssessmentAnswerDTO>
                {
                    new() { AnswerId = "CRAFFT_Q3_YES", QuestionId = "CRAFFT_Q3", Answer = "Yes", ScoreValue = 1 },
                    new() { AnswerId = "CRAFFT_Q3_NO", QuestionId = "CRAFFT_Q3", Answer = "No", ScoreValue = 0 }
                }
            },
            {
                "CRAFFT_Q4", new List<AssessmentAnswerDTO>
                {
                    new() { AnswerId = "CRAFFT_Q4_YES", QuestionId = "CRAFFT_Q4", Answer = "Yes", ScoreValue = 1 },
                    new() { AnswerId = "CRAFFT_Q4_NO", QuestionId = "CRAFFT_Q4", Answer = "No", ScoreValue = 0 }
                }
            },
            {
                "CRAFFT_Q5", new List<AssessmentAnswerDTO>
                {
                    new() { AnswerId = "CRAFFT_Q5_YES", QuestionId = "CRAFFT_Q5", Answer = "Yes", ScoreValue = 1 },
                    new() { AnswerId = "CRAFFT_Q5_NO", QuestionId = "CRAFFT_Q5", Answer = "No", ScoreValue = 0 }
                }
            },
            {
                "CRAFFT_Q6", new List<AssessmentAnswerDTO>
                {
                    new() { AnswerId = "CRAFFT_Q6_YES", QuestionId = "CRAFFT_Q6", Answer = "Yes", ScoreValue = 1 },
                    new() { AnswerId = "CRAFFT_Q6_NO", QuestionId = "CRAFFT_Q6", Answer = "No", ScoreValue = 0 }
                }
            }
        };
    }

    private void LoadCurrentQuestionAnswers()
    {
        selectedAnswerIds = userAnswers.ContainsKey(currentQuestion.QuestionId) && !string.IsNullOrEmpty(userAnswers[currentQuestion.QuestionId])
            ? new List<string> { userAnswers[currentQuestion.QuestionId] }
            : new List<string>();
    }

    private void SelectSingleAnswer(string answerId)
    {
        selectedAnswerIds = new List<string> { answerId };
        userAnswers[currentQuestion.QuestionId] = answerId;

        // If Q1 is "No", auto-set "No"/"Never" for Q2–Q8 of the same substance
        if (AssessmentId == "ASSIST" && currentQuestion.QuestionId.EndsWith("_Q1") && answerId.EndsWith("_NO"))
        {
            var substanceId = currentQuestion.QuestionId.Split('_')[1];
            for (int i = 2; i <= 7; i++)
            {
                userAnswers[$"ASSIST_{substanceId}_Q{i}"] = $"ASSIST_{substanceId}_Q{i}_NO";
            }
            userAnswers[$"ASSIST_{substanceId}_Q8"] = $"ASSIST_{substanceId}_Q8_NEVER";
        }

        StateHasChanged();
    }

    private bool IsAnswerSelected()
    {
        return userAnswers.ContainsKey(currentQuestion.QuestionId) && !string.IsNullOrEmpty(userAnswers[currentQuestion.QuestionId]);
    }

    private void SaveCurrentAnswer()
    {
        userAnswers[currentQuestion.QuestionId] = selectedAnswerIds.FirstOrDefault() ?? string.Empty;
    }

    private void NextQuestion()
    {
        if (currentQuestionIndex >= questions.Count - 1 || !IsAnswerSelected())
            return;
        SaveCurrentAnswer();

        // Skip Q2–Q8 if Q1 is "No" for the current substance
        if (AssessmentId == "ASSIST" && currentQuestion.QuestionId.EndsWith("_Q1") && userAnswers[currentQuestion.QuestionId].EndsWith("_NO"))
        {
            int substanceIndex = currentQuestionIndex / 8;
            currentQuestionIndex = (substanceIndex + 1) * 8 - 1; // Move to last question of current substance
            // Ensure index doesn't exceed bounds
            if (currentQuestionIndex >= questions.Count)
            {
                currentQuestionIndex = questions.Count - 1;
            }
        }

        currentQuestionIndex++;
        // Final bounds check
        if (currentQuestionIndex >= questions.Count)
        {
            currentQuestionIndex = questions.Count - 1;
        }

        LoadCurrentQuestionAnswers();
        StateHasChanged();
    }

    private void PreviousQuestion()
    {
        if (currentQuestionIndex <= 0)
            return;
        SaveCurrentAnswer();

        if (AssessmentId == "ASSIST" && currentQuestion.QuestionId.EndsWith("_Q1") && userAnswers[currentQuestion.QuestionId].EndsWith("_NO"))
        {   
            int substanceIndex = currentQuestionIndex / 8;
            if (substanceIndex > 0)
            {
                currentQuestionIndex = ((substanceIndex - 1) * 8) + 7; // Move to Q8 of previous substance
            }
            else
            {
                currentQuestionIndex = 0; // Stay at first question if at first substance
            }
        }
        else
        {
            currentQuestionIndex--; // Normal single-step decrement
        }

        LoadCurrentQuestionAnswers();
        StateHasChanged();
    }

    private async Task SubmitAssessment()
    {
        if (!IsAnswerSelected() || isSubmitting)
            return;

        SaveCurrentAnswer();
        isSubmitting = true;
        StateHasChanged();

        try
        {
            if (string.IsNullOrEmpty(CurrentMemberId))
            {
                var authState = await AuthProvider.GetAuthenticationStateAsync();
                var user = authState.User;

                if (user.Identity?.IsAuthenticated == true)
                {
                    CurrentMemberId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value
                        ?? user.FindFirst("sub")?.Value
                        ?? user.FindFirst("MemberId")?.Value;
                }

                if (string.IsNullOrEmpty(CurrentMemberId))
                {
                    await JS.InvokeVoidAsync("alert", "Failed to retrieve Member ID. Please login again.");
                    NavigationManager.NavigateTo("/login");
                    return;
                }
            }

            // Calculate scores and recommendations per substance
            var substanceScores = new Dictionary<string, int>();
            var scoreDetails = new List<string>();
            var recommendations = new List<string>();
            int totalScore = 0;

            if (AssessmentId == "ASSIST")
            {
                foreach (var substance in substances)
                {
                    var substanceId = substance.ToUpper().Replace(" ", "_");
                    if (userAnswers[$"ASSIST_{substanceId}_Q1"] == $"ASSIST_{substanceId}_Q1_NO")
                    {
                        substanceScores[substance] = 0;
                        scoreDetails.Add($"{substance}: No use reported");
                        recommendations.Add($"{substance}: No intervention needed.");
                        continue;
                    }

                    int substanceScore = 0;
                    var substanceDetails = new List<string>();

                    for (int i = 2; i <= 8; i++)
                    {
                        var questionId = $"ASSIST_{substanceId}_Q{i}";
                        if (userAnswers.TryGetValue(questionId, out var answerId) && !string.IsNullOrEmpty(answerId))
                        {
                            var answer = questionAnswers[questionId].FirstOrDefault(a => a.AnswerId == answerId);
                            if (answer != null)
                            {
                                substanceScore += answer.ScoreValue;
                                substanceDetails.Add($"Q{i}:{answer.Answer}");
                            }
                        }
                    }

                    substanceScores[substance] = substanceScore;
                    totalScore += substanceScore;
                    scoreDetails.Add($"{substance}: Score={substanceScore}; {string.Join(", ", substanceDetails)}");

                    var substanceRecommendation = substanceScore switch
                    {
                        <= 10 => "Low risk: Brief education recommended. Please consider discussing your use with a healthcare provider.",
                        <= 26 => "Moderate risk: Brief intervention recommended. Please consider discussing your use with a healthcare provider.",
                        _ => "High risk: Referral to treatment recommended. Please contact a healthcare provider."
                    };
                    recommendations.Add($"{substance}: {substanceRecommendation}");
                }
            }
            else if (AssessmentId == "CRAFFT")
            {
                foreach (var question in questions)
                {
                    if (userAnswers.TryGetValue(question.QuestionId, out var answerId) && !string.IsNullOrEmpty(answerId))
                    {
                        var answer = questionAnswers[question.QuestionId].FirstOrDefault(a => a.AnswerId == answerId);
                        if (answer != null)
                        {
                            totalScore += answer.ScoreValue;
                            scoreDetails.Add($"{question.QuestionId}:{answer.Answer}");
                        }
                    }
                }
                recommendations.Add(totalScore >= 2
                    ? "Score ≥ 2: Further assessment recommended. Please contact a healthcare provider."
                    : "Score < 2: No further action needed.");
            }

            // Prepare submission
            var submission = new AssessmentSubmissionDTO
            {
                MemberId = CurrentMemberId,
                Answers = new List<AnswerSubmissionDTO>(),
                TextAnswers = new List<TextAnswerSubmissionDTO>(),
                EarlyTextScore = 0
            };

            foreach (var question in questions)
            {
                if (userAnswers.TryGetValue(question.QuestionId, out var answerId) && !string.IsNullOrEmpty(answerId))
                {
                    submission.Answers.Add(new AnswerSubmissionDTO { AnswerId = answerId });
                }
            }

            Console.WriteLine($"Submitting assessment with {submission.Answers.Count} answers, Total Score: {totalScore}, Details: {string.Join(";", scoreDetails)}");

            // Create AssessmentResultDTO
            assessmentResult = new AssessmentResultDTO
            {
                ResultId = Guid.NewGuid().ToString(),
                AssessmentId = AssessmentId,
                MemberId = CurrentMemberId,
                TotalScore = totalScore,
                ScoreDetails = string.Join(";", scoreDetails),
                Recommendation = string.Join(" ", recommendations),
                CompletedOn = DateOnly.FromDateTime(DateTime.Now)
            };

            // Submit to API
            var result = await AssessmentApiService.SubmitAssessmentAsync(AssessmentId, submission);
            if (result != null)
            {
                showResults = true;
                Console.WriteLine($"Assessment submitted successfully. Total Score: {totalScore}, Substances Scored: {string.Join(", ", substanceScores.Select(s => $"{s.Key}: {s.Value}"))}");
            }
            else
            {
                hasError = true;
                errorMessage = "Failed to submit assessment. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting assessment: {ex.Message}");
            hasError = true;
            errorMessage = $"Failed to submit assessment: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task RetryLoadAssessment()
    {
        await LoadAssessmentAsync();
    }

    private string ProcessAndReturnDetail(string detail, int index)
    {
        var trimmedDetail = detail.Trim();
        if (!string.IsNullOrEmpty(trimmedDetail) && trimmedDetail.Contains(':'))
        {
            return trimmedDetail;
        }
        else
        {
            return $"Detail {index + 1}: {trimmedDetail}";
        }
    }

    private void ConfirmExit()
    {
        showExitConfirmation = true;
        StateHasChanged();
    }

    private void CancelExit()
    {
        showExitConfirmation = false;
        StateHasChanged();
    }

    private void ExitAssessment()
    {
        NavigationManager.NavigateTo("/Assessment", forceLoad: true);
    }

    private void GoBackToAssessments()
    {
        NavigationManager.NavigateTo("/Assessment", forceLoad: true);
    }

    private void TakeAnotherAssessment()
    {
        NavigationManager.NavigateTo("/Assessment", forceLoad: true);
    }
}