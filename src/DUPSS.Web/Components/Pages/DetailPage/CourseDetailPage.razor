@page "/CourseDetailPage/{CourseId}"
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@inject CourseApiService CourseApiService
@inject CourseEnrollApiService CourseEnrollApiService
@inject UserApiService UserApiService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [StreamRendering]

<div class="course-detail-container">
    @if (coursePageData == null && !hasError)
    {
        <div class="loading-indicator">
            <p>Loading course information...</p>
            <div class="spinner"></div>
        </div>
    }
    else if (hasError)
    {
        <div class="error-message">
            <p>Oops! Something went wrong while loading the course. Please try again later.</p>
            <button class="btn btn-primary mt-3" @onclick="GoBackToCourses">Back to Courses</button>
        </div>
    }
    else if (coursePageData?.Course == null)
    {
        <div class="no-course-message">
            <p>No course found with the given ID. Please check the URL or try again.</p>
            <button class="btn btn-primary mt-3" @onclick="GoBackToCourses">Back to Courses</button>
        </div>
    }
    else
    {
        <div class="course-layout-grid">
            <div class="course-content-column">
                <h1 class="course-detail-title">@coursePageData.Course.CourseName</h1>
                <p class="course-detail-subtitle">
                    @(coursePageData.Course.Description ?? "A detailed description for this course will be added soon.")
                </p>

                <div class="course-meta">
                    <span class="course-topic-badge">@coursePageData.Course.Topic?.TopicName</span>
                  
                    <span class="course-type-display @(GetCourseTypeClass(coursePageData.Course.CourseType))">
                        @switch (coursePageData.Course.CourseType?.Trim()?.ToLower())
                        {
                            case "online":
                                <span class="online-indicator" title="Online Course"></span>
                                break;
                            case "hybrid":
                                <span class="hybrid-indicator" title="Hybrid Course"></span>
                                break;
                            case "offline":
                                <span class="offline-indicator" title="Offline Course"></span>
                                break;
                            default:
                                break;
                        }
                        @coursePageData.Course.CourseType
                    </span>
                   
                </div>

                <div class="instructor-info">
                    <img src="@(coursePageData.Instructor?.ImageUrl ?? $"https://placehold.co/40x40/95a5a6/ffffff?text={(coursePageData.Instructor?.Username?.FirstOrDefault().ToString() ?? "C")}")"
                         alt="Consultant Avatar" class="instructor-avatar-small" />
                    <span class="instructor-text">Consultant: <span class="instructor-name-link">@coursePageData.Instructor?.Username</span></span>
                </div>

                @* Conditional button rendering: Enroll Now or Go to Course *@
                @if (!isEnrolledSuccessfully)
                {
                    <button class="enroll-button" @onclick="EnrollNow" disabled="@isEnrolling">
                        @if (isEnrolling)
                        {
                            <span>
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                Loading...
                            </span>
                        }
                        else
                        {
                            <span>Enroll Now</span>
                        }
                    </button>
                }
                else
                {
                    <button class="enroll-button go-to-course-button" @onclick="GoToCourseContent">
                        Go to Course
                    </button>
                }

                @* Enrollment message display *@
                @if (!string.IsNullOrEmpty(enrollmentMessage))
                {
                    <div class="@enrollmentMessageClass mt-3">@enrollmentMessage</div>
                }

                
            </div> @* End of course-content-column *@

            <div class="course-image-column">
                @* Right column for the course picture *@
                <img src="@(coursePageData.Course.ImageUrl ?? "https://placehold.co/400x300/F0F0F0/000000?text=Course+Image")"
                     alt="Course Decorative Image" class="course-decorative-image" />
            </div>
        </div> @* End of course-layout-grid *@
    }
</div>

@code {
@using System.Security.Claims

    [Parameter]
public string CourseId { get; set; } = string.Empty;

private CoursePageData? coursePageData;
private List<CourseEnrollDTO>? allEnrollments;
private List<UserDTO>? allMembers;
private bool hasError = false;
private bool isEnrolling = false;
private bool isEnrolledSuccessfully = false;
private string enrollmentMessage = string.Empty;
private string enrollmentMessageClass = string.Empty;
private string? currentLoggedInUserId;

protected override async Task OnParametersSetAsync()
{
    if (string.IsNullOrWhiteSpace(CourseId))
    {
        hasError = false;
        coursePageData = new CoursePageData { Course = null, Instructor = null };
        return;
    }

    coursePageData = null;
    hasError = false;
    enrollmentMessage = string.Empty;
    isEnrolledSuccessfully = false;

    try
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        currentLoggedInUserId = null;
        if (user.Identity?.IsAuthenticated == true)
        {
            currentLoggedInUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(currentLoggedInUserId))
            {
                Console.WriteLine("Warning: Authenticated user has no NameIdentifier claim for UserId.");
            }
        }

        var fetchedCourseTask = CourseApiService.GetByIdAsync(CourseId);
        var allEnrollmentsTask = CourseEnrollApiService.GetAllAsync();
        var allUsersTask = UserApiService.GetAllAsync();

        await Task.WhenAll(fetchedCourseTask, allEnrollmentsTask, allUsersTask);

        var fetchedCourse = fetchedCourseTask.Result;
        allEnrollments = allEnrollmentsTask.Result;
        allMembers = allUsersTask.Result?.Where(u => u.RoleId.StartsWith("ME", StringComparison.OrdinalIgnoreCase)).ToList();

        if (fetchedCourse != null && fetchedCourse.Consultant != null)
        {
            coursePageData = new CoursePageData
            {
                Course = fetchedCourse,
                Description = fetchedCourse.Description ?? "A detailed description for this course will be added soon.",
                Instructor = fetchedCourse.Consultant
            };

            if (!string.IsNullOrEmpty(currentLoggedInUserId))
            {
                var existingEnrollment = allEnrollments?.FirstOrDefault(e =>
                    e.MemberId == currentLoggedInUserId && e.CourseId == fetchedCourse.CourseId);
                if (existingEnrollment != null)
                {
                    isEnrolledSuccessfully = true;
                    enrollmentMessage = "You are already enrolled in this course.";
                    enrollmentMessageClass = "alert-info";
                }
            }
        }
        else
        {
            Console.WriteLine($"Course with ID {CourseId} not found or Consultant data missing.");
            coursePageData = new CoursePageData { Course = null, Instructor = null };
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error loading course details for ID {CourseId}: {ex.Message}");
        hasError = true;
        coursePageData = null;
    }
}

private async Task EnrollNow()
{
    if (coursePageData?.Course == null)
    {
        await ShowMessage("Error", "Cannot enroll. Invalid course information.", "alert-danger");
        return;
    }

    if (string.IsNullOrEmpty(currentLoggedInUserId))
    {
        await ShowMessage("Authorization Required", "Please log in as a member to enroll in courses.", "alert-danger");
        return;
    }

    isEnrolling = true;
    enrollmentMessage = string.Empty;
    StateHasChanged();

    try
    {
        var existingEnroll = await CourseEnrollApiService.GetEnrollmentsByMemberAndCourse(currentLoggedInUserId, coursePageData.Course.CourseId);
        if (existingEnroll != null && existingEnroll.Any())
        {
            await ShowMessage("Enrollment Failed", "You are already enrolled in this course.", "alert-warning");
            isEnrolledSuccessfully = true;
            return;
        }

        var newEnrollment = new CourseEnrollDTO
        {
            EnrollId = GenerateNextEnrollmentId(),
            MemberId = currentLoggedInUserId,
            CourseId = coursePageData.Course.CourseId,
            Status = "Enrolled",
            EnrollDate = DateOnly.FromDateTime(DateTime.Today),
            CompleteDate = null
        };

        await CourseEnrollApiService.CreateAsync(newEnrollment);
        isEnrolledSuccessfully = true;
        await ShowMessage("Enrollment Success", $"You have successfully enrolled in '{coursePageData.Course.CourseName}'!", "alert-success");
        Console.WriteLine($"Successful enrollment in course {newEnrollment.CourseId} for member {newEnrollment.MemberId} with Enroll ID {newEnrollment.EnrollId}");

        await Task.Delay(2000);
        NavigationManager.NavigateTo("/Management/CourseEnroll");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error enrolling in course: {ex.Message}");
        await ShowMessage("Enrollment Error", $"Failed to enroll in course: {ex.Message}", "alert-danger");
    }
    finally
    {
        isEnrolling = false;
        StateHasChanged();
    }
}

private string GenerateNextEnrollmentId()
{
    var maxIdNum = 0;
    if (allEnrollments != null && allEnrollments.Any())
    {
        maxIdNum = allEnrollments
            .Select(e =>
            {
                if (e.EnrollId != null && e.EnrollId.StartsWith("CE") && int.TryParse(e.EnrollId.Substring(2), out var num))
                {
                    return num;
                }
                return 0;
            })
            .DefaultIfEmpty(0)
            .Max();
    }
    return $"CE{maxIdNum + 1:D4}";
}

private async Task ShowMessage(string title, string message, string cssClass)
{
    enrollmentMessage = message;
    enrollmentMessageClass = cssClass;
    await JSRuntime.InvokeVoidAsync("console.log", $"{title}: {message}");
    StateHasChanged();
    await Task.Delay(5000);
    enrollmentMessage = string.Empty;
    StateHasChanged();
}

private void GoBackToCourses()
{
    NavigationManager.NavigateTo("/Course");
}

private void GoToCourseContent()
{
    if (coursePageData?.Course?.CourseId != null)
    {
        NavigationManager.NavigateTo($"/MyCourses/{coursePageData.Course.CourseId}");
        Console.WriteLine($"Navigating to course content for Course ID: {coursePageData.Course.CourseId}");
    }
    else
    {
        Console.WriteLine("Cannot navigate to course content: Course ID is missing.");
        JSRuntime.InvokeVoidAsync("alert", "Course content not available.");
    }
}

private string GetCourseTypeClass(string courseType)
{
    return courseType?.ToLower() switch
    {
        "online" => "course-type-online",
        "hybrid" => "course-type-hybrid",
        "offline" => "course-type-offline",
        _ => ""
    };
}

public class CoursePageData
{
    public CourseDTO? Course { get; set; }
    public string Description { get; set; } = string.Empty;
    public UserDTO? Instructor { get; set; }
}
}
