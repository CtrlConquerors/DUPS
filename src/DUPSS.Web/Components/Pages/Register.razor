@page "/register"
@using DUPSS.Object
@using DUPSS.AccessLayer.Interfaces
@using Supabase
@inject IUserDAO UserDAO
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="text-center mb-4">Create Your Account</h3>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                    <EditForm Model="@user" OnValidSubmit="HandleRegister">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="mb-3">
                            <label class="form-label">Username <span class="text-danger">*</span></label>
                            <InputText @bind-Value="user.Username" class="form-control" placeholder="Enter your username" />
                            <ValidationMessage For="@(() => user.Username)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Date of Birth</label>
                            <InputDate @bind-Value="DoB" class="form-control" />
                            <ValidationMessage For="@(() => DoB)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <InputText @bind-Value="user.PhoneNumber" class="form-control" placeholder="Enter your phone number" />
                            <ValidationMessage For="@(() => user.PhoneNumber)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email <span class="text-danger">*</span></label>
                            <InputText @bind-Value="user.Email" class="form-control" placeholder="Enter your email" />
                            <ValidationMessage For="@(() => user.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password <span class="text-danger">*</span></label>
                            <InputText type="password" @bind-Value="password" class="form-control" placeholder="Enter your password" />
                            <ValidationMessage For="@(() => password)" class="text-danger" />
                        </div>

                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-primary">Register</button>
                        </div>

                        <div class="text-center">
                            <NavLink href="/login" class="btn btn-link">Already have an account? Login</NavLink>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private User user = new User
    {
        UserId = "",
        Username = "",
        Email = "",
        RoleId = "ME" // Force new registered user to be Member
    };
    private string password = "";
    private DateTime? DoB
    {
        get => user.DoB.HasValue ? user.DoB.Value.ToDateTime(new TimeOnly(0, 0)) : null;
        set => user.DoB = value.HasValue ? DateOnly.FromDateTime(value.Value) : null;
    }
    private string errorMessage = "";

    private async Task HandleRegister()
    {
        try
        {
            // Validate required fields
            if (string.IsNullOrEmpty(user.Username) || string.IsNullOrEmpty(user.Email) || string.IsNullOrEmpty(password))
            {
                errorMessage = "Username, email, and password are required.";
                return;
            }

            // Register user with Supabase Auth
            var response = await SupabaseClient.Auth.SignUp(user.Email, password);
            if (response!.User == null)
            {
                errorMessage = $"Registration failed: {response}";
                return;
            }

            // Set UserId to Supabase's UUID
            user.UserId = response.User.Id!;

            // Add user to User table
            await UserDAO.CreateAsync(user, password);

            // Clear error message and redirect to login
            errorMessage = "";
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while registering: {ex.Message}";
        }
    }
}