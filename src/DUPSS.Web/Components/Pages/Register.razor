@page "/register"
@using DUPSS.API.Models.Common
@using DUPSS.API.Models.Objects
@using DUPSS.Web.Components.Service
@inject UserApiService UserApiService
@inject RoleApiService RoleApiService
@inject NavigationManager NavigationManager

<div class="register-container">
    <div class="register-card">
        <div class="register-header">
            <img src="images/logo.png" alt="ALPHA Logo" class="register-logo"/>
            <h2>ALPHA Sign Up</h2>
        </div>
        <form class="register-form" @onsubmit="HandleRegister">
            <div class="form-group">
                <label for="username">Username <span class="text-danger">*</span></label>
                <input id="username" type="text" class="form-control" @bind="newUser.Username"
                       placeholder="Enter your username" required/>
            </div>
            <div class="form-group">
                <label for="email">Email <span class="text-danger">*</span></label>
                <input id="email" type="email" class="form-control" @bind="newUser.Email" placeholder="Enter your email"
                       required/>
            </div>
            <div class="form-group">
                <label for="password">Password <span class="text-danger">*</span></label>
                <input id="password" type="password" class="form-control" @bind="password"
                       placeholder="Enter your password" required/>
            </div>
            <div class="form-group">
                <label for="phoneNumber">Phone Number</label>
                <input id="phoneNumber" type="tel" class="form-control" @bind="newUser.PhoneNumber"
                       placeholder="Enter your phone number"/>
            </div>
            <div class="form-group">
                <label for="dob">Date of Birth</label>
                <input id="dob" type="date" class="form-control" @bind="newUser.DoB"/>
            </div>
            <div class="form-group">
                <label for="role">Role <span class="text-danger">*</span></label>
                <select id="role" class="form-select" @bind="newUser.RoleId" required>
                    <option value="">Select Role</option>
                    @foreach (var role in availableRoles)
                    {
                        <option value="@role.RoleId">@role.RoleName</option>
                    }
                </select>
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            <button type="submit" class="btn btn-primary register-btn">Sign Up</button>
        </form>
        <div class="register-footer">
            <p>Already have an account? <a href="/login">Log in</a></p>
        </div>
    </div>
</div>

@code {
    private User newUser = new() { UserId = "", Username = "", Email = "", RoleId = "", PasswordHash = "Placeholer" };
    private string password = string.Empty;
    private List<Role> availableRoles = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            availableRoles = await RoleApiService.GetAllAsync() ?? new List<Role>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load roles: {ex.Message}";
        }
    }

    private async Task HandleRegister()
    {
        errorMessage = null;
        if (string.IsNullOrEmpty(newUser.Username) || string.IsNullOrEmpty(newUser.Email) ||
        string.IsNullOrEmpty(password) || string.IsNullOrEmpty(newUser.RoleId))
        {
            errorMessage = "Username, email, password, and role are required.";
            return;
        }

        try
        {
            newUser.PasswordHash = "placeholder";

            Console.WriteLine($"Registering user: {newUser.Username}, Email: {newUser.Email}, RoleId: {newUser.RoleId}");
            Console.WriteLine($"Password: {password}");
            var createdUser = await UserApiService.CreateAsync(new CreateUserRequest
            {
                User = newUser,
                Password = password
            });

            if (createdUser != null)
            {
                NavigationManager.NavigateTo("/login", forceLoad: false);
            }
            else
            {
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Registration failed: {ex.Message}";
        }
    }
}