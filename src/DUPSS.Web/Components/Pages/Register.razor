@page "/register"
@using DUPSS.API.Models.Common
@using DUPSS.API.Models.DTOs
@using DUPSS.API.Models.Objects
@using DUPSS.Web.Components.Service
@using Microsoft.AspNetCore.Components.Forms
@inject AuthApiService AuthApiService
@inject RoleApiService RoleApiService
@inject NavigationManager NavigationManager
<div class="background-view"></div>
<div class="register-container">
    <div class="register-card">
        <div class="register-header">
            <img src="images/logo.png" alt="ALPHA Logo" class="register-logo" />
            <h2>ALPHA Sign Up</h2>
        </div>
        <form class="register-form" @onsubmit="HandleRegister">
            <div class="form-group">
                <label for="username">Username <span class="text-danger">*</span></label>
                <input id="username" type="text" @bind="newUser.Username" placeholder="Enter your username" required />
            </div>

            <div class="form-group">
                <label for="email">Email <span class="text-danger">*</span></label>
                <input id="email" type="email" @bind="newUser.Email" placeholder="Enter your email" required />
            </div>

            <div class="form-group">
                <label for="password">Password <span class="text-danger">*</span></label>
                <input id="password" type="password" @bind="password" placeholder="Enter your password" required />
            </div>

            <div class="form-group">
                <label for="phoneNumber">Phone Number</label>
                <input id="phoneNumber" type="tel" @bind="newUser.PhoneNumber" placeholder="Enter your phone number" />
            </div>

            <div class="form-group">
                <label for="dob">Date of Birth</label>
                <input id="dob" type="date" @bind="newUser.DoB" />
            </div>

            <div class="form-group">
                <label for="role">Role <span class="text-danger">*</span></label>
                <select id="role" @bind="newUser.RoleId" required>
                    <option value="">Select Role</option>
                    @foreach (var role in availableRoles)
                    {
                        <option value="@role.RoleId">@role.RoleName</option>
                    }
                </select>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(message))
            {
                <div class="popup-overlay">
                    <div class="popup-board">
                        <h3>@message</h3>
                        <p>Redirecting to login page...</p>
                    </div>
                </div>
            }


            <button type="submit" class="register-btn">Sign Up</button>
        </form>

        <div class="register-footer">
            <p>Already have an account? <a href="/login">Log in</a></p>
        </div>
    </div>
</div>


@code {
    // Khởi tạo newUser mà không cố gắng gán cho PasswordHash
    private UserDTO newUser = new() { UserId = "", Username = "", Email = "", RoleId = "" };
    private string password = string.Empty;
    private List<RoleDTO> availableRoles = new();
    private string? errorMessage;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            availableRoles = await RoleApiService.GetAllAsync() ?? new List<RoleDTO>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load roles: {ex.Message}";
        }
    }

    private async Task HandleRegister()
    {
        message = null;
        errorMessage = null;
        if (!IsValidEmail(newUser.Email))
        {
            errorMessage = "Invalid email format.";
            return;
        }
        if (!string.IsNullOrWhiteSpace(newUser.PhoneNumber))
        {
            if (!IsValidPhoneNumber(newUser.PhoneNumber))
            {
                errorMessage = "Invalid phone number format.";
                return;
            }
        }

        try
        {
            Console.WriteLine($"Registering user: {newUser.Username}, Email: {newUser.Email}, RoleId: {newUser.RoleId}");
            var userDto = new UserDTO
            {
                UserId = newUser.UserId,
                Username = newUser.Username,
                Email = newUser.Email,
                PhoneNumber = newUser.PhoneNumber,
                DoB = newUser.DoB,
                RoleId = newUser.RoleId,
                Password = password // Assuming password is hashed in the API
            };

            var createdUser = await AuthApiService.RegisterAsync(userDto);
            if (createdUser != null)
            {
                message = "Register Successfully";
                StateHasChanged();          // Force UI to update immediately
                await Task.Yield();         // Yield control back to renderer
                await Task.Delay(2000);
                NavigationManager.NavigateTo("/login", forceLoad: true);
            }
            else
            {
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Registration failed: {ex.Message}";
        }
    }

    private static bool IsValidEmail(string email)
    {
        return System.Text.RegularExpressions.Regex.IsMatch(
            email,
            @"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );
    }
    private static bool IsValidPhoneNumber(string phoneNumber)
    {
        return System.Text.RegularExpressions.Regex.IsMatch(
            phoneNumber,
            // @"^\+?[1-9]\d{1,14}$", Basic international phone number format
            @"^\d{10,}$",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );
    }
}
