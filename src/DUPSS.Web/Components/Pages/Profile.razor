@page "/profile"
@using DUPSS.API.Models.DTOs
@using System.Timers
@using DUPSS.Web.Components.Service
@inject UserApiService UserApiService
@inject CourseEnrollApiService CourseEnrollApiService
@inject CampaignRegistrationApiService CampaignRegistrationApiService
@inject CampaignApiService CampaignApiService
@inject JwtAuthenticationStateProvider AuthStateProvider

<div class="profile-bg">
    <div class="profile-main-card">
        <div class="profile-header">
            <div>
                <div class="profile-welcome">Welcome, @user?.Username</div>
                <div class="profile-date">@DateTime.Now</div>
            </div>
            <button class="profile-edit-btn" @onclick="ToggleEdit">@((isEdit ? "Cancel" : "Edit"))</button>
        </div>
        <div class="profile-content">
            <div class="profile-user-info">
                <div class="profile-avatar-lg">
                    @if (!string.IsNullOrEmpty(user?.ImageUrl))
                    {
                        <img src="@user.ImageUrl" alt="User Avatar" />
                    }
                    else
                    {
                        <i class="fas fa-user-circle"></i>
                        <img src="/images/Users/avatar2.png" alt="User Avatar" />
                    }
                </div>
                <div>
                    <div class="profile-user-name">@user?.Username</div>
                    <div class="profile-user-email">@user?.Email</div>
                </div>
            </div>

            <div class="profile-fields">
                <div class="profile-fields-col">
                    <label>Full Name</label>
                    @if (isEdit)
                    {
                        <input @bind="userEdit.Username" />
                    }
                    else
                    {
                        <input disabled value="@user?.Username" />
                    }
                    <label>My email Address</label>
                    <div class="profile-email-box">
                        <span class="profile-email-icon"><i class="fas fa-envelope"></i></span>
                        @if (isEdit)
                        {
                            <input @bind="userEdit.Email" />
                        }
                        else
                        {
                            <span>@user?.Email</span>
                        }
                        <span class="profile-email-date">@user?.CreatedDate.ToString("MMMM yyyy")</span>
                    </div>
                    <button class="profile-add-email-btn" disabled>+ Add Email Address</button>
                </div>
                <div class="profile-fields-col">
                    <label>Phone Number</label>
                    @if (isEdit)
                    {
                        <input @bind="userEdit.PhoneNumber" />
                    }
                    else
                    {
                        <input disabled value="@user?.PhoneNumber" />
                    }
                    <label>Birthday</label>
                    @if (isEdit)
                    {
                        <input type="date" @bind="userEdit.DoB" />
                    }
                    else
                    {
                        <input disabled value="@user?.DoB" />
                    }
                    <label>Time Zone</label>
                    <input disabled value="@timeZoneDisplay" />
                </div>
            </div>

            @if (isEdit)
            {
                <button class="btn btn-success mt-3" @onclick="SaveProfile">Save</button>
                @if (!string.IsNullOrEmpty(editMessage))
                {
                    <div class="alert alert-info mt-2">@editMessage</div>
                }
            }

            <hr />

            <div class="profile-section-collapse">
                <button class="profile-collapse-btn" @onclick="() => showCourses = !showCourses">
                    <span>@(showCourses ? "▼" : "►")</span> My Enrolled Courses
                </button>
                <div class="profile-collapse-content @(showCourses ? "expanded" : "")">
                    @if (enrollments is null)
                    {
                        <div>Loading...</div>
                    }
                    else if (!enrollments.Any())
                    {
                        <div>No course enrollments found.</div>
                    }
                    else
                    {
                        <table class="profile-table">
                            <thead>
                                <tr>
                                    <th>Course</th>
                                    <th>Status</th>
                                    <th>Enroll Date</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var enroll in enrollments)
                                {
                                    <tr>
                                        <td>@enroll.Course?.CourseName</td>
                                        <td>@enroll.Status</td>
                                        <td>@enroll.EnrollDate.ToString("yyyy-MM-dd")</td>
                                        <td>
                                            <a class="profile-link" href="/CourseDetailPage/@enroll.CourseId">View</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>

            <div class="profile-section-collapse">
                <button class="profile-collapse-btn" @onclick="() => showCampaigns = !showCampaigns">
                    <span>@(showCampaigns ? "▼" : "►")</span> My Campaign Participations
                </button>
                <div class="profile-collapse-content @(showCampaigns ? "expanded" : "")">
                    @if (campaigns is null)
                    {
                        <div>Loading...</div>
                    }
                    else if (!campaigns.Any())
                    {
                        <div>No campaign participation found.</div>
                    }
                    else
                    {
                        <table class="profile-table">
                            <thead>
                                <tr>
                                    <th>Campaign</th>
                                    <th>Status</th>
                                    <th>Joined At</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var c in campaigns)
                                {
                                    <tr>
                                        <td>@c.Title</td>
                                        <td>@c.Status</td>
                                        <td>@c.StartDate.ToString("yyyy-MM-dd")</td>
                                        <td>
                                            <a class="profile-link" href="/Campaign/Detail/@c.CampaignId">View</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserDTO? user;
    private UserDTO? userEdit;
    private bool isEdit = false;
    private string editMessage = string.Empty;
    private DateTime currentTime = DateTime.Now;
    private Timer? timer;
    private string timeZoneDisplay = "UTC+0";
    private List<CourseEnrollDTO>? enrollments;
    private List<CampaignDTO>? campaigns;
    private bool showCourses = false;
    private bool showCampaigns = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var username = authState.User.Identity?.Name;
        var userId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(username))
        {
            var users = await UserApiService.GetAllAsync();
            user = users.FirstOrDefault(u => u.Username == username);
            if (user != null)
            {
                userEdit = CloneUser(user);
            }
        }

        // Fetch course enrollments for this user
        if (!string.IsNullOrEmpty(userId))
        {
            var allEnrollments = await CourseEnrollApiService.GetAllAsync();
            enrollments = allEnrollments
                .Where(e => e.MemberId == userId)
                .OrderByDescending(e => e.EnrollDate)
                .ToList();

            // Fetch campaign participations for this user
            var registrations = await CampaignRegistrationApiService.GetByUserIdAsync(userId);
            var allCampaigns = await CampaignApiService.GetAllAsync();
            campaigns = registrations
                .Select(r => allCampaigns.FirstOrDefault(c => c.CampaignId == r.CampaignId))
                .Where(c => c != null)
                .ToList()!;
        }

        timer = new Timer(1000); // 1 second interval
        timer.Elapsed += (s, e) =>
        {
            currentTime = DateTime.Now;
            InvokeAsync(StateHasChanged);
        };
        timer.Start();

        // Get the user's local time zone offset in hours
        var offset = TimeZoneInfo.Local.GetUtcOffset(DateTime.Now);
        var sign = offset.TotalHours >= 0 ? "+" : "-";
        timeZoneDisplay = $"UTC{sign}{offset:hh\\:mm}";
    }

    private void ToggleEdit()
    {
        isEdit = !isEdit;
        editMessage = string.Empty;
        if (isEdit && user != null)
        {
            userEdit = CloneUser(user);
        }
    }

    private async Task SaveProfile()
    {
        if (userEdit == null) return;
        try
        {
            var updatedUser = await UserApiService.UpdateAsync(userEdit);
            user = updatedUser;
            isEdit = false;
            editMessage = "Profile updated successfully!";
        }
        catch (Exception ex)
        {
            editMessage = $"Error updating profile: {ex.Message}";
        }
    }

    private UserDTO CloneUser(UserDTO source)
    {
        return new UserDTO
        {
            UserId = source.UserId,
            Username = source.Username,
            DoB = source.DoB,
            PhoneNumber = source.PhoneNumber,
            Email = source.Email,
            ImageUrl = source.ImageUrl,
            RoleId = source.RoleId,
            CreatedDate = source.CreatedDate,
            Password = source.Password
        };
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}