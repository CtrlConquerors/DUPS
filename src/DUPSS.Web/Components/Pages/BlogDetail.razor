@page "/Blog/Detail/{BlogId}"
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@using Markdig
@inject BlogApiService BlogApiService
@inject NavigationManager NavigationManager

<div class="blog-detail-container">
    @if (isLoading)
    {
        <div class="loading-indicator">
            <p>Loading blog details...</p>
            <div class="spinner"></div>
        </div>
    }
    else if (hasError)
    {
        <div class="error-message">
            <p>Oops! Could not load blog details. The blog may not exist or there was a server error.</p>
            <button class="retry-button" @onclick="RetryLoadBlog">Retry</button>
            <button class="back-button" @onclick="GoBack">Back to Blogs</button>
        </div>
    }
    else if (blog == null)
    {
        <div class="no-blog-message">
            <p>Blog not found.</p>
            <button class="back-button" @onclick="GoBack">Back to Blogs</button>
        </div>
    }
    else
    {
        <div class="blog-hero-wrapper">
            <div class="blog-hero-image" style="background-image: url('https://placehold.co/1200x400/F0F0F0/000000?text=Blog+Image');"></div>
            <div class="blog-hero-title">
                <span class="title-letters">
                    @foreach (var c in blog.Title)
                    {
                        if (c == ' ')
                        {
                            <span class="title-letter" style="width:0.4em;display:inline-block;"> </span>
                        }
                        else
                        {
                            <span class="title-letter">@c</span>
                        }
                    }
                </span>
                <div class="blog-hero-meta">
                    <div class="info-row">
                        <label>Status:</label>
                        <span>@blog.Status</span>
                    </div>
                    <div class="info-row">
                        <label>Author:</label>
                        <span>@(blog.Staff?.Username ?? "Unknown")</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="blog-section">
            <h3>Content</h3>
            <div>@((MarkupString)Markdown.ToHtml(blog.Content ?? "", pipeline))</div>
        </div>

        <div class="navigation-buttons">
            <button class="back-button" @onclick="GoBack">Back to Blogs</button>
        </div>
    }
</div>

<Footer />

@code {
    [Parameter]
    public string BlogId { get; set; } = string.Empty;

    private BlogDTO? blog;
    private bool isLoading = true;
    private bool hasError = false;
    private readonly MarkdownPipeline pipeline = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();

    protected override async Task OnInitializedAsync()
    {
        await LoadBlogAsync();
    }

    private async Task LoadBlogAsync()
    {
        isLoading = true;
        hasError = false;
        try
        {
            Console.WriteLine($"Loading blog details for BlogId: {BlogId}");
            blog = await BlogApiService.GetByIdAsync(BlogId);
            if (blog == null)
            {
                Console.WriteLine($"Blog not found for BlogId: {BlogId}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading blog detail: {ex.Message}");
            hasError = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RetryLoadBlog()
    {
        await LoadBlogAsync();
    }

    private void GoBack()
    {
        Console.WriteLine("Navigating back to /Blog");
        NavigationManager.NavigateTo("/Blog");
    }
}