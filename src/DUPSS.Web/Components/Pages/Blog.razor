@page "/Blog"
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@inject NavigationManager NavigationManager
@inject BlogApiService BlogApiService
@inject IJSRuntime JSRuntime

<div class="blog-page-container">
    <h1 class="page-title">Ongoing Blog Posts</h1>
    <p class="page-subtitle">Discover insights and updates from our team.</p>

    @if (blogs == null)
    {
        <div class="loading-indicator">
            <p>Loading blogs...</p>
            <div class="spinner"></div>
        </div>
    }
    else if (hasError)
    {
        <div class="error-message">
            <p>Oops! Something went wrong while loading blogs. Please try again later.</p>
            <button class="retry-button" @onclick="RetryLoadBlogs">Retry</button>
        </div>
    }
    else if (!blogs.Any())
    {
        <div class="no-blog-message">
            <p>No blogs available at the moment. Please check back later!</p>
        </div>
    }
    else
    {
        <div class="blog-grid">
            @foreach (var item in showAllBlogs ? blogs : blogs.Take(DefaultBlogDisplayLimit))
            {
                <div class="blog-card clickable" @onclick="() => NavigateToDetail(item.BlogId)">
                    <div class="card-image">
                        <img src="https://placehold.co/300x200/F0F0F0/000000?text=Blog+Image"
                             alt="Blog Image" />
                    </div>
                    <div class="card-content">
                        <h3 class="blog-name">@item.Title</h3>
                        <p class="blog-status">Status: @item.Status</p>
                        <p>@(item.Content.Length > 100 ? item.Content.Substring(0, 100) + "..." : item.Content)</p>
                    </div>
                </div>
            }
        </div>

        @if (blogs.Count > DefaultBlogDisplayLimit && !showAllBlogs)
        {
            <div class="main-explore-button-container">
                <button class="main-explore-button" @onclick="ToggleShowAllBlogs" disabled="@(!_isHydrated)">
                    @(_isHydrated ? "Explore More" : "Loading...")
                </button>
            </div>
        }

        @if (showAllBlogs)
        {
            <div class="main-explore-button-container">
                <button class="main-explore-button" @onclick="ToggleShowAllBlogs">Show Less</button>
            </div>
        }
    }
</div>

<Footer />

@code {
    private List<BlogDTO>? blogs;
    private bool hasError = false;
    private bool showAllBlogs = false;
    private const int DefaultBlogDisplayLimit = 3;
    private bool _isHydrated = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadBlogsAsync();
    }

    private async Task LoadBlogsAsync()
    {
        try
        {
            blogs = await BlogApiService.GetAllAsync();
            Console.WriteLine($"Loaded {blogs?.Count} blogs.");
            hasError = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading blogs: {ex.Message}");
            hasError = true;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task RetryLoadBlogs()
    {
        hasError = false;
        await LoadBlogsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isHydrated = true;
            Console.WriteLine("[Hydration] isHydrated: true");
            StateHasChanged();
            await Task.CompletedTask;
        }
    }

    private async Task ToggleShowAllBlogs()
    {
        showAllBlogs = !showAllBlogs;
        Console.WriteLine($"ToggleShowAllBlogs called. showAllBlogs is now: {showAllBlogs}");

        if (!showAllBlogs)
        {
            await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        }
    }

    private void NavigateToDetail(string blogId)
    {
        Console.WriteLine($"Navigating to blog detail: BlogId={blogId}");
        NavigationManager.NavigateTo($"/Blog/Detail/{blogId}", forceLoad: true); // Removed forceLoad: true
    }
}