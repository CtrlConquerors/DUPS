@page "/Blog"
@using DUPSS.API.Models.DTOs
@using DUPSS.API.Models.Objects
@using DUPSS.Web.Components.Service
@inject NavigationManager NavigationManager
@inject BlogApiService BlogApiService
@inject BlogTopicApiService BlogTopicApiService
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment WebHostEnvironment // NEW: Inject IWebHostEnvironment

<div class="blog-page-container">
    <h1 class="page-title">Ongoing Blog Posts</h1>
    <p class="page-subtitle">Discover insights and updates from our team.</p>

    <div class="filters-container">
        <div class="search-input-container">
            <input type="text" class="form-control" placeholder="Search blogs by title, topic, or content..."
                   @bind="searchTerm" @bind:event="oninput" @onkeyup="ApplySearchAndDisplay" />
        </div>

        <div class="topic-filter-container">
            <select class="form-select" value="@selectedTopicId" @onchange="OnTopicFilterChanged">
                <option value="">All Topics</option>
                @if (blogTopics != null)
                {
                    @foreach (var topic in blogTopics)
                    {
                        <option value="@topic.BlogTopicId">@topic.BlogTopicName</option>
                    }
                }
            </select>
        </div>
    </div>

    @if (blogs == null)
    {
        <div class="loading-indicator">
            <p>Loading blogs...</p>
            <div class="spinner"></div>
        </div>
    }
    else if (hasError)
    {
        <div class="error-message">
            <p>Oops! Something went wrong while loading blogs. Please try again later.</p>
            <button class="retry-button" @onclick="RetryLoadBlogs">Retry</button>
        </div>
    }
    else if (!filteredBlogs.Any())
    {
        <div class="no-blog-message">
            <p>No blogs found matching your criteria. Please try a different search term or filters.</p>
        </div>
    }
    else
    {
        <div class="blog-grid">
            @foreach (var item in showAllBlogs ? filteredBlogs : filteredBlogs.Take(DefaultBlogDisplayLimit))
            {
                <div class="blog-card clickable" @onclick="() => NavigateToDetail(item.BlogId)">
                    <div class="card-image">
                        <img src="@(item.ImageUrl ?? "https://placehold.co/300x200/F0F0F0/000000?text=Blog+Image")"
                             alt="Blog Image" />
                    </div>
                    <div class="card-content">
                        <h3 class="blog-name">@item.Title</h3>
                        <p class="blog-status">Topic: @(item.BlogTopic?.BlogTopicName ?? "-")</p>
                        <p>@(item.Content.Length > 100 ? item.Content.Substring(0, 100) + "..." : item.Content)</p>
                    </div>
                </div>
            }
        </div>

        @if (filteredBlogs.Count > DefaultBlogDisplayLimit && !showAllBlogs)
        {
            <div class="main-explore-button-container">
                <button class="main-explore-button" @onclick="ToggleShowAllBlogs" disabled="@(!_isHydrated)">
                    @(_isHydrated ? "Explore More" : "Loading...")
                </button>
            </div>
        }

        @if (showAllBlogs && filteredBlogs.Any())
        {
            <div class="main-explore-button-container">
                <button class="main-explore-button" @onclick="ToggleShowAllBlogs">Show Less</button>
            </div>
        }
    }
</div>

<Footer />

@code {
    private List<BlogDTO>? blogs;
    private List<BlogTopic>? blogTopics;
    private List<BlogDTO> filteredBlogs = new List<BlogDTO>();
    private bool hasError = false;
    private bool showAllBlogs = false;
    private const int DefaultBlogDisplayLimit = 3;
    private bool _isHydrated = false;
    private string searchTerm = string.Empty;
    private string selectedTopicId = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery(Name = "blogTopic")]
    public string? BlogTopicFromQuery { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadBlogTopicsAsync();

        // Set the selected topic from query parameter if provided
        if (!string.IsNullOrWhiteSpace(BlogTopicFromQuery))
        {
            selectedTopicId = BlogTopicFromQuery;
        }

        await LoadBlogsAsync(); // Load blogs after topic is set
        ApplySearchAndDisplay();
    }

    private async Task LoadBlogTopicsAsync()
    {
        try
        {
            blogTopics = await BlogTopicApiService.GetAllAsync();
            Console.WriteLine($"Loaded {blogTopics?.Count} blog topics.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading blog topics: {ex.Message}");
        }
    }

    private async Task LoadBlogsAsync()
    {
        try
        {
            // Fetch blogs from API
            blogs = (await BlogApiService.GetAllAsync())?.Where(b => b.Status == "Published").ToList();
            Console.WriteLine($"Loaded {blogs?.Count} blogs from API.");

            // NEW: Logic to find and set ImageUrl from wwwroot/images
            if (blogs != null && blogs.Any())
            {
                var wwwrootPath = WebHostEnvironment.WebRootPath;
                var imagesPath = Path.Combine(wwwrootPath, "images", "Blogs");
                var supportedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" };
                Console.WriteLine($"Blog.razor: LoadBlogsAsync: wwwrootPath: {wwwrootPath}");
                Console.WriteLine($"Blog.razor: LoadBlogsAsync: imagesPath: {imagesPath}");

                foreach (var blog in blogs)
                {
                    if (!string.IsNullOrEmpty(blog.BlogId))
                    {
                        bool imageFound = false;
                        foreach (var ext in supportedExtensions)
                        {
                            var potentialFileName = $"{blog.BlogId}{ext}";
                            var fullPath = Path.Combine(imagesPath, potentialFileName);

                            if (System.IO.File.Exists(fullPath))
                            {
                                blog.ImageUrl = $"images/Blogs/{potentialFileName}"; // Set the relative URL for display
                                Console.WriteLine($"Blog.razor: LoadBlogsAsync: Found image for BlogId {blog.BlogId}: {blog.ImageUrl}");
                                imageFound = true;
                                break;
                            }
                        }
                        if (!imageFound)
                        {
                            Console.WriteLine($"Blog.razor: LoadBlogsAsync: No image found for BlogId {blog.BlogId} in {imagesPath}. ImageUrl remains: {blog.ImageUrl ?? "null/empty"}");
                            blog.ImageUrl = null; // Ensure ImageUrl is null if no image is found
                        }
                    }
                    else
                    {
                        blog.ImageUrl = null; // If BlogId is empty, ensure ImageUrl is null
                    }
                }
            }

            hasError = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading blogs: {ex.Message}");
            hasError = true;
        }
        finally
        {
            ApplySearchAndDisplay();
            StateHasChanged();
        }
    }

    private void ApplySearchAndDisplay()
    {
        if (blogs == null)
        {
            filteredBlogs = new List<BlogDTO>();
            return;
        }

        IEnumerable<BlogDTO> query = blogs;

        // Apply search term filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var lowerSearchTerm = searchTerm.ToLower().Trim();
            query = query.Where(b =>
                (b.Title?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (b.BlogTopic?.BlogTopicName?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (b.Content?.ToLower().Contains(lowerSearchTerm) ?? false) ||
                (b.BlogId?.ToLower().Contains(lowerSearchTerm) ?? false)
            );
        }

        // Apply topic filter
        if (!string.IsNullOrWhiteSpace(selectedTopicId))
        {
            query = query.Where(b => b.BlogTopic?.BlogTopicId == selectedTopicId);
        }

        filteredBlogs = query.ToList();
        showAllBlogs = false;
        StateHasChanged();
    }

    private async Task OnTopicFilterChanged(ChangeEventArgs e)
    {
        selectedTopicId = e.Value?.ToString() ?? string.Empty;

        // Update the URL with the selected topic
        var uri = NavigationManager.GetUriWithQueryParameter("blogTopic",
            string.IsNullOrWhiteSpace(selectedTopicId) ? null : selectedTopicId);
        NavigationManager.NavigateTo(uri, replace: true);

        ApplySearchAndDisplay();
    }

    private async Task RetryLoadBlogs()
    {
        hasError = false;
        await LoadBlogsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isHydrated = true;
            Console.WriteLine("[Hydration] isHydrated: true");
            StateHasChanged();
            await Task.CompletedTask;
        }
    }

    private async Task ToggleShowAllBlogs()
    {
        showAllBlogs = !showAllBlogs;
        Console.WriteLine($"ToggleShowAllBlogs called. showAllBlogs is now: {showAllBlogs}");
        if (!showAllBlogs)
        {
            await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        }
    }

    private void NavigateToDetail(string blogId)
    {
        Console.WriteLine($"Navigating to blog detail: BlogId={blogId}");
        NavigationManager.NavigateTo($"/Blog/Detail/{blogId}", forceLoad: true);
    }
}
