@page "/forgot-password"
@using DUPSS.Web.Components.Service
@inject AuthApiService AuthApiService
@inject NavigationManager NavigationManager

<div class="background-view"></div>
    <div class="mountain-bg">
        <div class="mountain"></div>
    </div>
    

<div class="forgot-password-container">
    <div class="glass-card">
        <div class="forgot-password-header">
            <h2>Forgot Password</h2>
        </div>
        <EditForm Model="@model" OnValidSubmit="HandleForgotPassword" class="forgot-password-form">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="model.Email" placeholder="Enter your email" required />
            </div>
            <button type="submit" class="forgot-password-btn">Send Reset Link</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="popup-overlay">
                <div class="popup-board">
                    <h3>@message</h3>
                    <p>Redirecting to reset password page</p>
                </div>
            </div>
        }

        <div class="register-footer">
            <p>Remember your password? <a href="/login">Log in</a></p>
        </div>
    </div>
</div>

@code {
    private ForgotPasswordRequest model = new();
    private string? errorMessage;
    private string? message;

    private async Task HandleForgotPassword()
    {
        errorMessage = null;
        try
        {
            var response = await AuthApiService.ForgotPasswordAsync(model.Email);
            if (response != null)
            {
                message = "Reset link sent successfully";
                StateHasChanged();
                await Task.Yield();
                await Task.Delay(1000);
                NavigationManager.NavigateTo($"/reset-password?email={Uri.EscapeDataString(response.Email)}&token={Uri.EscapeDataString(response.Token)}", forceLoad: true);
            }
            else
            {
                errorMessage = "Email not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    public class ForgotPasswordRequest
    {
        public string Email { get; set; } = string.Empty;
    }
}