@page "/forgot-password"
@using DUPSS.Web.Components.Service
@inject AuthApiService AuthApiService
@inject NavigationManager NavigationManager

<h3>Forgot Password</h3>
<div class="forgot-password-container">
    <EditForm Model="@model" OnValidSubmit="HandleForgotPassword">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="model.Email" required />
        </div>
        <button type="submit" class="btn btn-primary">Send Reset Link</button>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="popup-overlay">
            <div class="popup-board">
                <h3>@message</h3>
                <p>Redirecting to reset password page</p>
            </div>
        </div>
    }
</div>

@code {
    private ForgotPasswordRequest model = new();
    private string? errorMessage;
    private string? message;

    private async Task HandleForgotPassword()
    {
        errorMessage = null;
        try
        {
            var response = await AuthApiService.ForgotPasswordAsync(model.Email);
            if (response != null)
            {
                // Forward user to reset-password page with token and email in query
                Console.WriteLine("Navigating to /");
                message = "Login Successfully";
                StateHasChanged();
                await Task.Yield();         // Yield control back to renderer
                await Task.Delay(1000);
                NavigationManager.NavigateTo($"/reset-password?email={Uri.EscapeDataString(response.Email)}&token={Uri.EscapeDataString(response.Token)}", forceLoad: true);
                
                
            }
            else
            {
                errorMessage = "Email not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    // DTO for request
    public class ForgotPasswordRequest
    {
        public string Email { get; set; } = string.Empty;
    }
}