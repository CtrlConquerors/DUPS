@page "/login"
@using DUPSS.API.Models.Common
@using DUPSS.Web.Components.Service
@using Microsoft.AspNetCore.Components.Forms
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<div class="login-bg-override"></div>
<div class="login-container">
    <div class="login-card">
        <div class="login-header">
            <img src="images/Others/logo2.png" alt="ALPHA Logo" class="login-logo" />
            <h2>ALPHA Login</h2>
        </div>
        <form class="login-form" @onsubmit="HandleLogin">
            <div class="form-group">
                <label for="email">Email</label>
                <input id="email" type="email" class="form-control" @bind="email" placeholder="EMAIL"
                       required/>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input id="password" type="password" class="form-control" @bind="password"
                       placeholder="PASSWORD" required/>
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            @if (!string.IsNullOrEmpty(message))
            {
                <div class="popup-overlay">
                    <div class="popup-board">
                        <h3>@message</h3>
                        <p>Redirecting to home page...</p>
                    </div>
                </div>
            }
            <div class="login-footer">
                
                <a href="/forgot-password">Forgot password?</a>
            </div>
            <button type="submit" class="btn btn-primary login-btn">Login</button>
        </form>
        <div class="login-footer2">
            <p>Not a member? <a href="/register">Sign up now</a></p>
        </div>
        
    </div>
</div>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string? errorMessage;
    private string? message;

    private async Task HandleLogin()
    {
        errorMessage = null;
        try
        {
            await AuthStateProvider.LoginAsync(email, password);
            message = "Login Successfully";
            await Task.Delay(2000); // Keep delay for user feedback
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (HttpRequestException)
        {
            errorMessage = "Unable to reach the server. Please check your network connection.";
        }
        catch (UnauthorizedAccessException)
        {
            errorMessage = "Invalid email or password.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
    }
}