@page "/reset-password"
@inject AuthApiService AuthApiService
@inject NavigationManager NavigationManager
@using DUPSS.Web.Components.Service
@using Microsoft.AspNetCore.Components.Forms

<h3>Reset Password</h3>
<div class="reset-password-container">
    <EditForm Model="@model" OnValidSubmit="HandleResetPassword">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="model.Email" readonly />
        </div>
        <input type="hidden" @bind="model.Token" />
        <div class="form-group">
            <label for="newPassword">New Password</label>
            <InputText id="newPassword" type="password" class="form-control" @bind-Value="model.NewPassword" required />
        </div>
        <div class="form-group">
            <label for="confirmPassword">Confirm Password</label>
            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="confirmPassword" required />
        </div>
        <button type="submit" class="btn btn-primary">Reset Password</button>
    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (success)
    {
        <div class="alert alert-success">Password reset successful! Redirecting to login...</div>
    }
</div>

@code {
    private ResetPasswordRequest model = new();
    private string confirmPassword = string.Empty;
    private string? errorMessage;
    private bool success = false;

    protected override void OnInitialized()
    {
        // Get query parameters from the URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        model.Email = query["email"] ?? "";
        model.Token = query["token"] ?? "";
    }

    private async Task HandleResetPassword()
    {
        errorMessage = null;
        if (model.NewPassword != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }
        try
        {
            var result = await AuthApiService.ResetPasswordAsync(model.Email, model.Token, model.NewPassword);
            if (result)
            {
                success = true;
                StateHasChanged();
                await Task.Yield();         // Yield control back to renderer
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/login", forceLoad: true);
                
            }
            else
            {
                errorMessage = "Invalid token or token expired.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    public class ResetPasswordRequest
    {
        public string Email { get; set; } = string.Empty;
        public string Token { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
    }
}
