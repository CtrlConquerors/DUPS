@page "/AppointmentForConsultant"
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS
@inject AppointmentApiService AppointmentService

<h3>My Appointments</h3>

@if (appointments == null)
{
    <p>Loading appointments...</p>
}
else if (!appointments.Any())
{
    <p>No appointments available at the moment.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Member</th>
                <th>Topic</th>
                <th>Note</th>
                <th>Status</th>         
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var appt in appointments)
            {
                <tr>
                    <td>@appt.AppointmentDate.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@appt.Member?.Username</td>
                    <td>@appt.Topic</td>
                    <td>
                        <InputTextArea class="form-control" @bind-Value="appt.Notes" />
                        <button class="btn btn-sm btn-outline-primary mt-1"
                                @onclick="@(() => SaveNotes(appt))">
                            💾 Save Notes
                        </button>
                    </td>

                    <td>@appt.Status</td>
                    <td>
                        @if (appt.Status == "Pending")
                        {
                            <button class="btn btn-success btn-sm me-1" @onclick="@(() => UpdateStatus(appt.AppointmentId, "Accepted"))">✅ Accept</button>
                            <button class="btn btn-danger btn-sm" @onclick="@(() => UpdateStatus(appt.AppointmentId, "Declined"))">❌ Decline</button>
                            
                        }
                        else
                        {
                            <button class="btn btn-danger btn-sm" @onclick="@(() => UpdateStatus(appt.AppointmentId, "Finished"))"> Finished </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<AppointmentDTO>? appointments;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            appointments = new List<AppointmentDTO>();
            return;
        }

        appointments = await AppointmentService.GetAppointmentsForConsultantAsync(userId);
    }

    private async Task UpdateStatus(string appointmentId, string newStatus)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure to mark this appointment as {newStatus}?");
        if (!confirmed) return;

        var success = await AppointmentService.UpdateAppointmentStatusAsync(appointmentId, newStatus);

        if (success)
        {
            var appt = appointments.FirstOrDefault(a => a.AppointmentId == appointmentId);
            if (appt != null)
                appt.Status = newStatus;

            await JS.InvokeVoidAsync("alert", $"Appointment marked as {newStatus}.");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", $"Failed to update appointment status.");
        }

    }
    private async Task SaveNotes(AppointmentDTO appt)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Send this note to user?");
        if (!confirmed) return;

        var success = await AppointmentService.UpdateAppointmentNotesAsync(appt.AppointmentId, appt.Notes);

        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Note success.");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Note fail.");
        }
    }

}
