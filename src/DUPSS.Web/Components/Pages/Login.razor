@page "/login"
@using DUPSS.Object
@using System.Security.Cryptography
@using System.Text
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h3 class="text-center mb-4">Login to Your Account</h3>
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Enter your email" />
                            <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Enter your password" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                        </div>

                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-primary">Login</button>
                        </div>

                        <div class="text-center">
                            <NavLink href="/register" class="btn btn-link">Need an account? Register</NavLink>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }

    private LoginModel loginModel = new LoginModel();

    [Inject]
    private AppDbContext DbContext { get; set; }

    private void HandleLogin()
    {
        var user = DbContext.User.FirstOrDefault(u => u.Email == loginModel.Email);

        if (user != null && VerifyPassword(loginModel.Password, user.Password))
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            // Add error message (e.g., "Invalid credentials")
        }
    }

    private bool VerifyPassword(string password, string storedSaltHash)
    {
        var parts = storedSaltHash.Split(':');
        if (parts.Length != 2) return false;

        byte[] salt = Convert.FromBase64String(parts[0]);
        string storedHash = parts[1];

        using var pbkdf2 = new Rfc2898DeriveBytes(password, salt, 100_000, HashAlgorithmName.SHA256);
        byte[] hash = pbkdf2.GetBytes(32);
        string hashBase64 = Convert.ToBase64String(hash);

        return storedHash == hashBase64;
    }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
}