@page "/login"
@using DUPSS.Object
@using DUPSS.Web.Components.Service
@using Supabase
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS

<PageTitle>Login</PageTitle>
<div class="login-bg-override"></div>
<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="logo text-center mb-4">
                        <img src="/images/logo2.png" alt="Logo" />
                        <h4 class="mt-3">LOGIN</h4>
                    </div>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" />

                        <div class="mb-3">
                            <label class="form-label"></label>
                            <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="EMAIL" />
                            <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label"></label>
                            <InputText type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="PASSWORD" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                        </div>

                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-primary">Login</button>
                        </div>

                        <div class="text-center">
                            <NavLink href="/register" class="btn btn-link">Need an account? Register</NavLink>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>
<div style="height: 130px;"></div>


@code {
    private class LoginModel
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }

    private LoginModel loginModel = new LoginModel();
    private string errorMessage = "";

    private async Task HandleLogin()
    {
        try
        {
            var session = await SupabaseClient.Auth.SignIn(loginModel.Email, loginModel.Password);
            if (session == null || session.User == null)
            {
                errorMessage = "Invalid email or password.";
                Console.WriteLine("Login failed: No session or user returned.");
                return;
            }

            Console.WriteLine($"Login successful: User ID = {session.User.Id}, Email = {session.User.Email}");
            var customAuthStateProvider = (CustomAuthStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthState(session);

            StateHasChanged();
            Console.WriteLine("Authentication state updated, redirecting to home...");
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
            Console.WriteLine($"Login error: {ex.Message}\nStackTrace: {ex.StackTrace}");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Scroll down 200px (adjust as needed)
            await JS.InvokeVoidAsync("scrollToLogin", 200);
        }
    }
}

<script>
    window.scrollToLogin = function (y) {
      window.scrollTo({ top: y, behavior: 'smooth' });
    }
</script>