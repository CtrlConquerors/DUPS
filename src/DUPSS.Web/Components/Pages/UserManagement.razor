@page "/UserManagement"
@inject DUPSS.AccessLayer.Interfaces.IUserDAO UserDAO
@inject IJSRuntime JS


<div class="d-flex justify-content-end mb-3">
    <div class="search-input-container">
        <input type="text" class="form-control" placeholder="Search by Username, Email, or Phone Number"
               @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterUsers" />
    </div>
</div>

@if (users == null)
{
    <p>Loading users...</p>
}
else if (!filteredUsers.Any())
{
    <p>No users found matching your search criteria.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Username</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th>Date of Birth</th>
                <th>Role</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in filteredUsers)
            {
                <tr>
                    <td>@user.Username</td>
                    <td>@user.Email</td>
                    <td>@user.PhoneNumber</td>
                    <td>@user.DoB?.ToString("yyyy-MM-dd")</td>
                    <td>@user.Role?.RoleName</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => EditUser(user.UserId)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.UserId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<DUPSS.Object.User>? users;
    private List<DUPSS.Object.User>? filteredUsers;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        users = await UserDAO.GetAllAsync();
        filteredUsers = users;
    }

    private void FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredUsers = users;
        }
        else
        {
            filteredUsers = users?.Where(user =>
                (user.Username != null && user.Username.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (user.Email != null && user.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (user.PhoneNumber != null && user.PhoneNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }
    }

    private void EditUser(string userId)
    {
        //todo
    }

    private async Task DeleteUser(string userId)
    {
        //todo
    }
}