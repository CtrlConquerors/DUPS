@page "/UserManagement"
@using DUPSS.API.Models.Common
@using DUPSS.API.Models.Objects
@using DUPSS.Web.Components.Service
@inject RoleApiService RoleApiService
@inject UserApiService UserApiService
@inject IJSRuntime JS

<AuthorizeView Roles="AD,MA,ST">
    <Authorized>
        <div class="user-management-container">
            <div class="header-section">
                <div class="page-title">User Management</div>
                <div class="actions">
                    <button class="create" @onclick="ShowCreateUserForm">Create New User</button>
                </div>
            </div>

        <div class="user-management-container">
            <div class="header-section">
                <div class="page-title">User Management</div>
                <div class="actions">
                    <button class="create" @onclick="ShowCreateUserForm">Create New User</button>
                </div>
            </div>

            <div class="filter-sort-section">
                <div class="search-input-container">
                    <input type="text" class="form-control" placeholder="Search by Username, Email, or Phone Number"
                           @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterUsers" />
                </div>
                <div class="filter-dropdown-container">
                    <select class="form-select" @onchange="OnRoleFilterChanged">
                        <option value="">All Roles</option>
                        @foreach (var role in availableRoles)
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                </div>
                <div class="sort-controls">
                    <select class="form-select" @bind="sortBy" @bind:after="SortUsers">
                        <option value="Username">Sort by UserName</option>
                        <option value="Email">Sort by Email</option>
                        <option value="RoleId">Sort by Role</option>
                    </select>
                    <button class="btn btn-outline-primary sort-direction-button" @onclick="ToggleSortDirection">
                        @if (sortDirection == SortDirection.Ascending)
                        {
                            <i class="bi bi-sort-alpha-down"></i>
                        }
                        else
                        {
                            <i class="bi bi-sort-alpha-down-alt"></i>
                        }
                    </button>
                </div>
            </div>

            @if (showCreateForm)
            {
                <div class="edit-form-card">
                    <h5>Create New User</h5>
                    <div class="mb-3">
                        <label class="form-label">Username <span class="text-danger">*</span></label>
                        <input class="form-control" @bind="newUser.Username" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email <span class="text-danger">*</span></label>
                        <input class="form-control" type="email" @bind="newUser.Email" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password <span class="text-danger">*</span></label>
                        <input class="form-control" type="password" @bind="newUserPassword" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone Number</label>
                        <input class="form-control" @bind="newUser.PhoneNumber" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Date of Birth</label>
                        <input type="date" class="form-control" @bind="newUser.DoB" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Role <span class="text-danger">*</span></label>
                        <select class="form-select" @bind="newUser.RoleId">
                            <option value="">Select Role</option>
                            @foreach (var role in availableRoleIds)
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                    </div>
                    <div>
                        <button class="btn btn-success me-2" @onclick="CreateUser">Create</button>
                        <button class="btn btn-secondary" @onclick="CancelCreate">Cancel</button>
                    </div>
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert alert-info mt-3">@message</div>
                    }
                </div>
            }

            @if (users == null)
            {
                <div class="loading-indicator">Loading users...</div>
            }
            else if (!filteredUsers.Any())
            {
                <div class="no-data-message">No users found matching your search criteria.</div>
            }
            else
            {
                <div class="table-container">
                    <table class="user-table">
                        <thead>
                            <tr>
                                <th>No</th>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Phone Number</th>
                                <th>Date of Birth</th>
                                <th>Role</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int index = (currentPage - 1) * itemsPerPage + 1;
                            }
                            @foreach (var user in PaginatedUsers)
                            {
                                <tr>
                                    <td>@index</td>
                                    <td>@user.Username</td>
                                    <td>@user.Email</td>
                                    <td>@user.PhoneNumber</td>
                                    <td>@user.DoB?.ToString("yyyy-MM-dd")</td>
                                    <td>@user.Role?.RoleName</td>
                                    <td>
                                        <div class="action-buttons">
                                            <button class="btn btn-sm btn-primary me-2" @onclick="() => EditUser(user.UserId)"><i class="bi bi-three-dots-vertical"></i></button>
                                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteUser(user.UserId)"><i class="bi bi-trash3-fill"></i></button>
                                        </div>
                                    </td>
                                </tr>
                                index++;
                            }
                        </tbody>
                    </table>
                </div>
                <div class="d-flex justify-content-center mt-3">
                    @for (int i = 1; i <= TotalPages; i++)
                    {
                        var pageIndex = i;
                        <button class="btn btn-outline-primary mx-1 @(pageIndex == currentPage ? "active" : "")"
                                @onclick="() => GoToPage(pageIndex)">
                            @pageIndex
                        </button>
                    }
                </div>

                @if (editingUserId != null && editingUser != null)
                {
                    <div class="edit-form-card">
                        <h5>Edit User: @editingUser.Username</h5>
                        <div class="mb-3">
                            <label class="form-label">Username <span class="text-danger">*</span></label>
                            <input class="form-control" @bind="editingUser.Username" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email <span class="text-danger">*</span></label>
                            <input class="form-control" type="email" @bind="editingUser.Email" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <input class="form-control" @bind="editingUser.PhoneNumber" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Date of Birth</label>
                            <input type="date" class="form-control" @bind="editingUser.DoB" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Role <span class="text-danger">*</span></label>
                            <select class="form-select" @bind="editingUser.RoleId">
                                <option value="">Select Role</option>
                                @foreach (var role in availableRoleIds)
                                {
                                    <option value="@role">@role</option>
                                }
                            </select>
                        </div>
                        <div>
                            <button class="btn btn-success me-2" @onclick="SaveEdit">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </div>
                        @if (!string.IsNullOrEmpty(message))
                        {
                            <div class="alert alert-info mt-3">@message</div>
                        }
                    </div>
                }
            }

            @if (!string.IsNullOrEmpty(message) && editingUserId == null && !showCreateForm)
            {
                <div class="alert alert-info mt-3">@message</div>
            }
        </div>

        <p>You are not authorized to access this page.</p>

@code {
    private List<User>? users;
    private List<User>? filteredUsers;
    private string searchTerm = "";
    private string? message;
    private string? editingUserId;
    private User? editingUser;
    private int currentPage = 1;
    private int itemsPerPage = 10;
    private List<string> availableRoles = new() { "Staff", "Member", "Admin", "Manager", "Consultant" };
    private List<string> availableRoleIds = new() { "ST", "ME", "AD", "MA", "CO" };
    private string selectedRole = "";
    private bool showCreateForm;
    private User newUser = new() { UserId = "", Username = "", Email = "", RoleId = "" };
    private string newUserPassword = "";

    private string sortBy = "Username"; // Default sort column is CourseId
    private SortDirection sortDirection = SortDirection.Ascending;

    private enum SortDirection { Ascending, Descending }

    private void SortUsers()
    {
        var query = filteredUsers?.AsEnumerable() ?? Enumerable.Empty<User>();

        switch (sortBy)
        {
            case "Username":
                query = sortDirection == SortDirection.Ascending ?
                        query.OrderBy(c => c.Username, StringComparer.OrdinalIgnoreCase) :
                        query.OrderByDescending(c => c.Username, StringComparer.OrdinalIgnoreCase);
                break;
            case "Email":
                query = sortDirection == SortDirection.Ascending ?
                        query.OrderBy(c => c.Email, StringComparer.OrdinalIgnoreCase) :
                        query.OrderByDescending(c => c.Email, StringComparer.OrdinalIgnoreCase);
                break;
            case "RoleId":
                query = sortDirection == SortDirection.Ascending ?
                        query.OrderBy(c => c.RoleId, StringComparer.OrdinalIgnoreCase) :
                        query.OrderByDescending(c => c.RoleId, StringComparer.OrdinalIgnoreCase);
                break;     
        }
        filteredUsers = query.ToList();
        currentPage = 1;
    }

    private IEnumerable<User> PaginatedUsers =>
        filteredUsers?
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage) ?? Enumerable.Empty<User>();

    private int TotalPages => (int)Math.Ceiling((filteredUsers?.Count ?? 0) / (double)itemsPerPage);

    protected override async Task OnInitializedAsync()
    {
        users = await UserApiService.GetAllAsync();
        filteredUsers = users;
    }

    private void GoToPage(int page)
    {
        if (page < 1) page = 1;
        if (page > TotalPages) page = TotalPages;

        if (currentPage != page)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void FilterUsers()
    {
        if (users == null)
            return;

        filteredUsers = users.Where(user =>
            (string.IsNullOrWhiteSpace(searchTerm) ||
             (user.Username?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
             (user.Email?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
             (user.PhoneNumber?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false))
            &&
            (string.IsNullOrWhiteSpace(selectedRole) || (user.Role?.RoleName == selectedRole))
        ).ToList();


        currentPage = 1;
        StateHasChanged();
    }
    private void ToggleSortDirection()
    {
        sortDirection = (sortDirection == SortDirection.Ascending) ? SortDirection.Descending : SortDirection.Ascending;
        SortUsers(); 
    }

    private void OnRoleFilterChanged(ChangeEventArgs e)
    {
        selectedRole = e.Value?.ToString() ?? "";
        FilterUsers();
    }

    private void ShowCreateUserForm()
    {
        showCreateForm = true;
        newUser = new User { UserId = "", Username = "", Email = "", RoleId = "" };
        newUserPassword = "";
        message = null;
    }

    private async Task CreateUser()
    {
        if (newUser == null || string.IsNullOrEmpty(newUser.Username) || string.IsNullOrEmpty(newUser.Email) ||
            string.IsNullOrEmpty(newUserPassword) || string.IsNullOrEmpty(newUser.RoleId))
        {
            message = "Username, email, password, and role are required.";
            return;
        }

        Console.WriteLine("Create user");

        try
        {

            await UserApiService.CreateAsync(new CreateUserRequest
            {
                User = newUser,
                Password = newUserPassword
            });

            message = $"User {newUser.Username} created successfully.";
            showCreateForm = false;
            newUser = new User { UserId = "", Username = "", Email = "", RoleId = "" };
            newUserPassword = "";
            users = await UserApiService.GetAllAsync();
            FilterUsers();
        }
        catch (Exception ex)
        {
            message = $"Failed to create user: {ex.Message}";
        }

        currentPage = 1;
        StateHasChanged();
    }

    private void CancelCreate()
    {
        showCreateForm = false;
        newUser = new User { UserId = "", Username = "", Email = "", RoleId = "" };
        newUserPassword = "";
        message = null;
    }

    private void EditUser(string userId)
    {
        var user = users?.FirstOrDefault(u => u.UserId == userId);
        if (user != null)
        {
            editingUserId = userId;
            editingUser = new User
            {
                UserId = user.UserId,
                Username = user.Username,
                Email = user.Email,
                PhoneNumber = user.PhoneNumber,
                DoB = user.DoB,
                Role = user.Role,
                RoleId = user.RoleId
            };
            message = null;
        }
    }

    private async Task SaveEdit()
    {
        if (editingUser == null || string.IsNullOrEmpty(editingUser.Username) ||
            string.IsNullOrEmpty(editingUser.Email) || string.IsNullOrEmpty(editingUser.RoleId))
        {
            message = "Username, email, and role are required.";
            return;
        }

        try
        {
            await UserApiService.UpdateAsync(editingUser);
            message = $"User {editingUser.Username} updated successfully.";
            editingUserId = null;
            editingUser = null;
            users = await UserApiService.GetAllAsync();
            FilterUsers();
        }
        catch (Exception ex)
        {
            message = $"Failed to update user: {ex.Message}";
        }

        currentPage = 1;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        editingUserId = null;
        editingUser = null;
        message = null;
    }

    private async Task DeleteUser(string userId)
    {
        var user = users?.FirstOrDefault(u => u.UserId == userId);
        if (user == null)
        {
            message = $"User not found.";
            return;
        }

        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete user '{user.Username}'?");
        if (confirmed)
        {
            try
            {
                var success = await UserApiService.DeleteAsync(userId);
                if (success)
                {
                    message = $"User '{user.Username}' deleted successfully.";
                    users = await UserApiService.GetAllAsync();
                    FilterUsers();
                }
                else
                {
                    message = $"Failed to delete user '{user.Username}'. Please try again.";
                }
            }
            catch (Exception ex)
            {
                message = $"Failed to delete user: {ex.Message}";
            }
        }

        currentPage = 1;
        StateHasChanged();
    }
}

