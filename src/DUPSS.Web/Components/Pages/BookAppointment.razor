@page "/BookAppointment"
@using DUPSS.API.Models.AccessLayer.Interfaces
@using DUPSS.Web.Components.Service
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@inject AppointmentApiService AppointmentApiService
@inject UserApiService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider

<h3>Booking appointment with consultant</h3>

@if (consultants == null)
{
    <p>Loading consultant...</p>
}
else
{
    <EditForm Model="newAppointment" OnValidSubmit="HandleBooking">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Choose Consultant</label>
            <select class="form-select" @onchange="HandleConsultantChange">
                <option value="">-- Choose Consultant --</option>
                @foreach (var consultant in consultants)
                {
                    <option value="@consultant.UserId">@consultant.Username</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">Appointment date</label>
            <InputDate @bind-Value="newAppointment.AppointmentDate" class="form-control" />
        </div>

        <div class="mb-3">
            <label class="form-label">Topic</label>
            <InputText class="form-control" @bind-Value="newAppointment.Topic" />
        </div>

        <div class="mb-3">
            <label class="form-label">Note ( Optional )</label>
            <InputTextArea class="form-control" @bind-Value="newAppointment.Notes" />
        </div>

        <button class="btn btn-primary" type="submit">Booking</button>
    </EditForm>
}

@code {
    private List<UserDTO>? consultants;
    private AppointmentDTO newAppointment = new()
        {
            AppointmentId = Guid.NewGuid().ToString(),
            MemberId = "",
            ConsultantId = "",
            AppointmentDate = DateOnly.FromDateTime(DateTime.Today.AddDays(1)),
            Status = "Pending",
            Topic = ""
        };

    protected override async Task OnInitializedAsync()
    {
        consultants = await UserService.GetConsultantsAsync();

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            var memberId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
                        ?? user.FindFirst("sub")?.Value
                        ?? user.FindFirst("MemberId")?.Value;

            if (!string.IsNullOrEmpty(memberId))
            {
                newAppointment.MemberId = memberId;
            }
        }
    }


    private async Task HandleBooking()
    {
        Console.WriteLine("📅 [DEBUG] Starting appointment booking process...");
        Console.WriteLine($"📌 AppointmentId: {newAppointment.AppointmentId}");
        Console.WriteLine($"👤 MemberId: {newAppointment.MemberId}");
        Console.WriteLine($"🧑‍⚕️ ConsultantId: {newAppointment.ConsultantId}");
        Console.WriteLine($"🗓 AppointmentDate: {newAppointment.AppointmentDate}");
        Console.WriteLine($"🎯 Topic: {newAppointment.Topic}");
        Console.WriteLine($"📝 Notes: {newAppointment.Notes}");
        Console.WriteLine($"📋 Status: {newAppointment.Status}");

        var success = await AppointmentApiService.CreateAppointmentAsync(newAppointment);
        Console.WriteLine($"📥 [DEBUG] Appointment creation API returned: {(success ? "Success" : "Failure")}");

        if (success)
        {
            Console.WriteLine("✅ [DEBUG] Appointment created successfully. Redirecting to /Appointment...");
            Navigation.NavigateTo("/Appointment");
        }
        else
        {
            Console.WriteLine("❌ [ERROR] Failed to create appointment. Please check the API or input data.");
        }
    }





    private void HandleConsultantChange(ChangeEventArgs e)
    {
        newAppointment.ConsultantId = e.Value?.ToString() ?? "";
        Console.WriteLine($"🧑‍⚕️ [DEBUG] ConsultantId được chọn: {newAppointment.ConsultantId}");
    }


}
