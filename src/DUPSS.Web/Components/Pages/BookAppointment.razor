@page "/BookAppointment"
@using DUPSS.API.Models.AccessLayer.Interfaces
@using DUPSS.Web.Components.Service
@using DUPSS.API.Models.DTOs
@inject AppointmentApiService AppointmentApiService
@inject UserApiService UserService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS

<div class="vangogh-bg">
    <div class="vangogh-stars"></div>
    <div class="vangogh-swirls"></div>
    <div class="book-appointment-outer">
        <div class="soft-card vangogh-card">
            <h3>
                <span class="vangogh-title">🎨 Booking appointment with consultant</span>
            </h3>

            @if (consultants == null)
            {
                <div class="vangogh-loader">
                    <span>Loading consultants...</span>
                </div>
            }
            else
            {
                @if (!canBook)
                {
                    <div class="alert alert-warning vangogh-alert">
                        <span class="vangogh-alert-icon">⚠️</span>
                        You already have @MaxActiveAppointments active appointment(s). Please cancel or finish them before booking a new one.
                    </div>
                }
                else
                {
                    <div class="vangogh-form-container">
                        <EditForm Model="newAppointment" OnValidSubmit="HandleBooking" class="edit-form">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="vangogh-validation" />

                            <div class="mb-3">
                                <label class="form-label">Choose Consultant</label>
                                <InputSelect @bind-Value="newAppointment.ConsultantId" class="form-select" @onchange="HandleConsultantChange">
                                    <option value="">-- Choose Consultant --</option>
                                    @foreach (var consultant in consultants)
                                    {
                                        <option value="@consultant.UserId">
                                            @consultant.Username (@consultant.Username)
                                        </option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Appointment Date</label>
                                <input type="datetime-local" class="form-control" @bind="newAppointment.AppointmentDate" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label">Topic (Describe what you'd like to discuss)</label>
                                <InputText class="form-control" @bind-Value="newAppointment.Topic" />
                            </div>

                            <div class="vangogh-btn-row">
                                <button class="btn btn-primary vangogh-btn" type="submit">
                                    <span class="vangogh-btn-text">Book Now</span> <span class="vangogh-btn-brush">🖌️</span>
                                </button>
                            </div>
                        </EditForm>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<UserDTO>? consultants;
    private List<AppointmentDTO> existingAppointments = new();
    private const int MaxActiveAppointments = 1;
    private bool canBook = true;

    private AppointmentDTO newAppointment = new()
        {
            AppointmentId = "",
            MemberId = "",
            ConsultantId = "",
            AppointmentDate = DateTime.Today.AddDays(1),
            Status = "Pending",
            Topic = ""
        };

    protected override async Task OnInitializedAsync()
    {
        consultants = await UserService.GetConsultantsAsync();

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var memberId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value
                        ?? user.FindFirst("sub")?.Value
                        ?? user.FindFirst("MemberId")?.Value;

            if (!string.IsNullOrEmpty(memberId))
            {
                newAppointment.MemberId = memberId;

                existingAppointments = await AppointmentApiService.GetAppointmentsForMemberAsync(memberId);

                var activeCount = existingAppointments
                    .Count(a => a.Status == "Pending" || a.Status == "Accepted" || a.Status == "Confirmed");

                canBook = activeCount < MaxActiveAppointments;
            }
        }
        else
        {
            Navigation.NavigateTo("/login", true);
        }
    }

    private async Task HandleBooking()
    {
        if (string.IsNullOrEmpty(newAppointment.ConsultantId))
        {
            await JS.InvokeVoidAsync("alert", "Please pick a consultant.");
            return;
        }

        if (string.IsNullOrWhiteSpace(newAppointment.Topic))
        {
            await JS.InvokeVoidAsync("alert", "Please enter the topic for the appointment.");
            return;
        }

        var success = await AppointmentApiService.CreateAppointmentAsync(newAppointment);

        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Appointment booked successfully!");
            Navigation.NavigateTo("/Appointment", forceLoad: true);
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Failed to book appointment. Please try again.");
        }
    }

    private void HandleConsultantChange(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();
        if (!string.IsNullOrEmpty(selectedValue))
        {
            newAppointment.ConsultantId = selectedValue;
        }
    }
}
