@page "/Appointment"
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@inject HttpClient Http
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS
@inject UserApiService UserService
@inject AppointmentApiService AppointmentService

<h3>My appointment</h3>

<div class="appointment-link">
    <NavLink class="appointment-link" href="/BookAppointment" Match="NavLinkMatch.All">Booking appointment</NavLink>
</div>

@if (appointments == null)
{
    <p>Loading appointment...</p>
}
else if (!appointments.Any())
{
    <p>No appointments available at the moment.</p>
}
else
{
    <div class="mb-4">
        <div class="row g-3 align-items-center">
            <div class="col-auto">
                <input class="form-control" @bind="searchKeyword" placeholder="Find by Consultant..." />
            </div>
            <div class="col-auto">
                <input type="date" class="form-control" @bind="fromDate" />
            </div>
            <div class="col-auto">
                <input type="date" class="form-control" @bind="toDate" />
            </div>
            <div class="col-auto">
                <select class="form-select" @bind="selectedStatus">
                    <option value="">-- Status --</option>
                    <option>Pending</option>
                    <option>Accepted</option>
                    <option>Declined</option>
                    <option>Finished</option>
                    <option>Confirmed</option>
                </select>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="ApplyFilter">Filter</button>
                <button class="btn btn-secondary" @onclick="ResetFilter">Reset</button>
            </div>
        </div>
    </div>

    <table class="appointment-table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Date</th>
                <th>Consultant</th>
                <th>Status</th>
                <th>Note</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var appt in filteredAppointments)
            {
                <tr>
                    <td>@appt.AppointmentId</td>
                    <td>@appt.AppointmentDate.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</td>
                    <td>@appt.Consultant?.Username</td>
                    <td>@appt.Status</td>
                    <td>
                        <strong>Notes from consultant:</strong><br />
                        @appt.Notes
                    </td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => StartReschedule(appt)">✏️ Reschedule</button>
                        <button class="btn btn-danger" @onclick="@(() => HandleUnregister(appt.AppointmentId))">❌ Cancel</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (reschedulingAppointment != null)
    {
        <div class="modal-backdrop fade show" style="z-index: 1040;"></div>

        <div class="modal"
             style="z-index: 1050; display: block; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Reschedule Appointment</h5>
                        <button type="button" class="btn-close" @onclick="CancelReschedule"></button>
                    </div>
                    <div class="modal-body">
                        <label>New Date Time:</label>
                        <input type="datetime-local" class="form-control" @bind="rescheduleDate" />
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CancelReschedule">Cancel</button>
                        <button class="btn btn-primary" @onclick="ConfirmReschedule">Confirm</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    private List<AppointmentDTO>? appointments;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            appointments = new List<AppointmentDTO>();
            return;
        }
        appointments = await AppointmentService.GetAppointmentsForMemberAsync(userId);
        filteredAppointments = appointments.ToList();
    }

    private async Task HandleUnregister(string appointmentId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are u sure to cancel this appointment?");
        if (!confirmed) return;

        var success = await AppointmentService.CancelAppointmentAsync(appointmentId);

        if (success)
        {
            appointments = appointments.Where(a => a.AppointmentId != appointmentId).ToList();
            ApplyFilter();
            await JS.InvokeVoidAsync("alert", "Cancel appointment success.");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Cancel appointment fail.");
        }
    }

    private AppointmentDTO? reschedulingAppointment;
    private DateTime rescheduleDate;

    private void StartReschedule(AppointmentDTO appt)
    {
        reschedulingAppointment = appt;
        rescheduleDate = appt.AppointmentDate.ToLocalTime(); // Set old time
    }

    private void CancelReschedule()
    {
        reschedulingAppointment = null;
    }

    private async Task ConfirmReschedule()
    {
        if (reschedulingAppointment == null) return;

        var utcDate = rescheduleDate.ToUniversalTime();

        var updated = await AppointmentService.RescheduleAppointmentAsync(
            reschedulingAppointment.AppointmentId, utcDate);

        if (updated)
        {
            await JS.InvokeVoidAsync("alert", "ReBooking successfully!");
            reschedulingAppointment.AppointmentDate = utcDate;
            reschedulingAppointment = null;
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Cant ReBooking.");
        }
    }

    private string searchKeyword = "";
    private DateTime? fromDate = null;
    private DateTime? toDate = null;
    private string selectedStatus = "";

    private List<AppointmentDTO> filteredAppointments = new();

    private void ApplyFilter()
    {
        if (string.IsNullOrWhiteSpace(searchKeyword) &&
            !fromDate.HasValue &&
            !toDate.HasValue &&
            string.IsNullOrWhiteSpace(selectedStatus))
        {
            filteredAppointments = appointments.ToList();
            return;
        }

        filteredAppointments = appointments
            .Where(a =>
                (string.IsNullOrEmpty(searchKeyword) || a.Consultant?.Username?.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase) == true) &&
                (!fromDate.HasValue || a.AppointmentDate.ToLocalTime().Date >= fromDate.Value.Date) &&
                (!toDate.HasValue || a.AppointmentDate.ToLocalTime().Date <= toDate.Value.Date) &&
                (string.IsNullOrEmpty(selectedStatus) || a.Status == selectedStatus)
            ).ToList();
    }

    private void ResetFilter()
    {
        searchKeyword = "";
        fromDate = null;
        toDate = null;
        selectedStatus = "";
        filteredAppointments = appointments.ToList();
    }
}
