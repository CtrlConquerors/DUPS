@page "/Appointment"
@using DUPSS.API.Models.DTOs
@using DUPSS.Web.Components.Service
@inject HttpClient Http
@inject AuthenticationStateProvider AuthProvider
@inject IJSRuntime JS
@inject UserApiService UserService
@inject AppointmentApiService AppointmentService

<h3>My appointment</h3>
<div class="appointment-lin">
<NavLink class="appointment-link" href="/BookAppointment" Match="NavLinkMatch.All">Booking appointment</NavLink>
</div>
@if (appointments == null)
{
    <p>Loading appointment...</p>
}
else if (!appointments.Any())
{
    <p>No appointment available at the moment. Please check back later!.</p>
}
else
{

    <table class="appointment-table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Consultant</th>
                <th>Note</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var appt in appointments)
            {
                <tr>
                    <td>@appt.AppointmentDate.ToString("dd/MM/yyyy")</td>
                    <td>@appt.Consultant?.Username</td>
                    <td>@appt.Notes</td>
                    <td>@appt.Status</td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    private List<AppointmentDTO>? appointments;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            appointments = new List<AppointmentDTO>();
            return;
        }
        appointments = await AppointmentService.GetAppointmentsForMemberAsync(userId);
    }
}
