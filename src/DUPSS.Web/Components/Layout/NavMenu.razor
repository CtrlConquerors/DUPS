@* NavMenu.razor *@
@inject NavigationManager NavManager
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@* @inject NavigationManager NavManager *@

@* <nav class="navbar navbar-expand-lg @NavMenuBackgroundClass"> *@
<nav class="navbar navbar-expand-lg">
    <div class="container-fluid">
        <a href="/" class="navbar-brand d-flex align-items-center" style="gap: 5px;">
            <img src="images/logo.png" alt="Logo" class="navbar-brand-logo" style="width: 70px; height: 70px;"/>
            <span style="font-size: 24px;">ALPHA</span>
        </a>

        <form class="search-bar" role="search">
            <input type="search" placeholder=" Search" aria-label="Search" required/>
            <button class="search-btn" type="submit">
                <span>Search</span>
            </button>
        </form>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#topNavbar"
                aria-controls="topNavbar" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="topNavbar">
            <ul class="navbar-nav ms-auto mb-2 mb-lg-0 gap-4">

                @* Temp
                <AuthorizeView Roles="AD,MA,ST">
                    <Authorized>
                        
                    </Authorized>
                </AuthorizeView> *@
                <li class="nav-item">
                    <NavLink class="nav-link" href="/ManagementMenu">Management</NavLink>
                </li>

                <li class="nav-item">
                    <NavLink class="nav-link" href="/aboutUs">About Us</NavLink>
                </li>

                <li class="nav-item">
                    <NavLink class="nav-link" href="/Course">Course</NavLink>
                </li>

                <li class="nav-item">
                    <NavLink class="nav-link" href="/Blog">Blog</NavLink>
                </li>

                <li class="nav-item ">
                    <NavLink class="nav-link d-flex align-items-center gap-0" href="/campaign">
                        Campaign
                        <span class="badge bg-primary text-white">New</span>
                    </NavLink>
                </li>

                <li class="nav-item">
                    <NavLink class="nav-link" href="/assessment">Assessment</NavLink>
                </li>
                @* -----------AVARTAR AND OVERLAY-------------- *@
                @* @if (isAuthenticated)
                {
                    <li class="nav-item d-flex align-items-center position-relative">
                        <img src="images/avatar2.png" class="avatar-img" alt="User Avatar" title="@userName" @onclick="ToggleOverlay" />
                        <div class="avatar-overlay @(showOverlay ? "show" : "")" @onclick:stopPropagation>
                            <div class="avatar-overlay-content">
                                <div class="avatar-overlay-header">
                                    <span>@userName</span>
                                </div>
                                <NavLink class="avatar-overlay-btn" href="/logout">Logout</NavLink>
                            </div>
                        </div>
                    </li>
                } *@

                <li class="nav-item">
                    <NavLink class="get-started-btn" href="/login">
                        <span class="get-started-text">Get Started</span>
                        <span class="arrow-box">
                                <i class="bi bi-arrow-right"></i>
                            </span>
                    </NavLink>
                </li>

            </ul>
        </div>
    </div>
</nav>
@* </nav> *@
@* @code {
    private string? roleId;
    private bool isAuthenticated;
    private string userName = "";
    private string userInitials = "";
    private bool showOverlay = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity?.IsAuthenticated == true;

        if (isAuthenticated)
        {
            roleId = user.FindFirst(ClaimTypes.Role)?.Value;
            userName = user.Identity?.Name
                ?? user.FindFirst(ClaimTypes.Name)?.Value
                ?? user.FindFirst(ClaimTypes.Email)?.Value
                ?? "User";
            userInitials = GetInitials(userName);
        }
        else
        {
            roleId = null;
            userName = "";
            userInitials = "";
        }
    }

    private string GetInitials(string name)
    {
        if (string.IsNullOrWhiteSpace(name)) return "?";
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length == 1) return parts[0][0].ToString().ToUpper();
        return (parts[0][0].ToString() + parts[^1][0].ToString()).ToUpper();
    }

    private void ToggleOverlay()
    {
        showOverlay = !showOverlay;
    }
} *@



@*------- Changing NavMenu color function ----------- *@
@* @code {
    private string? currentUri;

    protected override void OnInitialized()
    {
        currentUri = NavManager.Uri;
        NavManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        currentUri = e.Location;
        StateHasChanged();
    }

    private string NavMenuBackgroundClass =>
        currentUri?.Contains("/CourseManagement", StringComparison.OrdinalIgnoreCase) == true ? "navmenu-course-bg"
        : currentUri?.Contains("/CampaignManagement", StringComparison.OrdinalIgnoreCase) == true ? "navmenu-campaign-bg"
        : currentUri?.Contains("/Management", StringComparison.OrdinalIgnoreCase) == true ? "navmenu-management-bg"
        : "navmenu-default-bg";

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
    }
} *@