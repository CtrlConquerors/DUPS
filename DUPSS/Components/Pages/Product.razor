@page "/product"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using DAL
@using Objects
@using System.ComponentModel.DataAnnotations

<PageTitle>Product</PageTitle>

<h3>Product</h3>
<hr />

<button class="btn btn-warning mb-3" disabled>Reset Database</button>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>ProductName</th>
                <th>UnitInStock</th>
                <th>UnitPrice</th>
                <th>Category</th>
                <th>Op</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Objects.Product p in products)
            {
                <tr>
                    <td>@p.ProductId</td>
                    <td>@p.ProductName</td>
                    <td>@p.UnitsInStock</td>
                    <td>@p.UnitPrice</td>
                    <td>@p.Category.CategoryName</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => edit(p)">Edit</button> |
                        <button class="btn btn-danger" @onclick="() => delete(p)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>@(isEditing ? "Edit Product" : "Create Product")</h2>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
    </div>
}

<EditForm Model="@currentProduct" OnValidSubmit="save">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />
    <div class="mb-3">
        <label for="productName" class="form-label">Product Name</label>
        <InputText id="productName" class="form-control" @bind-Value="currentProduct.ProductName" />
        <ValidationMessage For="@(() => currentProduct.ProductName)" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="category" class="form-label">Category</label>
        <InputSelect id="category" class="form-select" @bind-Value="currentProduct.CategoryId">
            <option value="">Select a category</option>
            @if (categories != null)
            {
                @foreach (var category in categories)
                {
                    <option value="@category.CategoryId">@category.CategoryName</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => currentProduct.CategoryId)" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="unitsInStock" class="form-label">Units in Stock</label>
        <InputNumber id="unitsInStock" class="form-control" @bind-Value="currentProduct.UnitsInStock" />
        <ValidationMessage For="@(() => currentProduct.UnitsInStock)" class="text-danger" />
    </div>
    <div class="mb-3">
        <label for="unitPrice" class="form-label">Unit Price</label>
        <InputNumber id="unitPrice" class="form-control" @bind-Value="currentProduct.UnitPrice" />
        <ValidationMessage For="@(() => currentProduct.UnitPrice)" class="text-danger" />
    </div>
    <button type="submit" class="btn btn-success">@(isEditing ? "Update" : "Create")</button>
    @if (isEditing)
    {
        <button type="button" class="btn btn-secondary" @onclick="cancelEdit">Cancel</button>
    }
</EditForm>

@code {

    private List<Objects.Product>? products;
    private List<Objects.Category>? categories;
    private Objects.Product currentProduct = new Objects.Product();
    private string? errorMessage;
    private bool isEditing = false;

    ProductDAO productDAO = new ProductDAO();
    CategoryDAO categoryDAO = new CategoryDAO();

    protected override async Task OnInitializedAsync()
    {

        loadProducts();
    }

    private void loadProducts()
    {
        categories = categoryDAO.GetCategories();

        products = productDAO.GetProducts();

        foreach (var item in products)
        {
            var cat = categories.Find(c => c.CategoryId == item.CategoryId);
            if (cat != null)
            {
                if (item.Category == null)
                    item.Category = new Category();

                item.Category = cat;
            }
        }
    }

    private void delete(Objects.Product p)
    {
        productDAO.DeleteProduct(p);
        loadProducts();
    }

    private void save()
    {

        if (isEditing)
        {
            productDAO.UpdateProduct(currentProduct);
        }
        else
        {
            productDAO.SaveProduct(currentProduct);
        }
        currentProduct = new Objects.Product(); // Reset form
        isEditing = false;
        loadProducts();
    }

    private void edit(Objects.Product p)
    {
        currentProduct = new Objects.Product
        {
            ProductId = p.ProductId,
            ProductName = p.ProductName,
            CategoryId = p.CategoryId,
            UnitsInStock = p.UnitsInStock,
            UnitPrice = p.UnitPrice
        };
        isEditing = true;
    }

    private void cancelEdit()
    {
        currentProduct = new Objects.Product(); // Reset form
        isEditing = false;
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;
}
